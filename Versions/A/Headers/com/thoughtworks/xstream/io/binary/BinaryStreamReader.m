//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/io/binary/BinaryStreamReader.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/io/binary/BinaryStreamReader.java"

#include "com/thoughtworks/xstream/converters/ErrorWriter.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/io/StreamException.h"
#include "com/thoughtworks/xstream/io/binary/BinaryStreamReader.h"
#include "com/thoughtworks/xstream/io/binary/ReaderDepthState.h"
#include "com/thoughtworks/xstream/io/binary/Token.h"
#include "java/io/DataInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Error.h"
#include "java/lang/Long.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"


#line 34
@implementation ComThoughtworksXstreamIoBinaryBinaryStreamReader


#line 43
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inputStream {
  if (self = [super init]) {
    depthState_ =
#line 37
    [[ComThoughtworksXstreamIoBinaryReaderDepthState alloc] init];
    idRegistry_ =
#line 38
    [[ComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry alloc] init];
    tokenFormatter_ =
#line 41
    [[ComThoughtworksXstreamIoBinaryToken_Formatter alloc] init];
    
#line 44
    in_ = [[JavaIoDataInputStream alloc] initWithJavaIoInputStream:inputStream];
    
#line 45
    [self moveDown];
  }
  return self;
}


#line 48
- (jboolean)hasMoreChildren {
  
#line 49
  return [((ComThoughtworksXstreamIoBinaryReaderDepthState *) nil_chk(depthState_)) hasMoreChildren];
}


#line 52
- (NSString *)getNodeName {
  
#line 53
  return [((ComThoughtworksXstreamIoBinaryReaderDepthState *) nil_chk(depthState_)) getName];
}


#line 56
- (NSString *)getValue {
  
#line 57
  return [((ComThoughtworksXstreamIoBinaryReaderDepthState *) nil_chk(depthState_)) getValue];
}


#line 60
- (NSString *)getAttributeWithNSString:(NSString *)name {
  
#line 61
  return [((ComThoughtworksXstreamIoBinaryReaderDepthState *) nil_chk(depthState_)) getAttributeWithNSString:name];
}


#line 64
- (NSString *)getAttributeWithInt:(jint)index {
  
#line 65
  return [((ComThoughtworksXstreamIoBinaryReaderDepthState *) nil_chk(depthState_)) getAttributeWithInt:index];
}


#line 68
- (jint)getAttributeCount {
  
#line 69
  return [((ComThoughtworksXstreamIoBinaryReaderDepthState *) nil_chk(depthState_)) getAttributeCount];
}


#line 72
- (NSString *)getAttributeNameWithInt:(jint)index {
  
#line 73
  return [((ComThoughtworksXstreamIoBinaryReaderDepthState *) nil_chk(depthState_)) getAttributeNameWithInt:index];
}


#line 76
- (id<JavaUtilIterator>)getAttributeNames {
  
#line 77
  return [((ComThoughtworksXstreamIoBinaryReaderDepthState *) nil_chk(depthState_)) getAttributeNames];
}


#line 80
- (void)moveDown {
  
#line 81
  [((ComThoughtworksXstreamIoBinaryReaderDepthState *) nil_chk(depthState_)) push];
  ComThoughtworksXstreamIoBinaryToken *firstToken = [self readToken];
  switch ([((ComThoughtworksXstreamIoBinaryToken *) nil_chk(firstToken)) getType]) {
    case ComThoughtworksXstreamIoBinaryToken_TYPE_START_NODE:
    [depthState_ setNameWithNSString:[((ComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry *) nil_chk(idRegistry_)) getWithLong:[firstToken getId]]];
    break;
    default:
    @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithNSString:@"Expected StartNode"];
  }
  while (YES) {
    ComThoughtworksXstreamIoBinaryToken *nextToken = [self readToken];
    switch ([((ComThoughtworksXstreamIoBinaryToken *) nil_chk(nextToken)) getType]) {
      case ComThoughtworksXstreamIoBinaryToken_TYPE_ATTRIBUTE:
      [depthState_ addAttributeWithNSString:[((ComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry *) nil_chk(idRegistry_)) getWithLong:[nextToken getId]] withNSString:[nextToken getValue]];
      break;
      case ComThoughtworksXstreamIoBinaryToken_TYPE_VALUE:
      [depthState_ setValueWithNSString:[nextToken getValue]];
      break;
      case ComThoughtworksXstreamIoBinaryToken_TYPE_END_NODE:
      [depthState_ setHasMoreChildrenWithBoolean:NO];
      [self pushBackWithComThoughtworksXstreamIoBinaryToken:nextToken];
      return;
      case ComThoughtworksXstreamIoBinaryToken_TYPE_START_NODE:
      [depthState_ setHasMoreChildrenWithBoolean:YES];
      [self pushBackWithComThoughtworksXstreamIoBinaryToken:nextToken];
      return;
      default:
      @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithNSString:JreStrcat("$@", @"Unexpected token ", nextToken)];
    }
  }
}


#line 113
- (void)moveUp {
  
#line 114
  [((ComThoughtworksXstreamIoBinaryReaderDepthState *) nil_chk(depthState_)) pop];
  
#line 116
  jint depth = 0;
  
#line 118
  while (YES) {
    ComThoughtworksXstreamIoBinaryToken *nextToken = [self readToken];
    switch ([((ComThoughtworksXstreamIoBinaryToken *) nil_chk(nextToken)) getType]) {
      case ComThoughtworksXstreamIoBinaryToken_TYPE_END_NODE:
      if (depth == 0) {
        goto break_slurp;
      }
      else {
        
#line 125
        depth--;
      }
      break;
      case ComThoughtworksXstreamIoBinaryToken_TYPE_START_NODE:
      depth++;
      break;
      default:
      ;
    }
  }
  break_slurp: ;
  ComThoughtworksXstreamIoBinaryToken *nextToken = [self readToken];
  switch ([((ComThoughtworksXstreamIoBinaryToken *) nil_chk(nextToken)) getType]) {
    case ComThoughtworksXstreamIoBinaryToken_TYPE_END_NODE:
    [depthState_ setHasMoreChildrenWithBoolean:NO];
    break;
    case ComThoughtworksXstreamIoBinaryToken_TYPE_START_NODE:
    [depthState_ setHasMoreChildrenWithBoolean:YES];
    break;
    default:
    @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithNSString:JreStrcat("$@", @"Unexpected token ", nextToken)];
  }
  [self pushBackWithComThoughtworksXstreamIoBinaryToken:nextToken];
}


#line 150
- (ComThoughtworksXstreamIoBinaryToken *)readToken {
  
#line 151
  if (pushback_ == nil) {
    @try {
      ComThoughtworksXstreamIoBinaryToken *token = [((ComThoughtworksXstreamIoBinaryToken_Formatter *) nil_chk(tokenFormatter_)) readWithJavaIoDataInput:in_];
      switch ([((ComThoughtworksXstreamIoBinaryToken *) nil_chk(token)) getType]) {
        case ComThoughtworksXstreamIoBinaryToken_TYPE_MAP_ID_TO_VALUE:
        [((ComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry *) nil_chk(idRegistry_)) putWithLong:[token getId] withNSString:[token getValue]];
        return [self readToken];
        default:
        return token;
      }
    }
    @catch (
#line 161
    JavaIoIOException *e) {
      @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithJavaLangThrowable:e];
    }
  }
  else {
    
#line 165
    ComThoughtworksXstreamIoBinaryToken *result = pushback_;
    pushback_ = nil;
    return result;
  }
}


#line 171
- (void)pushBackWithComThoughtworksXstreamIoBinaryToken:(ComThoughtworksXstreamIoBinaryToken *)token {
  
#line 172
  if (pushback_ == nil) {
    pushback_ = token;
  }
  else {
    @throw [[JavaLangError alloc] initWithNSString:@"Cannot push more than one token back"];
  }
}


#line 180
- (void)close {
  
#line 181
  @try {
    [((JavaIoDataInputStream *) nil_chk(in_)) close];
  }
  @catch (
#line 183
  JavaIoIOException *e) {
    @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithJavaLangThrowable:e];
  }
}


#line 188
- (NSString *)peekNextChild {
  
#line 189
  if ([((ComThoughtworksXstreamIoBinaryReaderDepthState *) nil_chk(depthState_)) hasMoreChildren]) {
    return [((ComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry *) nil_chk(idRegistry_)) getWithLong:[((ComThoughtworksXstreamIoBinaryToken *) nil_chk(pushback_)) getId]];
  }
  return nil;
}


#line 195
- (id<ComThoughtworksXstreamIoHierarchicalStreamReader>)underlyingReader {
  
#line 196
  return self;
}


#line 199
- (void)appendErrorsWithComThoughtworksXstreamConvertersErrorWriter:(id<ComThoughtworksXstreamConvertersErrorWriter>)errorWriter {
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamIoBinaryBinaryStreamReader *)other {
  [super copyAllFieldsTo:other];
  other->depthState_ = depthState_;
  other->idRegistry_ = idRegistry_;
  other->in_ = in_;
  other->pushback_ = pushback_;
  other->tokenFormatter_ = tokenFormatter_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoInputStream:", "BinaryStreamReader", NULL, 0x1, NULL },
    { "hasMoreChildren", NULL, "Z", 0x1, NULL },
    { "getNodeName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getValue", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getAttributeWithNSString:", "getAttribute", "Ljava.lang.String;", 0x1, NULL },
    { "getAttributeWithInt:", "getAttribute", "Ljava.lang.String;", 0x1, NULL },
    { "getAttributeCount", NULL, "I", 0x1, NULL },
    { "getAttributeNameWithInt:", "getAttributeName", "Ljava.lang.String;", 0x1, NULL },
    { "getAttributeNames", NULL, "Ljava.util.Iterator;", 0x1, NULL },
    { "moveDown", NULL, "V", 0x1, NULL },
    { "moveUp", NULL, "V", 0x1, NULL },
    { "readToken", NULL, "Lcom.thoughtworks.xstream.io.binary.Token;", 0x2, NULL },
    { "pushBackWithComThoughtworksXstreamIoBinaryToken:", "pushBack", "V", 0x1, NULL },
    { "close", NULL, "V", 0x1, NULL },
    { "peekNextChild", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "underlyingReader", NULL, "Lcom.thoughtworks.xstream.io.HierarchicalStreamReader;", 0x1, NULL },
    { "appendErrorsWithComThoughtworksXstreamConvertersErrorWriter:", "appendErrors", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "in_", NULL, 0x12, "Ljava.io.DataInputStream;", NULL,  },
    { "depthState_", NULL, 0x12, "Lcom.thoughtworks.xstream.io.binary.ReaderDepthState;", NULL,  },
    { "idRegistry_", NULL, 0x12, "Lcom.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry;", NULL,  },
    { "pushback_", NULL, 0x2, "Lcom.thoughtworks.xstream.io.binary.Token;", NULL,  },
    { "tokenFormatter_", NULL, 0x12, "Lcom.thoughtworks.xstream.io.binary.Token$Formatter;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoBinaryBinaryStreamReader = { "BinaryStreamReader", "com.thoughtworks.xstream.io.binary", NULL, 0x1, 17, methods, 5, fields, 0, NULL};
  return &_ComThoughtworksXstreamIoBinaryBinaryStreamReader;
}

@end


#line 203
@implementation ComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry


#line 207
- (void)putWithLong:(jlong)id_
       withNSString:(NSString *)value {
  
#line 208
  (void) [((id<JavaUtilMap>) nil_chk(map_)) putWithId:[[JavaLangLong alloc] initWithLong:id_] withId:value];
}


#line 211
- (NSString *)getWithLong:(jlong)id_ {
  
#line 212
  NSString *result = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(map_)) getWithId:[[JavaLangLong alloc] initWithLong:id_]], [NSString class]);
  if (result == nil) {
    @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithNSString:JreStrcat("$J", @"Unknown ID : ", id_)];
  }
  else {
    
#line 216
    return result;
  }
}

- (instancetype)init {
  if (self = [super init]) {
    map_ =
#line 205
    [[JavaUtilHashMap alloc] init];
  }
  return self;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry *)other {
  [super copyAllFieldsTo:other];
  other->map_ = map_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "putWithLong:withNSString:", "put", "V", 0x1, NULL },
    { "getWithLong:", "get", "Ljava.lang.String;", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "map_", NULL, 0x2, "Ljava.util.Map;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry = { "IdRegistry", "com.thoughtworks.xstream.io.binary", "BinaryStreamReader", 0xa, 3, methods, 1, fields, 0, NULL};
  return &_ComThoughtworksXstreamIoBinaryBinaryStreamReader_IdRegistry;
}

@end
