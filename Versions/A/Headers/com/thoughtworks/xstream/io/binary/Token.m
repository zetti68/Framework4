//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/io/binary/Token.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/io/binary/Token.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/thoughtworks/xstream/io/StreamException.h"
#include "com/thoughtworks/xstream/io/binary/Token.h"
#include "java/io/DataInput.h"
#include "java/io/DataOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Byte.h"
#include "java/lang/Error.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"


#line 163
@implementation ComThoughtworksXstreamIoBinaryToken_Formatter

- (void)writeWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg
withComThoughtworksXstreamIoBinaryToken:(ComThoughtworksXstreamIoBinaryToken *)token {
  
#line 166
  jlong id_ = [((ComThoughtworksXstreamIoBinaryToken *) nil_chk(token)) getId];
  jbyte idType;
  if (id_ <= JavaLangByte_MAX_VALUE - JavaLangByte_MIN_VALUE) {
    idType = ComThoughtworksXstreamIoBinaryToken_ID_ONE_BYTE;
  }
  else
#line 170
  if (id_ <= JavaLangShort_MAX_VALUE - JavaLangShort_MIN_VALUE) {
    idType = ComThoughtworksXstreamIoBinaryToken_ID_TWO_BYTES;
  }
  else
#line 172
  if (id_ <= (jlong) JavaLangInteger_MAX_VALUE - (jlong) JavaLangInteger_MIN_VALUE) {
    idType = ComThoughtworksXstreamIoBinaryToken_ID_FOUR_BYTES;
  }
  else {
    
#line 175
    idType = ComThoughtworksXstreamIoBinaryToken_ID_EIGHT_BYTES;
  }
  [((id<JavaIoDataOutput>) nil_chk(outArg)) writeWithInt:[token getType] + idType];
  [token writeToWithJavaIoDataOutput:outArg withByte:idType];
}


#line 181
- (ComThoughtworksXstreamIoBinaryToken *)readWithJavaIoDataInput:(id<JavaIoDataInput>)inArg {
  
#line 182
  jbyte nextByte = [((id<JavaIoDataInput>) nil_chk(inArg)) readByte];
  jbyte type = (jbyte) (nextByte & ComThoughtworksXstreamIoBinaryToken_TYPE_MASK);
  jbyte idType = (jbyte) (nextByte & ComThoughtworksXstreamIoBinaryToken_ID_MASK);
  ComThoughtworksXstreamIoBinaryToken *token = [self contructTokenWithByte:type];
  [((ComThoughtworksXstreamIoBinaryToken *) nil_chk(token)) readFromWithJavaIoDataInput:inArg withByte:idType];
  return token;
}


#line 190
- (ComThoughtworksXstreamIoBinaryToken *)contructTokenWithByte:(jbyte)type {
  
#line 191
  switch (type) {
    case ComThoughtworksXstreamIoBinaryToken_TYPE_START_NODE:
    return [[ComThoughtworksXstreamIoBinaryToken_StartNode alloc] init];
    case ComThoughtworksXstreamIoBinaryToken_TYPE_MAP_ID_TO_VALUE:
    return [[ComThoughtworksXstreamIoBinaryToken_MapIdToValue alloc] init];
    case ComThoughtworksXstreamIoBinaryToken_TYPE_ATTRIBUTE:
    return [[ComThoughtworksXstreamIoBinaryToken_Attribute alloc] init];
    case ComThoughtworksXstreamIoBinaryToken_TYPE_END_NODE:
    return [[ComThoughtworksXstreamIoBinaryToken_EndNode alloc] init];
    case ComThoughtworksXstreamIoBinaryToken_TYPE_VALUE:
    return [[ComThoughtworksXstreamIoBinaryToken_Value alloc] init];
    default:
    @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithNSString:@"Unknown token type"];
  }
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "writeWithJavaIoDataOutput:withComThoughtworksXstreamIoBinaryToken:", "write", "V", 0x1, "Ljava.io.IOException;" },
    { "readWithJavaIoDataInput:", "read", "Lcom.thoughtworks.xstream.io.binary.Token;", 0x1, "Ljava.io.IOException;" },
    { "contructTokenWithByte:", "contructToken", "Lcom.thoughtworks.xstream.io.binary.Token;", 0x2, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoBinaryToken_Formatter = { "Formatter", "com.thoughtworks.xstream.io.binary", "Token", 0x9, 4, methods, 0, NULL, 0, NULL};
  return &_ComThoughtworksXstreamIoBinaryToken_Formatter;
}

@end


#line 36
@implementation ComThoughtworksXstreamIoBinaryToken

NSString * ComThoughtworksXstreamIoBinaryToken_ID_SPLITTED_ = 
#line 52
@"\x00\u2021\x00";


#line 60
- (instancetype)initWithByte:(jbyte)type {
  if (self = [super init]) {
    id__ =
#line 57
    -1;
    
#line 61
    self->type_ = type;
  }
  return self;
}


#line 64
- (jbyte)getType {
  
#line 65
  return type_;
}


#line 68
- (jlong)getId {
  
#line 69
  return id__;
}


#line 72
- (NSString *)getValue {
  
#line 73
  return value_;
}

- (NSString *)description {
  
#line 77
  return JreStrcat("$$J$$$", [[self getClass] getName], @" [id=", id__, @", value='", value_, @"']");
}

- (jboolean)isEqual:(id)o {
  
#line 81
  if (self == o) return YES;
  if (o == nil || [self getClass] != [o getClass]) return NO;
  
#line 84
  ComThoughtworksXstreamIoBinaryToken *token = (ComThoughtworksXstreamIoBinaryToken *) check_class_cast(o, [ComThoughtworksXstreamIoBinaryToken class]);
  
#line 86
  if (id__ != ((ComThoughtworksXstreamIoBinaryToken *) nil_chk(token))->id__) return NO;
  if (type_ != token->type_) return NO;
  return !(value_ != nil ? ![value_ isEqual:token->value_] : token->value_ != nil);
}

- (NSUInteger)hash {
  
#line 92
  jint result;
  result = type_;
  result = 29 * result + (jint) (id__ ^ (URShift64(id__, 32)));
  result = 29 * result + (value_ != nil ? ((jint) [value_ hash]) : 0);
  return result;
}


#line 99
- (void)writeToWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg
                           withByte:(jbyte)idType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 101
- (void)readFromWithJavaIoDataInput:(id<JavaIoDataInput>)inArg
                           withByte:(jbyte)idType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 103
- (void)writeIdWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg
                           withLong:(jlong)id_
                           withByte:(jbyte)idType {
  
#line 104
  if (id_ < 0) {
    @throw [[JavaIoIOException alloc] initWithNSString:JreStrcat("$J", @"id must not be negative ", id_)];
  }
  switch (idType) {
    case ComThoughtworksXstreamIoBinaryToken_ID_ONE_BYTE:
    [((id<JavaIoDataOutput>) nil_chk(outArg)) writeByteWithInt:(jbyte) id_ + JavaLangByte_MIN_VALUE];
    break;
    case ComThoughtworksXstreamIoBinaryToken_ID_TWO_BYTES:
    [((id<JavaIoDataOutput>) nil_chk(outArg)) writeShortWithInt:(jshort) id_ + JavaLangShort_MIN_VALUE];
    break;
    case ComThoughtworksXstreamIoBinaryToken_ID_FOUR_BYTES:
    [((id<JavaIoDataOutput>) nil_chk(outArg)) writeIntWithInt:(jint) id_ + JavaLangInteger_MIN_VALUE];
    break;
    case ComThoughtworksXstreamIoBinaryToken_ID_EIGHT_BYTES:
    [((id<JavaIoDataOutput>) nil_chk(outArg)) writeLongWithLong:id_ + JavaLangLong_MIN_VALUE];
    break;
    default:
    @throw [[JavaLangError alloc] initWithNSString:JreStrcat("$B", @"Unknown idType ", idType)];
  }
}


#line 125
- (void)writeStringWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg
                           withNSString:(NSString *)string {
  
#line 126
  IOSByteArray *bytes = (((jint) [((NSString *) nil_chk(string)) length]) > ComThoughtworksXstreamIoBinaryToken_MAX_UTF8_LENGTH / 4) ? [string getBytesWithCharsetName:@"utf-8"] : [IOSByteArray arrayWithLength:0];
  jint length = bytes->size_;
  if (length <= ComThoughtworksXstreamIoBinaryToken_MAX_UTF8_LENGTH) {
    [((id<JavaIoDataOutput>) nil_chk(outArg)) writeUTFWithNSString:string];
  }
  else {
    
#line 131
    [((id<JavaIoDataOutput>) nil_chk(outArg)) writeUTFWithNSString:ComThoughtworksXstreamIoBinaryToken_ID_SPLITTED_];
    [outArg writeIntWithInt:bytes->size_];
    [outArg writeWithByteArray:bytes];
  }
}


#line 137
- (jlong)readIdWithJavaIoDataInput:(id<JavaIoDataInput>)inArg
                          withByte:(jbyte)idType {
  
#line 138
  switch (idType) {
    case ComThoughtworksXstreamIoBinaryToken_ID_ONE_BYTE:
    return [((id<JavaIoDataInput>) nil_chk(inArg)) readByte] - JavaLangByte_MIN_VALUE;
    case ComThoughtworksXstreamIoBinaryToken_ID_TWO_BYTES:
    return [((id<JavaIoDataInput>) nil_chk(inArg)) readShort] - JavaLangShort_MIN_VALUE;
    case ComThoughtworksXstreamIoBinaryToken_ID_FOUR_BYTES:
    return [((id<JavaIoDataInput>) nil_chk(inArg)) readInt] - JavaLangInteger_MIN_VALUE;
    case ComThoughtworksXstreamIoBinaryToken_ID_EIGHT_BYTES:
    return [((id<JavaIoDataInput>) nil_chk(inArg)) readLong] - JavaLangLong_MIN_VALUE;
    default:
    @throw [[JavaLangError alloc] initWithNSString:JreStrcat("$B", @"Unknown idType ", idType)];
  }
}


#line 152
- (NSString *)readStringWithJavaIoDataInput:(id<JavaIoDataInput>)inArg {
  
#line 153
  NSString *string = [((id<JavaIoDataInput>) nil_chk(inArg)) readUTF];
  if (![((NSString *) nil_chk(ComThoughtworksXstreamIoBinaryToken_ID_SPLITTED_)) isEqual:string]) {
    return string;
  }
  jint size = [inArg readInt];
  IOSByteArray *bytes = [IOSByteArray arrayWithLength:size];
  [inArg readFullyWithByteArray:bytes];
  return [NSString stringWithBytes:bytes charsetName:@"utf-8"];
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamIoBinaryToken *)other {
  [super copyAllFieldsTo:other];
  other->id__ = id__;
  other->type_ = type_;
  other->value_ = value_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithByte:", "Token", NULL, 0x1, NULL },
    { "getType", NULL, "B", 0x1, NULL },
    { "getId", NULL, "J", 0x1, NULL },
    { "getValue", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "writeToWithJavaIoDataOutput:withByte:", "writeTo", "V", 0x401, "Ljava.io.IOException;" },
    { "readFromWithJavaIoDataInput:withByte:", "readFrom", "V", 0x401, "Ljava.io.IOException;" },
    { "writeIdWithJavaIoDataOutput:withLong:withByte:", "writeId", "V", 0x4, "Ljava.io.IOException;" },
    { "writeStringWithJavaIoDataOutput:withNSString:", "writeString", "V", 0x4, "Ljava.io.IOException;" },
    { "readIdWithJavaIoDataInput:withByte:", "readId", "J", 0x4, "Ljava.io.IOException;" },
    { "readStringWithJavaIoDataInput:", "readString", "Ljava.lang.String;", 0x4, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_MASK_", NULL, 0x1a, "B", NULL, .constantValue.asChar = ComThoughtworksXstreamIoBinaryToken_TYPE_MASK },
    { "TYPE_VERSION_", NULL, 0x19, "B", NULL, .constantValue.asChar = ComThoughtworksXstreamIoBinaryToken_TYPE_VERSION },
    { "TYPE_MAP_ID_TO_VALUE_", NULL, 0x19, "B", NULL, .constantValue.asChar = ComThoughtworksXstreamIoBinaryToken_TYPE_MAP_ID_TO_VALUE },
    { "TYPE_START_NODE_", NULL, 0x19, "B", NULL, .constantValue.asChar = ComThoughtworksXstreamIoBinaryToken_TYPE_START_NODE },
    { "TYPE_END_NODE_", NULL, 0x19, "B", NULL, .constantValue.asChar = ComThoughtworksXstreamIoBinaryToken_TYPE_END_NODE },
    { "TYPE_ATTRIBUTE_", NULL, 0x19, "B", NULL, .constantValue.asChar = ComThoughtworksXstreamIoBinaryToken_TYPE_ATTRIBUTE },
    { "TYPE_VALUE_", NULL, 0x19, "B", NULL, .constantValue.asChar = ComThoughtworksXstreamIoBinaryToken_TYPE_VALUE },
    { "ID_MASK_", NULL, 0x1a, "B", NULL, .constantValue.asChar = ComThoughtworksXstreamIoBinaryToken_ID_MASK },
    { "ID_ONE_BYTE_", NULL, 0x1a, "B", NULL, .constantValue.asChar = ComThoughtworksXstreamIoBinaryToken_ID_ONE_BYTE },
    { "ID_TWO_BYTES_", NULL, 0x1a, "B", NULL, .constantValue.asChar = ComThoughtworksXstreamIoBinaryToken_ID_TWO_BYTES },
    { "ID_FOUR_BYTES_", NULL, 0x1a, "B", NULL, .constantValue.asChar = ComThoughtworksXstreamIoBinaryToken_ID_FOUR_BYTES },
    { "ID_EIGHT_BYTES_", NULL, 0x1a, "B", NULL, .constantValue.asChar = ComThoughtworksXstreamIoBinaryToken_ID_EIGHT_BYTES },
    { "ID_SPLITTED_", NULL, 0x1a, "Ljava.lang.String;", &ComThoughtworksXstreamIoBinaryToken_ID_SPLITTED_,  },
    { "MAX_UTF8_LENGTH_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComThoughtworksXstreamIoBinaryToken_MAX_UTF8_LENGTH },
    { "type_", NULL, 0x12, "B", NULL,  },
    { "id__", "id", 0x4, "J", NULL,  },
    { "value_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoBinaryToken = { "Token", "com.thoughtworks.xstream.io.binary", NULL, 0x401, 13, methods, 17, fields, 0, NULL};
  return &_ComThoughtworksXstreamIoBinaryToken;
}

@end


#line 208
@implementation ComThoughtworksXstreamIoBinaryToken_MapIdToValue

- (instancetype)initWithLong:(jlong)id_
                withNSString:(NSString *)value {
  if (self =
#line 211
  [super initWithByte:ComThoughtworksXstreamIoBinaryToken_TYPE_MAP_ID_TO_VALUE]) {
    
#line 212
    self->id__ = id_;
    
#line 213
    self->value_ = value;
  }
  return self;
}


#line 216
- (instancetype)init {
  return
#line 217
  [super initWithByte:ComThoughtworksXstreamIoBinaryToken_TYPE_MAP_ID_TO_VALUE];
}


#line 220
- (void)writeToWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg
                           withByte:(jbyte)idType {
  
#line 221
  [self writeIdWithJavaIoDataOutput:outArg withLong:id__ withByte:idType];
  [self writeStringWithJavaIoDataOutput:outArg withNSString:value_];
}


#line 225
- (void)readFromWithJavaIoDataInput:(id<JavaIoDataInput>)inArg
                           withByte:(jbyte)idType {
  
#line 226
  id__ = [self readIdWithJavaIoDataInput:inArg withByte:idType];
  value_ = [self readStringWithJavaIoDataInput:inArg];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withNSString:", "MapIdToValue", NULL, 0x1, NULL },
    { "init", "MapIdToValue", NULL, 0x1, NULL },
    { "writeToWithJavaIoDataOutput:withByte:", "writeTo", "V", 0x1, "Ljava.io.IOException;" },
    { "readFromWithJavaIoDataInput:withByte:", "readFrom", "V", 0x1, "Ljava.io.IOException;" },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoBinaryToken_MapIdToValue = { "MapIdToValue", "com.thoughtworks.xstream.io.binary", "Token", 0x9, 4, methods, 0, NULL, 0, NULL};
  return &_ComThoughtworksXstreamIoBinaryToken_MapIdToValue;
}

@end


#line 232
@implementation ComThoughtworksXstreamIoBinaryToken_StartNode

- (instancetype)initWithLong:(jlong)id_ {
  if (self =
#line 235
  [super initWithByte:ComThoughtworksXstreamIoBinaryToken_TYPE_START_NODE]) {
    
#line 236
    self->id__ = id_;
  }
  return self;
}


#line 239
- (instancetype)init {
  return
#line 240
  [super initWithByte:ComThoughtworksXstreamIoBinaryToken_TYPE_START_NODE];
}


#line 243
- (void)writeToWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg
                           withByte:(jbyte)idType {
  
#line 244
  [self writeIdWithJavaIoDataOutput:outArg withLong:id__ withByte:idType];
}


#line 247
- (void)readFromWithJavaIoDataInput:(id<JavaIoDataInput>)inArg
                           withByte:(jbyte)idType {
  
#line 248
  id__ = [self readIdWithJavaIoDataInput:inArg withByte:idType];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:", "StartNode", NULL, 0x1, NULL },
    { "init", "StartNode", NULL, 0x1, NULL },
    { "writeToWithJavaIoDataOutput:withByte:", "writeTo", "V", 0x1, "Ljava.io.IOException;" },
    { "readFromWithJavaIoDataInput:withByte:", "readFrom", "V", 0x1, "Ljava.io.IOException;" },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoBinaryToken_StartNode = { "StartNode", "com.thoughtworks.xstream.io.binary", "Token", 0x9, 4, methods, 0, NULL, 0, NULL};
  return &_ComThoughtworksXstreamIoBinaryToken_StartNode;
}

@end


#line 253
@implementation ComThoughtworksXstreamIoBinaryToken_EndNode

- (instancetype)init {
  return
#line 256
  [super initWithByte:ComThoughtworksXstreamIoBinaryToken_TYPE_END_NODE];
}


#line 259
- (void)writeToWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg
                           withByte:(jbyte)idType {
}


#line 262
- (void)readFromWithJavaIoDataInput:(id<JavaIoDataInput>)inArg
                           withByte:(jbyte)idType {
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "EndNode", NULL, 0x1, NULL },
    { "writeToWithJavaIoDataOutput:withByte:", "writeTo", "V", 0x1, NULL },
    { "readFromWithJavaIoDataInput:withByte:", "readFrom", "V", 0x1, NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoBinaryToken_EndNode = { "EndNode", "com.thoughtworks.xstream.io.binary", "Token", 0x9, 3, methods, 0, NULL, 0, NULL};
  return &_ComThoughtworksXstreamIoBinaryToken_EndNode;
}

@end


#line 267
@implementation ComThoughtworksXstreamIoBinaryToken_Attribute

- (instancetype)initWithLong:(jlong)id_
                withNSString:(NSString *)value {
  if (self =
#line 270
  [super initWithByte:ComThoughtworksXstreamIoBinaryToken_TYPE_ATTRIBUTE]) {
    
#line 271
    self->id__ = id_;
    
#line 272
    self->value_ = value;
  }
  return self;
}


#line 275
- (instancetype)init {
  return
#line 276
  [super initWithByte:ComThoughtworksXstreamIoBinaryToken_TYPE_ATTRIBUTE];
}


#line 279
- (void)writeToWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg
                           withByte:(jbyte)idType {
  
#line 280
  [self writeIdWithJavaIoDataOutput:outArg withLong:id__ withByte:idType];
  [self writeStringWithJavaIoDataOutput:outArg withNSString:value_];
}


#line 284
- (void)readFromWithJavaIoDataInput:(id<JavaIoDataInput>)inArg
                           withByte:(jbyte)idType {
  
#line 285
  self->id__ = [self readIdWithJavaIoDataInput:inArg withByte:idType];
  self->value_ = [self readStringWithJavaIoDataInput:inArg];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withNSString:", "Attribute", NULL, 0x1, NULL },
    { "init", "Attribute", NULL, 0x1, NULL },
    { "writeToWithJavaIoDataOutput:withByte:", "writeTo", "V", 0x1, "Ljava.io.IOException;" },
    { "readFromWithJavaIoDataInput:withByte:", "readFrom", "V", 0x1, "Ljava.io.IOException;" },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoBinaryToken_Attribute = { "Attribute", "com.thoughtworks.xstream.io.binary", "Token", 0x9, 4, methods, 0, NULL, 0, NULL};
  return &_ComThoughtworksXstreamIoBinaryToken_Attribute;
}

@end


#line 291
@implementation ComThoughtworksXstreamIoBinaryToken_Value

- (instancetype)initWithNSString:(NSString *)value {
  if (self =
#line 294
  [super initWithByte:ComThoughtworksXstreamIoBinaryToken_TYPE_VALUE]) {
    
#line 295
    self->value_ = value;
  }
  return self;
}


#line 298
- (instancetype)init {
  return
#line 299
  [super initWithByte:ComThoughtworksXstreamIoBinaryToken_TYPE_VALUE];
}


#line 302
- (void)writeToWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg
                           withByte:(jbyte)idType {
  
#line 303
  [self writeStringWithJavaIoDataOutput:outArg withNSString:value_];
}


#line 306
- (void)readFromWithJavaIoDataInput:(id<JavaIoDataInput>)inArg
                           withByte:(jbyte)idType {
  
#line 307
  value_ = [self readStringWithJavaIoDataInput:inArg];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "Value", NULL, 0x1, NULL },
    { "init", "Value", NULL, 0x1, NULL },
    { "writeToWithJavaIoDataOutput:withByte:", "writeTo", "V", 0x1, "Ljava.io.IOException;" },
    { "readFromWithJavaIoDataInput:withByte:", "readFrom", "V", 0x1, "Ljava.io.IOException;" },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoBinaryToken_Value = { "Value", "com.thoughtworks.xstream.io.binary", "Token", 0x9, 4, methods, 0, NULL, 0, NULL};
  return &_ComThoughtworksXstreamIoBinaryToken_Value;
}

@end
