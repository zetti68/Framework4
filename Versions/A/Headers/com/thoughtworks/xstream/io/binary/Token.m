//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/io/binary/Token.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/io/binary/Token.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/io/StreamException.h"
#include "com/thoughtworks/xstream/io/binary/Token.h"
#include "java/io/DataInput.h"
#include "java/io/DataOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Byte.h"
#include "java/lang/Error.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"

#define ComThoughtworksXstreamIoBinaryToken_TYPE_MASK 7
#define ComThoughtworksXstreamIoBinaryToken_ID_MASK 56
#define ComThoughtworksXstreamIoBinaryToken_ID_ONE_BYTE 8
#define ComThoughtworksXstreamIoBinaryToken_ID_TWO_BYTES 16
#define ComThoughtworksXstreamIoBinaryToken_ID_FOUR_BYTES 24
#define ComThoughtworksXstreamIoBinaryToken_ID_EIGHT_BYTES 32
#define ComThoughtworksXstreamIoBinaryToken_MAX_UTF8_LENGTH 65535

@interface ComThoughtworksXstreamIoBinaryToken () {
 @public
  jbyte type_;
}

@end

J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamIoBinaryToken, TYPE_MASK, jbyte)

J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamIoBinaryToken, ID_MASK, jbyte)

J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamIoBinaryToken, ID_ONE_BYTE, jbyte)

J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamIoBinaryToken, ID_TWO_BYTES, jbyte)

J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamIoBinaryToken, ID_FOUR_BYTES, jbyte)

J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamIoBinaryToken, ID_EIGHT_BYTES, jbyte)

static NSString *ComThoughtworksXstreamIoBinaryToken_ID_SPLITTED_ = 
#line 52
@"\x00\u2021\x00";
J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamIoBinaryToken, ID_SPLITTED_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamIoBinaryToken, MAX_UTF8_LENGTH, jint)

@interface ComThoughtworksXstreamIoBinaryToken_Formatter ()

- (ComThoughtworksXstreamIoBinaryToken *)contructTokenWithByte:(jbyte)type;

@end

__attribute__((unused)) static ComThoughtworksXstreamIoBinaryToken *ComThoughtworksXstreamIoBinaryToken_Formatter_contructTokenWithByte_(ComThoughtworksXstreamIoBinaryToken_Formatter *self, jbyte type);


#line 36
@implementation ComThoughtworksXstreamIoBinaryToken


#line 60
- (instancetype)initWithByte:(jbyte)type {
  ComThoughtworksXstreamIoBinaryToken_initWithByte_(self, type);
  return self;
}


#line 64
- (jbyte)getType {
  return type_;
}

- (jlong)getId {
  return id__;
}

- (NSString *)getValue {
  return value_;
}

- (NSString *)description {
  return JreStrcat("$$J$$$", [[self getClass] getName], @" [id=", id__, @", value='", value_, @"']");
}

- (jboolean)isEqual:(id)o {
  if (self == o) return YES;
  if (o == nil || [self getClass] != [o getClass]) return NO;
  
#line 84
  ComThoughtworksXstreamIoBinaryToken *token = (ComThoughtworksXstreamIoBinaryToken *) check_class_cast(o, [ComThoughtworksXstreamIoBinaryToken class]);
  
#line 86
  if (id__ != ((ComThoughtworksXstreamIoBinaryToken *) nil_chk(token))->id__) return NO;
  if (type_ != token->type_) return NO;
  return !(value_ != nil ? ![value_ isEqual:token->value_] : token->value_ != nil);
}


#line 91
- (NSUInteger)hash {
  jint result;
  result = type_;
  result = 29 * result + (jint) (id__ ^ (URShift64(id__, 32)));
  result = 29 * result + (value_ != nil ? ((jint) [value_ hash]) : 0);
  return result;
}

- (void)writeToWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg
                           withByte:(jbyte)idType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 101
- (void)readFromWithJavaIoDataInput:(id<JavaIoDataInput>)inArg
                           withByte:(jbyte)idType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 103
- (void)writeIdWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg
                           withLong:(jlong)id_
                           withByte:(jbyte)idType {
  if (id_ < 0) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$J", @"id must not be negative ", id_));
  }
  switch (idType) {
    case ComThoughtworksXstreamIoBinaryToken_ID_ONE_BYTE:
    [((id<JavaIoDataOutput>) nil_chk(outArg)) writeByteWithInt:(jbyte) id_ + JavaLangByte_MIN_VALUE];
    break;
    case ComThoughtworksXstreamIoBinaryToken_ID_TWO_BYTES:
    [((id<JavaIoDataOutput>) nil_chk(outArg)) writeShortWithInt:(jshort) id_ + JavaLangShort_MIN_VALUE];
    break;
    case ComThoughtworksXstreamIoBinaryToken_ID_FOUR_BYTES:
    [((id<JavaIoDataOutput>) nil_chk(outArg)) writeIntWithInt:(jint) id_ + JavaLangInteger_MIN_VALUE];
    break;
    case ComThoughtworksXstreamIoBinaryToken_ID_EIGHT_BYTES:
    [((id<JavaIoDataOutput>) nil_chk(outArg)) writeLongWithLong:id_ + JavaLangLong_MIN_VALUE];
    break;
    default:
    @throw new_JavaLangError_initWithNSString_(JreStrcat("$B", @"Unknown idType ", idType));
  }
}


#line 125
- (void)writeStringWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg
                           withNSString:(NSString *)string {
  IOSByteArray *bytes = (((jint) [((NSString *) nil_chk(string)) length]) > ComThoughtworksXstreamIoBinaryToken_MAX_UTF8_LENGTH / 4) ? [string getBytesWithCharsetName:@"utf-8"] : [IOSByteArray newArrayWithLength:0];
  jint length = bytes->size_;
  if (length <= ComThoughtworksXstreamIoBinaryToken_MAX_UTF8_LENGTH) {
    [((id<JavaIoDataOutput>) nil_chk(outArg)) writeUTFWithNSString:string];
  }
  else {
    
#line 131
    [((id<JavaIoDataOutput>) nil_chk(outArg)) writeUTFWithNSString:ComThoughtworksXstreamIoBinaryToken_ID_SPLITTED_];
    [outArg writeIntWithInt:bytes->size_];
    [outArg writeWithByteArray:bytes];
  }
}


#line 137
- (jlong)readIdWithJavaIoDataInput:(id<JavaIoDataInput>)inArg
                          withByte:(jbyte)idType {
  switch (idType) {
    case ComThoughtworksXstreamIoBinaryToken_ID_ONE_BYTE:
    return [((id<JavaIoDataInput>) nil_chk(inArg)) readByte] - JavaLangByte_MIN_VALUE;
    case ComThoughtworksXstreamIoBinaryToken_ID_TWO_BYTES:
    return [((id<JavaIoDataInput>) nil_chk(inArg)) readShort] - JavaLangShort_MIN_VALUE;
    case ComThoughtworksXstreamIoBinaryToken_ID_FOUR_BYTES:
    return [((id<JavaIoDataInput>) nil_chk(inArg)) readInt] - JavaLangInteger_MIN_VALUE;
    case ComThoughtworksXstreamIoBinaryToken_ID_EIGHT_BYTES:
    return [((id<JavaIoDataInput>) nil_chk(inArg)) readLong] - JavaLangLong_MIN_VALUE;
    default:
    @throw new_JavaLangError_initWithNSString_(JreStrcat("$B", @"Unknown idType ", idType));
  }
}


#line 152
- (NSString *)readStringWithJavaIoDataInput:(id<JavaIoDataInput>)inArg {
  NSString *string = [((id<JavaIoDataInput>) nil_chk(inArg)) readUTF];
  if (![((NSString *) nil_chk(ComThoughtworksXstreamIoBinaryToken_ID_SPLITTED_)) isEqual:string]) {
    return string;
  }
  jint size = [inArg readInt];
  IOSByteArray *bytes = [IOSByteArray newArrayWithLength:size];
  [inArg readFullyWithByteArray:bytes];
  return [NSString stringWithBytes:bytes charsetName:@"utf-8"];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithByte:", "Token", NULL, 0x1, NULL, NULL },
    { "getType", NULL, "B", 0x1, NULL, NULL },
    { "getId", NULL, "J", 0x1, NULL, NULL },
    { "getValue", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "writeToWithJavaIoDataOutput:withByte:", "writeTo", "V", 0x401, "Ljava.io.IOException;", NULL },
    { "readFromWithJavaIoDataInput:withByte:", "readFrom", "V", 0x401, "Ljava.io.IOException;", NULL },
    { "writeIdWithJavaIoDataOutput:withLong:withByte:", "writeId", "V", 0x4, "Ljava.io.IOException;", NULL },
    { "writeStringWithJavaIoDataOutput:withNSString:", "writeString", "V", 0x4, "Ljava.io.IOException;", NULL },
    { "readIdWithJavaIoDataInput:withByte:", "readId", "J", 0x4, "Ljava.io.IOException;", NULL },
    { "readStringWithJavaIoDataInput:", "readString", "Ljava.lang.String;", 0x4, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_MASK_", NULL, 0x1a, "B", NULL, NULL, .constantValue.asChar = ComThoughtworksXstreamIoBinaryToken_TYPE_MASK },
    { "TYPE_VERSION_", NULL, 0x19, "B", NULL, NULL, .constantValue.asChar = ComThoughtworksXstreamIoBinaryToken_TYPE_VERSION },
    { "TYPE_MAP_ID_TO_VALUE_", NULL, 0x19, "B", NULL, NULL, .constantValue.asChar = ComThoughtworksXstreamIoBinaryToken_TYPE_MAP_ID_TO_VALUE },
    { "TYPE_START_NODE_", NULL, 0x19, "B", NULL, NULL, .constantValue.asChar = ComThoughtworksXstreamIoBinaryToken_TYPE_START_NODE },
    { "TYPE_END_NODE_", NULL, 0x19, "B", NULL, NULL, .constantValue.asChar = ComThoughtworksXstreamIoBinaryToken_TYPE_END_NODE },
    { "TYPE_ATTRIBUTE_", NULL, 0x19, "B", NULL, NULL, .constantValue.asChar = ComThoughtworksXstreamIoBinaryToken_TYPE_ATTRIBUTE },
    { "TYPE_VALUE_", NULL, 0x19, "B", NULL, NULL, .constantValue.asChar = ComThoughtworksXstreamIoBinaryToken_TYPE_VALUE },
    { "ID_MASK_", NULL, 0x1a, "B", NULL, NULL, .constantValue.asChar = ComThoughtworksXstreamIoBinaryToken_ID_MASK },
    { "ID_ONE_BYTE_", NULL, 0x1a, "B", NULL, NULL, .constantValue.asChar = ComThoughtworksXstreamIoBinaryToken_ID_ONE_BYTE },
    { "ID_TWO_BYTES_", NULL, 0x1a, "B", NULL, NULL, .constantValue.asChar = ComThoughtworksXstreamIoBinaryToken_ID_TWO_BYTES },
    { "ID_FOUR_BYTES_", NULL, 0x1a, "B", NULL, NULL, .constantValue.asChar = ComThoughtworksXstreamIoBinaryToken_ID_FOUR_BYTES },
    { "ID_EIGHT_BYTES_", NULL, 0x1a, "B", NULL, NULL, .constantValue.asChar = ComThoughtworksXstreamIoBinaryToken_ID_EIGHT_BYTES },
    { "ID_SPLITTED_", NULL, 0x1a, "Ljava.lang.String;", &ComThoughtworksXstreamIoBinaryToken_ID_SPLITTED_, NULL,  },
    { "MAX_UTF8_LENGTH_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComThoughtworksXstreamIoBinaryToken_MAX_UTF8_LENGTH },
    { "type_", NULL, 0x12, "B", NULL, NULL,  },
    { "id__", "id", 0x4, "J", NULL, NULL,  },
    { "value_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lcom.thoughtworks.xstream.io.binary.Token$Formatter;", "Lcom.thoughtworks.xstream.io.binary.Token$MapIdToValue;", "Lcom.thoughtworks.xstream.io.binary.Token$StartNode;", "Lcom.thoughtworks.xstream.io.binary.Token$EndNode;", "Lcom.thoughtworks.xstream.io.binary.Token$Attribute;", "Lcom.thoughtworks.xstream.io.binary.Token$Value;"};
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoBinaryToken = { 2, "Token", "com.thoughtworks.xstream.io.binary", NULL, 0x401, 13, methods, 17, fields, 0, NULL, 6, inner_classes, NULL, NULL };
  return &_ComThoughtworksXstreamIoBinaryToken;
}

@end


#line 60
void ComThoughtworksXstreamIoBinaryToken_initWithByte_(ComThoughtworksXstreamIoBinaryToken *self, jbyte type) {
  (void) NSObject_init(self);
  self->id__ =
#line 57
  -1;
  
#line 61
  self->type_ = type;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamIoBinaryToken)


#line 163
@implementation ComThoughtworksXstreamIoBinaryToken_Formatter

- (void)writeWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg
withComThoughtworksXstreamIoBinaryToken:(ComThoughtworksXstreamIoBinaryToken *)token {
  jlong id_ = [((ComThoughtworksXstreamIoBinaryToken *) nil_chk(token)) getId];
  jbyte idType;
  if (id_ <= JavaLangByte_MAX_VALUE - JavaLangByte_MIN_VALUE) {
    idType = ComThoughtworksXstreamIoBinaryToken_ID_ONE_BYTE;
  }
  else
#line 170
  if (id_ <= JavaLangShort_MAX_VALUE - JavaLangShort_MIN_VALUE) {
    idType = ComThoughtworksXstreamIoBinaryToken_ID_TWO_BYTES;
  }
  else
#line 172
  if (id_ <= (jlong) JavaLangInteger_MAX_VALUE - (jlong) JavaLangInteger_MIN_VALUE) {
    idType = ComThoughtworksXstreamIoBinaryToken_ID_FOUR_BYTES;
  }
  else {
    
#line 175
    idType = ComThoughtworksXstreamIoBinaryToken_ID_EIGHT_BYTES;
  }
  [((id<JavaIoDataOutput>) nil_chk(outArg)) writeWithInt:[token getType] + idType];
  [token writeToWithJavaIoDataOutput:outArg withByte:idType];
}


#line 181
- (ComThoughtworksXstreamIoBinaryToken *)readWithJavaIoDataInput:(id<JavaIoDataInput>)inArg {
  jbyte nextByte = [((id<JavaIoDataInput>) nil_chk(inArg)) readByte];
  jbyte type = (jbyte) (nextByte & ComThoughtworksXstreamIoBinaryToken_TYPE_MASK);
  jbyte idType = (jbyte) (nextByte & ComThoughtworksXstreamIoBinaryToken_ID_MASK);
  ComThoughtworksXstreamIoBinaryToken *token = ComThoughtworksXstreamIoBinaryToken_Formatter_contructTokenWithByte_(self, type);
  [((ComThoughtworksXstreamIoBinaryToken *) nil_chk(token)) readFromWithJavaIoDataInput:inArg withByte:idType];
  return token;
}

- (ComThoughtworksXstreamIoBinaryToken *)contructTokenWithByte:(jbyte)type {
  return ComThoughtworksXstreamIoBinaryToken_Formatter_contructTokenWithByte_(self, type);
}

- (instancetype)init {
  ComThoughtworksXstreamIoBinaryToken_Formatter_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "writeWithJavaIoDataOutput:withComThoughtworksXstreamIoBinaryToken:", "write", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "readWithJavaIoDataInput:", "read", "Lcom.thoughtworks.xstream.io.binary.Token;", 0x1, "Ljava.io.IOException;", NULL },
    { "contructTokenWithByte:", "contructToken", "Lcom.thoughtworks.xstream.io.binary.Token;", 0x2, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoBinaryToken_Formatter = { 2, "Formatter", "com.thoughtworks.xstream.io.binary", "Token", 0x9, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamIoBinaryToken_Formatter;
}

@end


#line 190
ComThoughtworksXstreamIoBinaryToken *ComThoughtworksXstreamIoBinaryToken_Formatter_contructTokenWithByte_(ComThoughtworksXstreamIoBinaryToken_Formatter *self, jbyte type) {
  switch (type) {
    case ComThoughtworksXstreamIoBinaryToken_TYPE_START_NODE:
    return new_ComThoughtworksXstreamIoBinaryToken_StartNode_init();
    case ComThoughtworksXstreamIoBinaryToken_TYPE_MAP_ID_TO_VALUE:
    return new_ComThoughtworksXstreamIoBinaryToken_MapIdToValue_init();
    case ComThoughtworksXstreamIoBinaryToken_TYPE_ATTRIBUTE:
    return new_ComThoughtworksXstreamIoBinaryToken_Attribute_init();
    case ComThoughtworksXstreamIoBinaryToken_TYPE_END_NODE:
    return new_ComThoughtworksXstreamIoBinaryToken_EndNode_init();
    case ComThoughtworksXstreamIoBinaryToken_TYPE_VALUE:
    return new_ComThoughtworksXstreamIoBinaryToken_Value_init();
    default:
    @throw new_ComThoughtworksXstreamIoStreamException_initWithNSString_(@"Unknown token type");
  }
}

void ComThoughtworksXstreamIoBinaryToken_Formatter_init(ComThoughtworksXstreamIoBinaryToken_Formatter *self) {
  (void) NSObject_init(self);
}

ComThoughtworksXstreamIoBinaryToken_Formatter *new_ComThoughtworksXstreamIoBinaryToken_Formatter_init() {
  ComThoughtworksXstreamIoBinaryToken_Formatter *self = [ComThoughtworksXstreamIoBinaryToken_Formatter alloc];
  ComThoughtworksXstreamIoBinaryToken_Formatter_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamIoBinaryToken_Formatter)


#line 208
@implementation ComThoughtworksXstreamIoBinaryToken_MapIdToValue

- (instancetype)initWithLong:(jlong)id_
                withNSString:(NSString *)value {
  ComThoughtworksXstreamIoBinaryToken_MapIdToValue_initWithLong_withNSString_(self, id_, value);
  return self;
}

- (instancetype)init {
  ComThoughtworksXstreamIoBinaryToken_MapIdToValue_init(self);
  return self;
}


#line 220
- (void)writeToWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg
                           withByte:(jbyte)idType {
  [self writeIdWithJavaIoDataOutput:outArg withLong:id__ withByte:idType];
  [self writeStringWithJavaIoDataOutput:outArg withNSString:value_];
}


#line 225
- (void)readFromWithJavaIoDataInput:(id<JavaIoDataInput>)inArg
                           withByte:(jbyte)idType {
  id__ = [self readIdWithJavaIoDataInput:inArg withByte:idType];
  value_ = [self readStringWithJavaIoDataInput:inArg];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withNSString:", "MapIdToValue", NULL, 0x1, NULL, NULL },
    { "init", "MapIdToValue", NULL, 0x1, NULL, NULL },
    { "writeToWithJavaIoDataOutput:withByte:", "writeTo", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "readFromWithJavaIoDataInput:withByte:", "readFrom", "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoBinaryToken_MapIdToValue = { 2, "MapIdToValue", "com.thoughtworks.xstream.io.binary", "Token", 0x9, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamIoBinaryToken_MapIdToValue;
}

@end


#line 210
void ComThoughtworksXstreamIoBinaryToken_MapIdToValue_initWithLong_withNSString_(ComThoughtworksXstreamIoBinaryToken_MapIdToValue *self, jlong id_, NSString *value) {
  (void) ComThoughtworksXstreamIoBinaryToken_initWithByte_(self, ComThoughtworksXstreamIoBinaryToken_TYPE_MAP_ID_TO_VALUE);
  self->id__ = id_;
  self->value_ = value;
}


#line 210
ComThoughtworksXstreamIoBinaryToken_MapIdToValue *new_ComThoughtworksXstreamIoBinaryToken_MapIdToValue_initWithLong_withNSString_(jlong id_, NSString *value) {
  ComThoughtworksXstreamIoBinaryToken_MapIdToValue *self = [ComThoughtworksXstreamIoBinaryToken_MapIdToValue alloc];
  ComThoughtworksXstreamIoBinaryToken_MapIdToValue_initWithLong_withNSString_(self, id_, value);
  return self;
}

void ComThoughtworksXstreamIoBinaryToken_MapIdToValue_init(ComThoughtworksXstreamIoBinaryToken_MapIdToValue *self) {
  (void) ComThoughtworksXstreamIoBinaryToken_initWithByte_(self, ComThoughtworksXstreamIoBinaryToken_TYPE_MAP_ID_TO_VALUE);
}


#line 216
ComThoughtworksXstreamIoBinaryToken_MapIdToValue *new_ComThoughtworksXstreamIoBinaryToken_MapIdToValue_init() {
  ComThoughtworksXstreamIoBinaryToken_MapIdToValue *self = [ComThoughtworksXstreamIoBinaryToken_MapIdToValue alloc];
  ComThoughtworksXstreamIoBinaryToken_MapIdToValue_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamIoBinaryToken_MapIdToValue)


#line 232
@implementation ComThoughtworksXstreamIoBinaryToken_StartNode

- (instancetype)initWithLong:(jlong)id_ {
  ComThoughtworksXstreamIoBinaryToken_StartNode_initWithLong_(self, id_);
  return self;
}

- (instancetype)init {
  ComThoughtworksXstreamIoBinaryToken_StartNode_init(self);
  return self;
}


#line 243
- (void)writeToWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg
                           withByte:(jbyte)idType {
  [self writeIdWithJavaIoDataOutput:outArg withLong:id__ withByte:idType];
}


#line 247
- (void)readFromWithJavaIoDataInput:(id<JavaIoDataInput>)inArg
                           withByte:(jbyte)idType {
  id__ = [self readIdWithJavaIoDataInput:inArg withByte:idType];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:", "StartNode", NULL, 0x1, NULL, NULL },
    { "init", "StartNode", NULL, 0x1, NULL, NULL },
    { "writeToWithJavaIoDataOutput:withByte:", "writeTo", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "readFromWithJavaIoDataInput:withByte:", "readFrom", "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoBinaryToken_StartNode = { 2, "StartNode", "com.thoughtworks.xstream.io.binary", "Token", 0x9, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamIoBinaryToken_StartNode;
}

@end


#line 234
void ComThoughtworksXstreamIoBinaryToken_StartNode_initWithLong_(ComThoughtworksXstreamIoBinaryToken_StartNode *self, jlong id_) {
  (void) ComThoughtworksXstreamIoBinaryToken_initWithByte_(self, ComThoughtworksXstreamIoBinaryToken_TYPE_START_NODE);
  self->id__ = id_;
}


#line 234
ComThoughtworksXstreamIoBinaryToken_StartNode *new_ComThoughtworksXstreamIoBinaryToken_StartNode_initWithLong_(jlong id_) {
  ComThoughtworksXstreamIoBinaryToken_StartNode *self = [ComThoughtworksXstreamIoBinaryToken_StartNode alloc];
  ComThoughtworksXstreamIoBinaryToken_StartNode_initWithLong_(self, id_);
  return self;
}


#line 239
void ComThoughtworksXstreamIoBinaryToken_StartNode_init(ComThoughtworksXstreamIoBinaryToken_StartNode *self) {
  (void) ComThoughtworksXstreamIoBinaryToken_initWithByte_(self, ComThoughtworksXstreamIoBinaryToken_TYPE_START_NODE);
}


#line 239
ComThoughtworksXstreamIoBinaryToken_StartNode *new_ComThoughtworksXstreamIoBinaryToken_StartNode_init() {
  ComThoughtworksXstreamIoBinaryToken_StartNode *self = [ComThoughtworksXstreamIoBinaryToken_StartNode alloc];
  ComThoughtworksXstreamIoBinaryToken_StartNode_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamIoBinaryToken_StartNode)


#line 253
@implementation ComThoughtworksXstreamIoBinaryToken_EndNode

- (instancetype)init {
  ComThoughtworksXstreamIoBinaryToken_EndNode_init(self);
  return self;
}


#line 259
- (void)writeToWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg
                           withByte:(jbyte)idType {
}


#line 262
- (void)readFromWithJavaIoDataInput:(id<JavaIoDataInput>)inArg
                           withByte:(jbyte)idType {
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "EndNode", NULL, 0x1, NULL, NULL },
    { "writeToWithJavaIoDataOutput:withByte:", "writeTo", "V", 0x1, NULL, NULL },
    { "readFromWithJavaIoDataInput:withByte:", "readFrom", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoBinaryToken_EndNode = { 2, "EndNode", "com.thoughtworks.xstream.io.binary", "Token", 0x9, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamIoBinaryToken_EndNode;
}

@end


#line 255
void ComThoughtworksXstreamIoBinaryToken_EndNode_init(ComThoughtworksXstreamIoBinaryToken_EndNode *self) {
  (void) ComThoughtworksXstreamIoBinaryToken_initWithByte_(self, ComThoughtworksXstreamIoBinaryToken_TYPE_END_NODE);
}


#line 255
ComThoughtworksXstreamIoBinaryToken_EndNode *new_ComThoughtworksXstreamIoBinaryToken_EndNode_init() {
  ComThoughtworksXstreamIoBinaryToken_EndNode *self = [ComThoughtworksXstreamIoBinaryToken_EndNode alloc];
  ComThoughtworksXstreamIoBinaryToken_EndNode_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamIoBinaryToken_EndNode)


#line 267
@implementation ComThoughtworksXstreamIoBinaryToken_Attribute

- (instancetype)initWithLong:(jlong)id_
                withNSString:(NSString *)value {
  ComThoughtworksXstreamIoBinaryToken_Attribute_initWithLong_withNSString_(self, id_, value);
  return self;
}

- (instancetype)init {
  ComThoughtworksXstreamIoBinaryToken_Attribute_init(self);
  return self;
}


#line 279
- (void)writeToWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg
                           withByte:(jbyte)idType {
  [self writeIdWithJavaIoDataOutput:outArg withLong:id__ withByte:idType];
  [self writeStringWithJavaIoDataOutput:outArg withNSString:value_];
}


#line 284
- (void)readFromWithJavaIoDataInput:(id<JavaIoDataInput>)inArg
                           withByte:(jbyte)idType {
  self->id__ = [self readIdWithJavaIoDataInput:inArg withByte:idType];
  self->value_ = [self readStringWithJavaIoDataInput:inArg];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withNSString:", "Attribute", NULL, 0x1, NULL, NULL },
    { "init", "Attribute", NULL, 0x1, NULL, NULL },
    { "writeToWithJavaIoDataOutput:withByte:", "writeTo", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "readFromWithJavaIoDataInput:withByte:", "readFrom", "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoBinaryToken_Attribute = { 2, "Attribute", "com.thoughtworks.xstream.io.binary", "Token", 0x9, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamIoBinaryToken_Attribute;
}

@end


#line 269
void ComThoughtworksXstreamIoBinaryToken_Attribute_initWithLong_withNSString_(ComThoughtworksXstreamIoBinaryToken_Attribute *self, jlong id_, NSString *value) {
  (void) ComThoughtworksXstreamIoBinaryToken_initWithByte_(self, ComThoughtworksXstreamIoBinaryToken_TYPE_ATTRIBUTE);
  self->id__ = id_;
  self->value_ = value;
}


#line 269
ComThoughtworksXstreamIoBinaryToken_Attribute *new_ComThoughtworksXstreamIoBinaryToken_Attribute_initWithLong_withNSString_(jlong id_, NSString *value) {
  ComThoughtworksXstreamIoBinaryToken_Attribute *self = [ComThoughtworksXstreamIoBinaryToken_Attribute alloc];
  ComThoughtworksXstreamIoBinaryToken_Attribute_initWithLong_withNSString_(self, id_, value);
  return self;
}

void ComThoughtworksXstreamIoBinaryToken_Attribute_init(ComThoughtworksXstreamIoBinaryToken_Attribute *self) {
  (void) ComThoughtworksXstreamIoBinaryToken_initWithByte_(self, ComThoughtworksXstreamIoBinaryToken_TYPE_ATTRIBUTE);
}


#line 275
ComThoughtworksXstreamIoBinaryToken_Attribute *new_ComThoughtworksXstreamIoBinaryToken_Attribute_init() {
  ComThoughtworksXstreamIoBinaryToken_Attribute *self = [ComThoughtworksXstreamIoBinaryToken_Attribute alloc];
  ComThoughtworksXstreamIoBinaryToken_Attribute_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamIoBinaryToken_Attribute)


#line 291
@implementation ComThoughtworksXstreamIoBinaryToken_Value

- (instancetype)initWithNSString:(NSString *)value {
  ComThoughtworksXstreamIoBinaryToken_Value_initWithNSString_(self, value);
  return self;
}

- (instancetype)init {
  ComThoughtworksXstreamIoBinaryToken_Value_init(self);
  return self;
}


#line 302
- (void)writeToWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg
                           withByte:(jbyte)idType {
  [self writeStringWithJavaIoDataOutput:outArg withNSString:value_];
}


#line 306
- (void)readFromWithJavaIoDataInput:(id<JavaIoDataInput>)inArg
                           withByte:(jbyte)idType {
  value_ = [self readStringWithJavaIoDataInput:inArg];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "Value", NULL, 0x1, NULL, NULL },
    { "init", "Value", NULL, 0x1, NULL, NULL },
    { "writeToWithJavaIoDataOutput:withByte:", "writeTo", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "readFromWithJavaIoDataInput:withByte:", "readFrom", "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoBinaryToken_Value = { 2, "Value", "com.thoughtworks.xstream.io.binary", "Token", 0x9, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamIoBinaryToken_Value;
}

@end


#line 293
void ComThoughtworksXstreamIoBinaryToken_Value_initWithNSString_(ComThoughtworksXstreamIoBinaryToken_Value *self, NSString *value) {
  (void) ComThoughtworksXstreamIoBinaryToken_initWithByte_(self, ComThoughtworksXstreamIoBinaryToken_TYPE_VALUE);
  self->value_ = value;
}


#line 293
ComThoughtworksXstreamIoBinaryToken_Value *new_ComThoughtworksXstreamIoBinaryToken_Value_initWithNSString_(NSString *value) {
  ComThoughtworksXstreamIoBinaryToken_Value *self = [ComThoughtworksXstreamIoBinaryToken_Value alloc];
  ComThoughtworksXstreamIoBinaryToken_Value_initWithNSString_(self, value);
  return self;
}


#line 298
void ComThoughtworksXstreamIoBinaryToken_Value_init(ComThoughtworksXstreamIoBinaryToken_Value *self) {
  (void) ComThoughtworksXstreamIoBinaryToken_initWithByte_(self, ComThoughtworksXstreamIoBinaryToken_TYPE_VALUE);
}


#line 298
ComThoughtworksXstreamIoBinaryToken_Value *new_ComThoughtworksXstreamIoBinaryToken_Value_init() {
  ComThoughtworksXstreamIoBinaryToken_Value *self = [ComThoughtworksXstreamIoBinaryToken_Value alloc];
  ComThoughtworksXstreamIoBinaryToken_Value_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamIoBinaryToken_Value)
