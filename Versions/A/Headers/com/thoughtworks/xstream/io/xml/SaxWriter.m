//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/io/xml/SaxWriter.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/io/xml/SaxWriter.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/thoughtworks/xstream/XStream.h"
#include "com/thoughtworks/xstream/io/StreamException.h"
#include "com/thoughtworks/xstream/io/naming/NameCoder.h"
#include "com/thoughtworks/xstream/io/xml/AbstractXmlWriter.h"
#include "com/thoughtworks/xstream/io/xml/SaxWriter.h"
#include "com/thoughtworks/xstream/io/xml/XmlFriendlyNameCoder.h"
#include "com/thoughtworks/xstream/io/xml/XmlFriendlyReplacer.h"
#include "java/lang/Boolean.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/xml/sax/ContentHandler.h"
#include "org/xml/sax/DTDHandler.h"
#include "org/xml/sax/EntityResolver.h"
#include "org/xml/sax/ErrorHandler.h"
#include "org/xml/sax/InputSource.h"
#include "org/xml/sax/SAXException.h"
#include "org/xml/sax/SAXNotRecognizedException.h"
#include "org/xml/sax/SAXNotSupportedException.h"
#include "org/xml/sax/helpers/AttributesImpl.h"


#line 62
@implementation ComThoughtworksXstreamIoXmlSaxWriter

NSString * ComThoughtworksXstreamIoXmlSaxWriter_CONFIGURED_XSTREAM_PROPERTY_ = 
#line 70
@"http://com.thoughtworks.xstream/sax/property/configured-xstream";
NSString * ComThoughtworksXstreamIoXmlSaxWriter_SOURCE_OBJECT_LIST_PROPERTY_ = 
#line 81
@"http://com.thoughtworks.xstream/sax/property/source-object-list";


#line 127
- (instancetype)initWithComThoughtworksXstreamIoNamingNameCoder:(id<ComThoughtworksXstreamIoNamingNameCoder>)nameCoder {
  return
#line 129
  [self initComThoughtworksXstreamIoXmlSaxWriterWithBoolean:YES withComThoughtworksXstreamIoNamingNameCoder:nameCoder];
}


#line 135
- (instancetype)initComThoughtworksXstreamIoXmlSaxWriterWithBoolean:(jboolean)includeEnclosingDocument
                        withComThoughtworksXstreamIoNamingNameCoder:(id<ComThoughtworksXstreamIoNamingNameCoder>)nameCoder {
  if (self =
#line 137
  [super initWithComThoughtworksXstreamIoNamingNameCoder:nameCoder]) {
    entityResolver_ =
#line 90
    nil;
    dtdHandler_ =
#line 95
    nil;
    contentHandler_ =
#line 100
    nil;
    errorHandler_ =
#line 105
    nil;
    features_ =
#line 115
    [[JavaUtilHashMap alloc] init];
    properties_ =
#line 120
    [[JavaUtilHashMap alloc] init];
    depth_ =
#line 601
    0;
    elementStack_ =
#line 602
    [[JavaUtilLinkedList alloc] init];
    buffer_ = [IOSCharArray arrayWithLength:
#line 603
    128];
    startTagInProgress_ =
#line 604
    NO;
    attributeList_ =
#line 605
    [[OrgXmlSaxHelpersAttributesImpl alloc] init];
    
#line 138
    self->includeEnclosingDocument_ = includeEnclosingDocument;
  }
  return self;
}

- (instancetype)initWithBoolean:(jboolean)includeEnclosingDocument
withComThoughtworksXstreamIoNamingNameCoder:(id<ComThoughtworksXstreamIoNamingNameCoder>)nameCoder {
  return [self initComThoughtworksXstreamIoXmlSaxWriterWithBoolean:
#line 135
includeEnclosingDocument withComThoughtworksXstreamIoNamingNameCoder:nameCoder];
}


#line 144
- (instancetype)initWithComThoughtworksXstreamIoXmlXmlFriendlyReplacer:(ComThoughtworksXstreamIoXmlXmlFriendlyReplacer *)replacer {
  return
#line 146
  [self initComThoughtworksXstreamIoXmlSaxWriterWithBoolean:YES withComThoughtworksXstreamIoXmlXmlFriendlyReplacer:replacer];
}


#line 152
- (instancetype)initComThoughtworksXstreamIoXmlSaxWriterWithBoolean:(jboolean)includeEnclosingDocument
                 withComThoughtworksXstreamIoXmlXmlFriendlyReplacer:(ComThoughtworksXstreamIoXmlXmlFriendlyReplacer *)replacer {
  return
#line 154
  [self initComThoughtworksXstreamIoXmlSaxWriterWithBoolean:includeEnclosingDocument withComThoughtworksXstreamIoNamingNameCoder:(id<ComThoughtworksXstreamIoNamingNameCoder>) check_protocol_cast(replacer, @protocol(ComThoughtworksXstreamIoNamingNameCoder))];
}

- (instancetype)initWithBoolean:(jboolean)includeEnclosingDocument
withComThoughtworksXstreamIoXmlXmlFriendlyReplacer:(ComThoughtworksXstreamIoXmlXmlFriendlyReplacer *)replacer {
  return [self initComThoughtworksXstreamIoXmlSaxWriterWithBoolean:
#line 152
includeEnclosingDocument withComThoughtworksXstreamIoXmlXmlFriendlyReplacer:replacer];
}


#line 157
- (instancetype)initComThoughtworksXstreamIoXmlSaxWriterWithBoolean:(jboolean)includeEnclosingDocument {
  return
#line 158
  [self initComThoughtworksXstreamIoXmlSaxWriterWithBoolean:includeEnclosingDocument withComThoughtworksXstreamIoNamingNameCoder:[[ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder alloc] init]];
}

- (instancetype)initWithBoolean:(jboolean)includeEnclosingDocument {
  return [self initComThoughtworksXstreamIoXmlSaxWriterWithBoolean:
#line 157
includeEnclosingDocument];
}


#line 161
- (instancetype)init {
  return
#line 162
  [self initComThoughtworksXstreamIoXmlSaxWriterWithBoolean:YES];
}


#line 193
- (void)setFeatureWithNSString:(NSString *)name
                   withBoolean:(jboolean)value {
  
#line 195
  if (([((NSString *) nil_chk(name)) isEqual:@"http://xml.org/sax/features/namespaces"]) ||
#line 196
  ([name isEqual:@"http://xml.org/sax/features/namespace-prefixes"])) {
    (void) [((id<JavaUtilMap>) nil_chk(self->features_)) putWithId:name withId:value ? JavaLangBoolean_get_TRUE__() : JavaLangBoolean_get_FALSE__()];
  }
  else {
    
#line 199
    @throw [[OrgXmlSaxSAXNotRecognizedException alloc] initWithNSString:name];
  }
}


#line 230
- (jboolean)getFeatureWithNSString:(NSString *)name {
  
#line 232
  if (([((NSString *) nil_chk(name)) isEqual:@"http://xml.org/sax/features/namespaces"]) ||
#line 233
  ([name isEqual:@"http://xml.org/sax/features/namespace-prefixes"])) {
    JavaLangBoolean *value = (JavaLangBoolean *) check_class_cast(([((id<JavaUtilMap>) nil_chk(self->features_)) getWithId:name]), [JavaLangBoolean class]);
    
#line 236
    if (value == nil) {
      value = JavaLangBoolean_get_FALSE__();
    }
    return [((JavaLangBoolean *) nil_chk(value)) booleanValue];
  }
  else {
    
#line 241
    @throw [[OrgXmlSaxSAXNotRecognizedException alloc] initWithNSString:name];
  }
}


#line 276
- (void)setPropertyWithNSString:(NSString *)name
                         withId:(id)value {
  
#line 279
  if ([((NSString *) nil_chk(name)) isEqual:ComThoughtworksXstreamIoXmlSaxWriter_CONFIGURED_XSTREAM_PROPERTY_]) {
    if (!([value isKindOfClass:[ComThoughtworksXstreamXStream class]])) {
      @throw [[OrgXmlSaxSAXNotSupportedException alloc] initWithNSString:JreStrcat("$$$", @"Value for property \"",
#line 282
      ComThoughtworksXstreamIoXmlSaxWriter_CONFIGURED_XSTREAM_PROPERTY_, @"\" must be a non-null XStream object")];
    }
  }
  else if ([name isEqual:ComThoughtworksXstreamIoXmlSaxWriter_SOURCE_OBJECT_LIST_PROPERTY_]) {
    if ([value conformsToProtocol: @protocol(JavaUtilList)]) {
      id<JavaUtilList> list = (id<JavaUtilList>) check_protocol_cast(value, @protocol(JavaUtilList));
      
#line 289
      if ([((id<JavaUtilList>) nil_chk(list)) isEmpty]) {
        @throw [[OrgXmlSaxSAXNotSupportedException alloc] initWithNSString:JreStrcat("$$$", @"Value for property \"",
#line 291
        ComThoughtworksXstreamIoXmlSaxWriter_SOURCE_OBJECT_LIST_PROPERTY_, @"\" shall not be an empty list")];
      }
      else {
        
#line 296
        value = [JavaUtilCollections unmodifiableListWithJavaUtilList:[[JavaUtilArrayList alloc] initWithJavaUtilCollection:list]];
      }
    }
    else {
      
#line 299
      @throw [[OrgXmlSaxSAXNotSupportedException alloc] initWithNSString:JreStrcat("$$$", @"Value for property \"",
#line 300
      ComThoughtworksXstreamIoXmlSaxWriter_SOURCE_OBJECT_LIST_PROPERTY_, @"\" must be a non-null List object")];
    }
  }
  else {
    @throw [[OrgXmlSaxSAXNotRecognizedException alloc] initWithNSString:name];
  }
  (void) [((id<JavaUtilMap>) nil_chk(self->properties_)) putWithId:name withId:value];
}


#line 332
- (id)getPropertyWithNSString:(NSString *)name {
  
#line 334
  if (([((NSString *) nil_chk(name)) isEqual:ComThoughtworksXstreamIoXmlSaxWriter_CONFIGURED_XSTREAM_PROPERTY_]) ||
#line 335
  ([name isEqual:ComThoughtworksXstreamIoXmlSaxWriter_SOURCE_OBJECT_LIST_PROPERTY_])) {
    return [((id<JavaUtilMap>) nil_chk(self->properties_)) getWithId:name];
  }
  else {
    
#line 338
    @throw [[OrgXmlSaxSAXNotRecognizedException alloc] initWithNSString:name];
  }
}


#line 361
- (void)setEntityResolverWithOrgXmlSaxEntityResolver:(id<OrgXmlSaxEntityResolver>)resolver {
  
#line 362
  if (resolver == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"resolver"];
  }
  self->entityResolver_ = resolver;
  return;
}


#line 376
- (id<OrgXmlSaxEntityResolver>)getEntityResolver {
  
#line 377
  return self->entityResolver_;
}


#line 395
- (void)setDTDHandlerWithOrgXmlSaxDTDHandler:(id<OrgXmlSaxDTDHandler>)handler {
  
#line 396
  if (handler == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"handler"];
  }
  self->dtdHandler_ = handler;
  return;
}


#line 410
- (id<OrgXmlSaxDTDHandler>)getDTDHandler {
  
#line 411
  return self->dtdHandler_;
}


#line 430
- (void)setContentHandlerWithOrgXmlSaxContentHandler:(id<OrgXmlSaxContentHandler>)handler {
  
#line 431
  if (handler == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"handler"];
  }
  self->contentHandler_ = handler;
  return;
}


#line 445
- (id<OrgXmlSaxContentHandler>)getContentHandler {
  
#line 446
  return self->contentHandler_;
}


#line 467
- (void)setErrorHandlerWithOrgXmlSaxErrorHandler:(id<OrgXmlSaxErrorHandler>)handler {
  
#line 468
  if (handler == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"handler"];
  }
  self->errorHandler_ = handler;
  return;
}


#line 482
- (id<OrgXmlSaxErrorHandler>)getErrorHandler {
  
#line 483
  return self->errorHandler_;
}


#line 516
- (void)parseWithNSString:(NSString *)systemId {
  
#line 517
  [self parse];
}


#line 558
- (void)parseWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)input {
  
#line 559
  [self parse];
}


#line 569
- (void)parse {
  
#line 570
  ComThoughtworksXstreamXStream *xstream = (ComThoughtworksXstreamXStream *) check_class_cast(([((id<JavaUtilMap>) nil_chk(self->properties_)) getWithId:ComThoughtworksXstreamIoXmlSaxWriter_CONFIGURED_XSTREAM_PROPERTY_]), [ComThoughtworksXstreamXStream class]);
  if (xstream == nil) {
    xstream = [[ComThoughtworksXstreamXStream alloc] init];
  }
  
#line 575
  id<JavaUtilList> source = (id<JavaUtilList>) check_protocol_cast(([self->properties_ getWithId:ComThoughtworksXstreamIoXmlSaxWriter_SOURCE_OBJECT_LIST_PROPERTY_]), @protocol(JavaUtilList));
  if ((source == nil) || ([source isEmpty])) {
    @throw [[OrgXmlSaxSAXException alloc] initWithNSString:JreStrcat("$$$", @"Missing or empty source object list. Setting property \"",
#line 578
    ComThoughtworksXstreamIoXmlSaxWriter_SOURCE_OBJECT_LIST_PROPERTY_, @"\" is mandatory")];
  }
  
#line 581
  @try {
    [self startDocumentWithBoolean:YES];
    for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(source)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
      [((ComThoughtworksXstreamXStream *) nil_chk(xstream)) marshalWithId:[i next] withComThoughtworksXstreamIoHierarchicalStreamWriter:self];
    }
    [self endDocumentWithBoolean:YES];
  }
  @catch (
#line 587
  ComThoughtworksXstreamIoStreamException *e) {
    if ([[((ComThoughtworksXstreamIoStreamException *) nil_chk(e)) getCause] isKindOfClass:[OrgXmlSaxSAXException class]]) {
      @throw (OrgXmlSaxSAXException *) check_class_cast(([e getCause]), [OrgXmlSaxSAXException class]);
    }
    else {
      
#line 591
      @throw [[OrgXmlSaxSAXException alloc] initWithJavaLangException:e];
    }
  }
}

- (void)startNodeWithNSString:(NSString *)name {
  
#line 608
  @try {
    if (self->depth_ != 0) {
      [self flushStartTag];
    }
    else
#line 611
    if (includeEnclosingDocument_) {
      [self startDocumentWithBoolean:NO];
    }
    [((id<JavaUtilList>) nil_chk(self->elementStack_)) addWithInt:0 withId:[self escapeXmlNameWithNSString:name]];
    
#line 616
    self->startTagInProgress_ = YES;
    self->depth_++;
  }
  @catch (
#line 618
  OrgXmlSaxSAXException *e) {
    @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithJavaLangThrowable:e];
  }
}


#line 623
- (void)addAttributeWithNSString:(NSString *)name
                    withNSString:(NSString *)value {
  
#line 624
  if (self->startTagInProgress_) {
    NSString *escapedName = [self escapeXmlNameWithNSString:name];
    [((OrgXmlSaxHelpersAttributesImpl *) nil_chk(self->attributeList_)) addAttributeWithNSString:@"" withNSString:escapedName withNSString:escapedName withNSString:@"CDATA" withNSString:value];
  }
  else {
    
#line 628
    @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithJavaLangThrowable:[[JavaLangIllegalStateException alloc] initWithNSString:@"No startElement being processed"]];
  }
}


#line 632
- (void)setValueWithNSString:(NSString *)text {
  
#line 633
  @try {
    [self flushStartTag];
    
#line 636
    jint lg = ((jint) [((NSString *) nil_chk(text)) length]);
    if (lg > ((IOSCharArray *) nil_chk(buffer_))->size_) {
      buffer_ = [IOSCharArray arrayWithLength:lg];
    }
    [text getChars:0 sourceEnd:lg destination:buffer_ destinationBegin:0];
    
#line 642
    [((id<OrgXmlSaxContentHandler>) nil_chk(self->contentHandler_)) charactersWithCharArray:buffer_ withInt:0 withInt:lg];
  }
  @catch (
#line 643
  OrgXmlSaxSAXException *e) {
    @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithJavaLangThrowable:e];
  }
}


#line 648
- (void)endNode {
  
#line 649
  @try {
    [self flushStartTag];
    
#line 652
    NSString *tagName = (NSString *) check_class_cast(([((id<JavaUtilList>) nil_chk(self->elementStack_)) removeWithInt:0]), [NSString class]);
    
#line 654
    [((id<OrgXmlSaxContentHandler>) nil_chk(self->contentHandler_)) endElementWithNSString:@"" withNSString:tagName withNSString:tagName];
    
#line 656
    self->depth_--;
    if (self->depth_ == 0 && includeEnclosingDocument_) {
      [self endDocumentWithBoolean:NO];
    }
  }
  @catch (
#line 660
  OrgXmlSaxSAXException *e) {
    @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithJavaLangThrowable:e];
  }
}


#line 674
- (void)startDocumentWithBoolean:(jboolean)multiObjectMode {
  
#line 675
  if (self->depth_ == 0) {
    
#line 677
    [((id<OrgXmlSaxContentHandler>) nil_chk(self->contentHandler_)) startDocument];
    
#line 679
    if (multiObjectMode) {
      
#line 682
      self->depth_++;
    }
  }
}


#line 696
- (void)endDocumentWithBoolean:(jboolean)multiObjectMode {
  
#line 697
  if ((self->depth_ == 0) || ((self->depth_ == 1) && (multiObjectMode))) {
    [((id<OrgXmlSaxContentHandler>) nil_chk(self->contentHandler_)) endDocument];
    self->depth_ = 0;
  }
}


#line 709
- (void)flushStartTag {
  
#line 710
  if (self->startTagInProgress_) {
    NSString *tagName = (NSString *) check_class_cast(([((id<JavaUtilList>) nil_chk(self->elementStack_)) getWithInt:0]), [NSString class]);
    
#line 713
    [((id<OrgXmlSaxContentHandler>) nil_chk(self->contentHandler_)) startElementWithNSString:@"" withNSString:tagName withNSString:
#line 714
    tagName withOrgXmlSaxAttributes:self->attributeList_];
    [((OrgXmlSaxHelpersAttributesImpl *) nil_chk(self->attributeList_)) clear];
    self->startTagInProgress_ = NO;
  }
}


#line 720
- (void)flush {
}


#line 724
- (void)close {
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamIoXmlSaxWriter *)other {
  [super copyAllFieldsTo:other];
  other->attributeList_ = attributeList_;
  other->buffer_ = buffer_;
  other->contentHandler_ = contentHandler_;
  other->depth_ = depth_;
  other->dtdHandler_ = dtdHandler_;
  other->elementStack_ = elementStack_;
  other->entityResolver_ = entityResolver_;
  other->errorHandler_ = errorHandler_;
  other->features_ = features_;
  other->includeEnclosingDocument_ = includeEnclosingDocument_;
  other->properties_ = properties_;
  other->startTagInProgress_ = startTagInProgress_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamIoNamingNameCoder:", "SaxWriter", NULL, 0x1, NULL },
    { "initWithBoolean:withComThoughtworksXstreamIoNamingNameCoder:", "SaxWriter", NULL, 0x1, NULL },
    { "initWithComThoughtworksXstreamIoXmlXmlFriendlyReplacer:", "SaxWriter", NULL, 0x1, NULL },
    { "initWithBoolean:withComThoughtworksXstreamIoXmlXmlFriendlyReplacer:", "SaxWriter", NULL, 0x1, NULL },
    { "initWithBoolean:", "SaxWriter", NULL, 0x1, NULL },
    { "init", "SaxWriter", NULL, 0x1, NULL },
    { "setFeatureWithNSString:withBoolean:", "setFeature", "V", 0x1, "Lorg.xml.sax.SAXNotRecognizedException;" },
    { "getFeatureWithNSString:", "getFeature", "Z", 0x1, "Lorg.xml.sax.SAXNotRecognizedException;" },
    { "setPropertyWithNSString:withId:", "setProperty", "V", 0x1, "Lorg.xml.sax.SAXNotRecognizedException;Lorg.xml.sax.SAXNotSupportedException;" },
    { "getPropertyWithNSString:", "getProperty", "Ljava.lang.Object;", 0x1, "Lorg.xml.sax.SAXNotRecognizedException;" },
    { "setEntityResolverWithOrgXmlSaxEntityResolver:", "setEntityResolver", "V", 0x1, NULL },
    { "getEntityResolver", NULL, "Lorg.xml.sax.EntityResolver;", 0x1, NULL },
    { "setDTDHandlerWithOrgXmlSaxDTDHandler:", "setDTDHandler", "V", 0x1, NULL },
    { "getDTDHandler", NULL, "Lorg.xml.sax.DTDHandler;", 0x1, NULL },
    { "setContentHandlerWithOrgXmlSaxContentHandler:", "setContentHandler", "V", 0x1, NULL },
    { "getContentHandler", NULL, "Lorg.xml.sax.ContentHandler;", 0x1, NULL },
    { "setErrorHandlerWithOrgXmlSaxErrorHandler:", "setErrorHandler", "V", 0x1, NULL },
    { "getErrorHandler", NULL, "Lorg.xml.sax.ErrorHandler;", 0x1, NULL },
    { "parseWithNSString:", "parse", "V", 0x1, "Lorg.xml.sax.SAXException;" },
    { "parseWithOrgXmlSaxInputSource:", "parse", "V", 0x1, "Lorg.xml.sax.SAXException;" },
    { "parse", NULL, "V", 0x2, "Lorg.xml.sax.SAXException;" },
    { "startNodeWithNSString:", "startNode", "V", 0x1, NULL },
    { "addAttributeWithNSString:withNSString:", "addAttribute", "V", 0x1, NULL },
    { "setValueWithNSString:", "setValue", "V", 0x1, NULL },
    { "endNode", NULL, "V", 0x1, NULL },
    { "startDocumentWithBoolean:", "startDocument", "V", 0x2, "Lorg.xml.sax.SAXException;" },
    { "endDocumentWithBoolean:", "endDocument", "V", 0x2, "Lorg.xml.sax.SAXException;" },
    { "flushStartTag", NULL, "V", 0x2, "Lorg.xml.sax.SAXException;" },
    { "flush", NULL, "V", 0x1, NULL },
    { "close", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "CONFIGURED_XSTREAM_PROPERTY_", NULL, 0x19, "Ljava.lang.String;", &ComThoughtworksXstreamIoXmlSaxWriter_CONFIGURED_XSTREAM_PROPERTY_,  },
    { "SOURCE_OBJECT_LIST_PROPERTY_", NULL, 0x19, "Ljava.lang.String;", &ComThoughtworksXstreamIoXmlSaxWriter_SOURCE_OBJECT_LIST_PROPERTY_,  },
    { "entityResolver_", NULL, 0x2, "Lorg.xml.sax.EntityResolver;", NULL,  },
    { "dtdHandler_", NULL, 0x2, "Lorg.xml.sax.DTDHandler;", NULL,  },
    { "contentHandler_", NULL, 0x2, "Lorg.xml.sax.ContentHandler;", NULL,  },
    { "errorHandler_", NULL, 0x2, "Lorg.xml.sax.ErrorHandler;", NULL,  },
    { "features_", NULL, 0x2, "Ljava.util.Map;", NULL,  },
    { "properties_", NULL, 0x12, "Ljava.util.Map;", NULL,  },
    { "includeEnclosingDocument_", NULL, 0x12, "Z", NULL,  },
    { "depth_", NULL, 0x2, "I", NULL,  },
    { "elementStack_", NULL, 0x2, "Ljava.util.List;", NULL,  },
    { "buffer_", NULL, 0x2, "[C", NULL,  },
    { "startTagInProgress_", NULL, 0x2, "Z", NULL,  },
    { "attributeList_", NULL, 0x12, "Lorg.xml.sax.helpers.AttributesImpl;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoXmlSaxWriter = { "SaxWriter", "com.thoughtworks.xstream.io.xml", NULL, 0x11, 30, methods, 14, fields, 0, NULL};
  return &_ComThoughtworksXstreamIoXmlSaxWriter;
}

@end
