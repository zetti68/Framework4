//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/io/xml/XmlFriendlyNameCoder.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/io/xml/XmlFriendlyNameCoder.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/thoughtworks/xstream/converters/reflection/ObjectAccessException.h"
#include "com/thoughtworks/xstream/io/xml/XmlFriendlyNameCoder.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

BOOL ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_initialized = NO;


#line 48
@implementation ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder

IOSObjectArray * ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_XML_NAME_START_CHAR_BOUNDS_;
IOSObjectArray * ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_XML_NAME_CHAR_EXTRA_BOUNDS_;


#line 107
- (instancetype)init {
  return
#line 108
  [self initComThoughtworksXstreamIoXmlXmlFriendlyNameCoderWithNSString:@"_-" withNSString:@"__"];
}


#line 119
- (instancetype)initComThoughtworksXstreamIoXmlXmlFriendlyNameCoderWithNSString:(NSString *)dollarReplacement
                                                                   withNSString:(NSString *)escapeCharReplacement {
  return
#line 120
  [self initComThoughtworksXstreamIoXmlXmlFriendlyNameCoderWithNSString:dollarReplacement withNSString:escapeCharReplacement withNSString:@"_."];
}

- (instancetype)initWithNSString:(NSString *)dollarReplacement
                    withNSString:(NSString *)escapeCharReplacement {
  return [self initComThoughtworksXstreamIoXmlXmlFriendlyNameCoderWithNSString:
#line 119
dollarReplacement withNSString:escapeCharReplacement];
}


#line 132
- (instancetype)initComThoughtworksXstreamIoXmlXmlFriendlyNameCoderWithNSString:(NSString *)dollarReplacement
                                                                   withNSString:(NSString *)escapeCharReplacement
                                                                   withNSString:(NSString *)hexPrefix {
  if (self = [super init]) {
    
#line 134
    self->dollarReplacement_ = dollarReplacement;
    
#line 135
    self->escapeCharReplacement_ = escapeCharReplacement;
    
#line 136
    self->hexPrefix_ = hexPrefix;
    
#line 137
    (void) [self readResolve];
  }
  return self;
}

- (instancetype)initWithNSString:(NSString *)dollarReplacement
                    withNSString:(NSString *)escapeCharReplacement
                    withNSString:(NSString *)hexPrefix {
  return [self initComThoughtworksXstreamIoXmlXmlFriendlyNameCoderWithNSString:
#line 133
dollarReplacement withNSString:escapeCharReplacement withNSString:hexPrefix];
}


#line 143
- (NSString *)decodeAttributeWithNSString:(NSString *)attributeName {
  
#line 144
  return [self decodeNameWithNSString:attributeName];
}


#line 150
- (NSString *)decodeNodeWithNSString:(NSString *)elementName {
  
#line 151
  return [self decodeNameWithNSString:elementName];
}


#line 157
- (NSString *)encodeAttributeWithNSString:(NSString *)name {
  
#line 158
  return [self encodeNameWithNSString:name];
}


#line 164
- (NSString *)encodeNodeWithNSString:(NSString *)name {
  
#line 165
  return [self encodeNameWithNSString:name];
}


#line 168
- (NSString *)encodeNameWithNSString:(NSString *)name {
  
#line 169
  NSString *s = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(escapeCache_)) getWithId:name], [NSString class]);
  if (s == nil) {
    jint length = ((jint) [((NSString *) nil_chk(name)) length]);
    
#line 174
    jint i = 0;
    
#line 176
    for (; i < length; i++) {
      jchar c = [name charAtWithInt:i];
      if (c == '$' || c == '_' || c <= 27 || c >= 127) {
        break;
      }
    }
    
#line 183
    if (i == length) {
      return name;
    }
    
#line 188
    JavaLangStringBuffer *result = [[JavaLangStringBuffer alloc] initWithInt:length + 8];
    
#line 191
    if (i > 0) {
      (void) [result appendWithNSString:[name substring:0 endIndex:i]];
    }
    
#line 195
    for (; i < length; i++) {
      jchar c = [name charAtWithInt:i];
      if (c == '$') {
        (void) [result appendWithNSString:dollarReplacement_];
      }
      else
#line 199
      if (c == '_') {
        (void) [result appendWithNSString:escapeCharReplacement_];
      }
      else
#line 201
      if ((i == 0 && ![ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder isXmlNameStartCharWithInt:c]) || (i > 0 && ![ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder isXmlNameCharWithInt:c])) {
        (void) [result appendWithNSString:hexPrefix_];
        if (c < 16) (void) [result appendWithNSString:@"000"];
        else if (c < 256) (void) [result appendWithNSString:@"00"];
        else if (c < 4096) (void) [result appendWithNSString:@"0"];
        (void) [result appendWithNSString:[JavaLangInteger toHexStringWithInt:c]];
      }
      else {
        
#line 208
        (void) [result appendWithChar:c];
      }
    }
    s = [result description];
    (void) [escapeCache_ putWithId:name withId:s];
  }
  return s;
}


#line 217
- (NSString *)decodeNameWithNSString:(NSString *)name {
  
#line 218
  NSString *s = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(unescapeCache_)) getWithId:name], [NSString class]);
  if (s == nil) {
    jchar dollarReplacementFirstChar = [((NSString *) nil_chk(dollarReplacement_)) charAtWithInt:0];
    jchar escapeReplacementFirstChar = [((NSString *) nil_chk(escapeCharReplacement_)) charAtWithInt:0];
    jchar hexPrefixFirstChar = [((NSString *) nil_chk(hexPrefix_)) charAtWithInt:0];
    jint length = ((jint) [((NSString *) nil_chk(name)) length]);
    
#line 226
    jint i = 0;
    
#line 228
    for (; i < length; i++) {
      jchar c = [name charAtWithInt:i];
      
#line 231
      if (c == dollarReplacementFirstChar ||
#line 232
      c == escapeReplacementFirstChar ||
#line 233
      c == hexPrefixFirstChar) {
        
#line 235
        break;
      }
    }
    
#line 239
    if (i == length) {
      return name;
    }
    
#line 244
    JavaLangStringBuffer *result = [[JavaLangStringBuffer alloc] initWithInt:length + 8];
    
#line 247
    if (i > 0) {
      (void) [result appendWithNSString:[name substring:0 endIndex:i]];
    }
    
#line 251
    for (; i < length; i++) {
      jchar c = [name charAtWithInt:i];
      if (c == dollarReplacementFirstChar && [name hasPrefix:dollarReplacement_ offset:i]) {
        i += ((jint) [dollarReplacement_ length]) - 1;
        (void) [result appendWithChar:'$'];
      }
      else
#line 256
      if (c == hexPrefixFirstChar && [name hasPrefix:hexPrefix_ offset:i]) {
        i += ((jint) [hexPrefix_ length]);
        c = (jchar) [JavaLangInteger parseIntWithNSString:[name substring:i endIndex:i + 4] withInt:16];
        i += 3;
        (void) [result appendWithChar:c];
      }
      else
#line 261
      if (c == escapeReplacementFirstChar &&
#line 262
      [name hasPrefix:escapeCharReplacement_ offset:i]) {
        i += ((jint) [escapeCharReplacement_ length]) - 1;
        (void) [result appendWithChar:'_'];
      }
      else {
        
#line 266
        (void) [result appendWithChar:c];
      }
    }
    
#line 270
    s = [result description];
    (void) [unescapeCache_ putWithId:name withId:s];
  }
  return s;
}


#line 276
- (id)clone {
  
#line 277
  @try {
    ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder *coder = (ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder *) check_class_cast([super clone], [ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder class]);
    (void) [((ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder *) nil_chk(coder)) readResolve];
    return coder;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[ComThoughtworksXstreamConvertersReflectionObjectAccessException alloc] initWithNSString:@"Cannot clone XmlFriendlyNameCoder" withJavaLangThrowable:e];
  }
}


#line 287
- (id)readResolve {
  
#line 288
  escapeCache_ = [self createCacheMap];
  unescapeCache_ = [self createCacheMap];
  return self;
}


#line 293
- (id<JavaUtilMap>)createCacheMap {
  
#line 294
  return [[JavaUtilHashMap alloc] init];
}


#line 307
+ (jboolean)isXmlNameStartCharWithInt:(jint)cp {
  
#line 308
  return [ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder isInNameCharBoundsWithInt:cp withComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_IntPairArray:ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_XML_NAME_START_CHAR_BOUNDS_];
}


#line 311
+ (jboolean)isXmlNameCharWithInt:(jint)cp {
  
#line 312
  if ([ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder isXmlNameStartCharWithInt:cp]) {
    return YES;
  }
  return [ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder isInNameCharBoundsWithInt:cp withComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_IntPairArray:ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_XML_NAME_CHAR_EXTRA_BOUNDS_];
}


#line 318
+ (jboolean)isInNameCharBoundsWithInt:(jint)cp
withComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_IntPairArray:(IOSObjectArray *)nameCharBounds {
  
#line 319
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(nameCharBounds))->size_; ++i) {
    ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_IntPair *p = IOSObjectArray_Get(nameCharBounds, i);
    if (cp >= ((ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_IntPair *) nil_chk(p))->min_ && cp <= p->max_) {
      return YES;
    }
  }
  return NO;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder *)other {
  [super copyAllFieldsTo:other];
  other->dollarReplacement_ = dollarReplacement_;
  other->escapeCache_ = escapeCache_;
  other->escapeCharReplacement_ = escapeCharReplacement_;
  other->hexPrefix_ = hexPrefix_;
  other->unescapeCache_ = unescapeCache_;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (void)initialize {
  if (self == [ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder class]) {
    {
      
#line 65
      ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_IntPairList *list = [[ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_IntPairList alloc] init];
      
#line 67
      [list addWithChar:':'];
      [list addWithInt:'A' withInt:'Z'];
      [list addWithInt:'a' withInt:'z'];
      [list addWithChar:'_'];
      
#line 72
      [list addWithInt:(jint) 0xC0 withInt:(jint) 0xD6];
      [list addWithInt:(jint) 0xD8 withInt:(jint) 0xF6];
      [list addWithInt:(jint) 0xF8 withInt:(jint) 0x2FF];
      [list addWithInt:(jint) 0x370 withInt:(jint) 0x37D];
      [list addWithInt:(jint) 0x37F withInt:(jint) 0x1FFF];
      [list addWithInt:(jint) 0x200C withInt:(jint) 0x200D];
      [list addWithInt:(jint) 0x2070 withInt:(jint) 0x218F];
      [list addWithInt:(jint) 0x2C00 withInt:(jint) 0x2FEF];
      [list addWithInt:(jint) 0x3001 withInt:(jint) 0xD7FF];
      [list addWithInt:(jint) 0xF900 withInt:(jint) 0xFDCF];
      [list addWithInt:(jint) 0xFDF0 withInt:(jint) 0xFFFD];
      [list addWithInt:(jint) 0x10000 withInt:(jint) 0xEFFFF];
      ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_XML_NAME_START_CHAR_BOUNDS_ = (IOSObjectArray *) check_class_cast([list toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[list size] type:[IOSClass classWithClass:[ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_IntPair class]]]], [IOSObjectArray class]);
      
#line 86
      [list clear];
      [list addWithChar:'-'];
      [list addWithChar:'.'];
      [list addWithInt:'0' withInt:'9'];
      [list addWithChar:0x00b7];
      [list addWithInt:(jint) 0x0300 withInt:(jint) 0x036F];
      [list addWithInt:(jint) 0x203F withInt:(jint) 0x2040];
      ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_XML_NAME_CHAR_EXTRA_BOUNDS_ = (IOSObjectArray *) check_class_cast([list toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[list size] type:[IOSClass classWithClass:[ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_IntPair class]]]], [IOSObjectArray class]);
    }
    ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "XmlFriendlyNameCoder", NULL, 0x1, NULL },
    { "initWithNSString:withNSString:", "XmlFriendlyNameCoder", NULL, 0x1, NULL },
    { "initWithNSString:withNSString:withNSString:", "XmlFriendlyNameCoder", NULL, 0x1, NULL },
    { "decodeAttributeWithNSString:", "decodeAttribute", "Ljava.lang.String;", 0x1, NULL },
    { "decodeNodeWithNSString:", "decodeNode", "Ljava.lang.String;", 0x1, NULL },
    { "encodeAttributeWithNSString:", "encodeAttribute", "Ljava.lang.String;", 0x1, NULL },
    { "encodeNodeWithNSString:", "encodeNode", "Ljava.lang.String;", 0x1, NULL },
    { "encodeNameWithNSString:", "encodeName", "Ljava.lang.String;", 0x2, NULL },
    { "decodeNameWithNSString:", "decodeName", "Ljava.lang.String;", 0x2, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
    { "createCacheMap", NULL, "Ljava.util.Map;", 0x4, NULL },
    { "isXmlNameStartCharWithInt:", "isXmlNameStartChar", "Z", 0xa, NULL },
    { "isXmlNameCharWithInt:", "isXmlNameChar", "Z", 0xa, NULL },
    { "isInNameCharBoundsWithInt:withComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_IntPairArray:", "isInNameCharBounds", "Z", 0xa, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "XML_NAME_START_CHAR_BOUNDS_", NULL, 0x1a, "[Lcom.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder$IntPair;", &ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_XML_NAME_START_CHAR_BOUNDS_,  },
    { "XML_NAME_CHAR_EXTRA_BOUNDS_", NULL, 0x1a, "[Lcom.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder$IntPair;", &ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_XML_NAME_CHAR_EXTRA_BOUNDS_,  },
    { "dollarReplacement_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "escapeCharReplacement_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "escapeCache_", NULL, 0x82, "Ljava.util.Map;", NULL,  },
    { "unescapeCache_", NULL, 0x82, "Ljava.util.Map;", NULL,  },
    { "hexPrefix_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder = { "XmlFriendlyNameCoder", "com.thoughtworks.xstream.io.xml", NULL, 0x1, 15, methods, 7, fields, 0, NULL};
  return &_ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder;
}

@end


#line 52
@implementation ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_IntPairList


#line 53
- (void)addWithInt:(jint)min
           withInt:(jint)max {
  [super addWithId:[[ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_IntPair alloc] initWithInt:min withInt:max]];
}


#line 57
- (void)addWithChar:(jchar)cp {
  [super addWithId:[[ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_IntPair alloc] initWithInt:cp withInt:cp]];
}

- (instancetype)init {
  return [super init];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "addWithInt:withInt:", "add", "V", 0x0, NULL },
    { "addWithChar:", "add", "V", 0x0, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_IntPairList = { "IntPairList", "com.thoughtworks.xstream.io.xml", "XmlFriendlyNameCoder", 0x0, 3, methods, 0, NULL, 0, NULL};
  return &_ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_IntPairList;
}

@end


#line 297
@implementation ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_IntPair


#line 301
- (instancetype)initWithInt:(jint)min
                    withInt:(jint)max {
  if (self = [super init]) {
    
#line 302
    self->min_ = min;
    
#line 303
    self->max_ = max;
  }
  return self;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_IntPair *)other {
  [super copyAllFieldsTo:other];
  other->max_ = max_;
  other->min_ = min_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:", "IntPair", NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "min_", NULL, 0x0, "I", NULL,  },
    { "max_", NULL, 0x0, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_IntPair = { "IntPair", "com.thoughtworks.xstream.io.xml", "XmlFriendlyNameCoder", 0xa, 1, methods, 2, fields, 0, NULL};
  return &_ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder_IntPair;
}

@end
