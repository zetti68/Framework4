//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/io/xml/xppdom/XppDomComparator.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/io/xml/xppdom/XppDomComparator.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/thoughtworks/xstream/io/xml/xppdom/XppDom.h"
#include "com/thoughtworks/xstream/io/xml/xppdom/XppDomComparator.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/ThreadLocal.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"


#line 25
@implementation ComThoughtworksXstreamIoXmlXppdomXppDomComparator


#line 33
- (instancetype)init {
  return
#line 34
  [self initComThoughtworksXstreamIoXmlXppdomXppDomComparatorWithJavaLangThreadLocal:nil];
}


#line 43
- (instancetype)initComThoughtworksXstreamIoXmlXppdomXppDomComparatorWithJavaLangThreadLocal:(JavaLangThreadLocal *)xpath {
  if (self = [super init]) {
    
#line 44
    self->xpath_ = xpath;
  }
  return self;
}

- (instancetype)initWithJavaLangThreadLocal:(JavaLangThreadLocal *)xpath {
  return [self initComThoughtworksXstreamIoXmlXppdomXppDomComparatorWithJavaLangThreadLocal:
#line 43
xpath];
}


#line 47
- (jint)compareWithId:(id)dom1
               withId:(id)dom2 {
  
#line 49
  JavaLangStringBuffer *xpath = [[JavaLangStringBuffer alloc] initWithNSString:@"/"];
  jint s = [self compareInternalWithComThoughtworksXstreamIoXmlXppdomXppDom:(ComThoughtworksXstreamIoXmlXppdomXppDom *) check_class_cast(dom1, [ComThoughtworksXstreamIoXmlXppdomXppDom class]) withComThoughtworksXstreamIoXmlXppdomXppDom:(ComThoughtworksXstreamIoXmlXppdomXppDom *) check_class_cast(dom2, [ComThoughtworksXstreamIoXmlXppdomXppDom class]) withJavaLangStringBuffer:xpath withInt:-1];
  if (self->xpath_ != nil) {
    if (s != 0) {
      [self->xpath_ setWithId:[xpath description]];
    }
    else {
      
#line 55
      [self->xpath_ setWithId:nil];
    }
  }
  
#line 59
  return s;
}


#line 62
- (jint)compareInternalWithComThoughtworksXstreamIoXmlXppdomXppDom:(ComThoughtworksXstreamIoXmlXppdomXppDom *)dom1
                       withComThoughtworksXstreamIoXmlXppdomXppDom:(ComThoughtworksXstreamIoXmlXppdomXppDom *)dom2
                                          withJavaLangStringBuffer:(JavaLangStringBuffer *)xpath
                                                           withInt:(jint)count {
  
#line 64
  jint pathlen = [((JavaLangStringBuffer *) nil_chk(xpath)) sequenceLength];
  NSString *name = [((ComThoughtworksXstreamIoXmlXppdomXppDom *) nil_chk(dom1)) getName];
  jint s = [((NSString *) nil_chk(name)) compareToWithId:[((ComThoughtworksXstreamIoXmlXppdomXppDom *) nil_chk(dom2)) getName]];
  (void) [xpath appendWithNSString:name];
  if (count >= 0) {
    (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([xpath appendWithChar:'['])) appendWithInt:count])) appendWithChar:']'];
  }
  
#line 72
  if (s != 0) {
    (void) [xpath appendWithChar:'?'];
    
#line 75
    return s;
  }
  
#line 78
  IOSObjectArray *attributes = [dom1 getAttributeNames];
  IOSObjectArray *attributes2 = [dom2 getAttributeNames];
  jint len = ((IOSObjectArray *) nil_chk(attributes))->size_;
  s = ((IOSObjectArray *) nil_chk(attributes2))->size_ - len;
  if (s != 0) {
    (void) [xpath appendWithNSString:@"::count(@*)"];
    
#line 85
    return s < 0 ? 1 : -1;
  }
  
#line 88
  [JavaUtilArrays sortWithNSObjectArray:attributes];
  [JavaUtilArrays sortWithNSObjectArray:attributes2];
  for (jint i = 0; i < len; ++i) {
    NSString *attribute = IOSObjectArray_Get(attributes, i);
    s = [((NSString *) nil_chk(attribute)) compareToWithId:IOSObjectArray_Get(attributes2, i)];
    if (s != 0) {
      (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([xpath appendWithNSString:@"[@"])) appendWithNSString:attribute])) appendWithNSString:@"?]"];
      
#line 96
      return s;
    }
    
#line 99
    s = [((NSString *) nil_chk([dom1 getAttributeWithNSString:attribute])) compareToWithId:[dom2 getAttributeWithNSString:attribute]];
    if (s != 0) {
      (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([xpath appendWithNSString:@"[@"])) appendWithNSString:attribute])) appendWithChar:']'];
      
#line 103
      return s;
    }
  }
  
#line 107
  jint children = [dom1 getChildCount];
  s = [dom2 getChildCount] - children;
  if (s != 0) {
    (void) [xpath appendWithNSString:@"::count(*)"];
    
#line 112
    return s < 0 ? 1 : -1;
  }
  
#line 115
  if (children > 0) {
    if ([dom1 getValue] != nil || [dom2 getValue] != nil) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$@$", @"XppDom cannot handle mixed mode at ",
#line 118
      xpath, @"::text()")];
    }
    
#line 122
    (void) [xpath appendWithChar:'/'];
    
#line 124
    id<JavaUtilMap> names = [[JavaUtilHashMap alloc] init];
    for (jint i = 0; i < children; ++i) {
      ComThoughtworksXstreamIoXmlXppdomXppDom *child1 = [dom1 getChildWithInt:i];
      ComThoughtworksXstreamIoXmlXppdomXppDom *child2 = [dom2 getChildWithInt:i];
      NSString *child = [((ComThoughtworksXstreamIoXmlXppdomXppDom *) nil_chk(child1)) getName];
      if (![names containsKeyWithId:child]) {
        (void) [names putWithId:child withId:[IOSIntArray arrayWithLength:1]];
      }
      
#line 133
      s = [self compareInternalWithComThoughtworksXstreamIoXmlXppdomXppDom:child1 withComThoughtworksXstreamIoXmlXppdomXppDom:child2 withJavaLangStringBuffer:xpath withInt:(*IOSIntArray_GetRef(nil_chk(((IOSIntArray *) check_class_cast([names getWithId:child], [IOSIntArray class]))), 0))++];
      if (s != 0) {
        return s;
      }
    }
  }
  else {
    
#line 139
    NSString *value2 = [dom2 getValue];
    NSString *value1 = [dom1 getValue];
    if (value1 == nil) {
      s = value2 == nil ? 0 : -1;
    }
    else {
      
#line 144
      s = value2 == nil ? 1 : [value1 compareToWithId:value2];
    }
    
#line 147
    if (s != 0) {
      (void) [xpath appendWithNSString:@"::text()"];
      
#line 150
      return s;
    }
  }
  
#line 154
  [xpath setLengthWithInt:pathlen];
  
#line 156
  return s;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamIoXmlXppdomXppDomComparator *)other {
  [super copyAllFieldsTo:other];
  other->xpath_ = xpath_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "XppDomComparator", NULL, 0x1, NULL },
    { "initWithJavaLangThreadLocal:", "XppDomComparator", NULL, 0x1, NULL },
    { "compareWithId:withId:", "compare", "I", 0x1, NULL },
    { "compareInternalWithComThoughtworksXstreamIoXmlXppdomXppDom:withComThoughtworksXstreamIoXmlXppdomXppDom:withJavaLangStringBuffer:withInt:", "compareInternal", "I", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "xpath_", NULL, 0x12, "Ljava.lang.ThreadLocal;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoXmlXppdomXppDomComparator = { "XppDomComparator", "com.thoughtworks.xstream.io.xml.xppdom", NULL, 0x1, 4, methods, 1, fields, 0, NULL};
  return &_ComThoughtworksXstreamIoXmlXppdomXppDomComparator;
}

@end
