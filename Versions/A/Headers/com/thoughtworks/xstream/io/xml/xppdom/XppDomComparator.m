//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/io/xml/xppdom/XppDomComparator.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/io/xml/xppdom/XppDomComparator.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/io/xml/xppdom/XppDom.h"
#include "com/thoughtworks/xstream/io/xml/xppdom/XppDomComparator.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/ThreadLocal.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@interface ComThoughtworksXstreamIoXmlXppdomXppDomComparator () {
 @public
  JavaLangThreadLocal *xpath_;
}

- (jint)compareInternalWithComThoughtworksXstreamIoXmlXppdomXppDom:(ComThoughtworksXstreamIoXmlXppdomXppDom *)dom1
                       withComThoughtworksXstreamIoXmlXppdomXppDom:(ComThoughtworksXstreamIoXmlXppdomXppDom *)dom2
                                          withJavaLangStringBuffer:(JavaLangStringBuffer *)xpath
                                                           withInt:(jint)count;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoXmlXppdomXppDomComparator, xpath_, JavaLangThreadLocal *)

__attribute__((unused)) static jint ComThoughtworksXstreamIoXmlXppdomXppDomComparator_compareInternalWithComThoughtworksXstreamIoXmlXppdomXppDom_withComThoughtworksXstreamIoXmlXppdomXppDom_withJavaLangStringBuffer_withInt_(ComThoughtworksXstreamIoXmlXppdomXppDomComparator *self, ComThoughtworksXstreamIoXmlXppdomXppDom *dom1, ComThoughtworksXstreamIoXmlXppdomXppDom *dom2, JavaLangStringBuffer *xpath, jint count);


#line 25
@implementation ComThoughtworksXstreamIoXmlXppdomXppDomComparator


#line 33
- (instancetype)init {
  ComThoughtworksXstreamIoXmlXppdomXppDomComparator_init(self);
  return self;
}


#line 43
- (instancetype)initWithJavaLangThreadLocal:(JavaLangThreadLocal *)xpath {
  ComThoughtworksXstreamIoXmlXppdomXppDomComparator_initWithJavaLangThreadLocal_(self, xpath);
  return self;
}


#line 47
- (jint)compareWithId:(id)dom1
               withId:(id)dom2 {
  
#line 49
  JavaLangStringBuffer *xpath = new_JavaLangStringBuffer_initWithNSString_(@"/");
  jint s = ComThoughtworksXstreamIoXmlXppdomXppDomComparator_compareInternalWithComThoughtworksXstreamIoXmlXppdomXppDom_withComThoughtworksXstreamIoXmlXppdomXppDom_withJavaLangStringBuffer_withInt_(self, (ComThoughtworksXstreamIoXmlXppdomXppDom *) check_class_cast(dom1, [ComThoughtworksXstreamIoXmlXppdomXppDom class]), (ComThoughtworksXstreamIoXmlXppdomXppDom *) check_class_cast(dom2, [ComThoughtworksXstreamIoXmlXppdomXppDom class]), xpath, -1);
  if (self->xpath_ != nil) {
    if (s != 0) {
      [self->xpath_ setWithId:[xpath description]];
    }
    else {
      
#line 55
      [self->xpath_ setWithId:nil];
    }
  }
  
#line 59
  return s;
}


#line 62
- (jint)compareInternalWithComThoughtworksXstreamIoXmlXppdomXppDom:(ComThoughtworksXstreamIoXmlXppdomXppDom *)dom1
                       withComThoughtworksXstreamIoXmlXppdomXppDom:(ComThoughtworksXstreamIoXmlXppdomXppDom *)dom2
                                          withJavaLangStringBuffer:(JavaLangStringBuffer *)xpath
                                                           withInt:(jint)count {
  return ComThoughtworksXstreamIoXmlXppdomXppDomComparator_compareInternalWithComThoughtworksXstreamIoXmlXppdomXppDom_withComThoughtworksXstreamIoXmlXppdomXppDom_withJavaLangStringBuffer_withInt_(self, dom1, dom2, xpath, count);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "XppDomComparator", NULL, 0x1, NULL, NULL },
    { "initWithJavaLangThreadLocal:", "XppDomComparator", NULL, 0x1, NULL, NULL },
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "compareInternalWithComThoughtworksXstreamIoXmlXppdomXppDom:withComThoughtworksXstreamIoXmlXppdomXppDom:withJavaLangStringBuffer:withInt:", "compareInternal", "I", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "xpath_", NULL, 0x12, "Ljava.lang.ThreadLocal;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoXmlXppdomXppDomComparator = { 2, "XppDomComparator", "com.thoughtworks.xstream.io.xml.xppdom", NULL, 0x1, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamIoXmlXppdomXppDomComparator;
}

@end


#line 33
void ComThoughtworksXstreamIoXmlXppdomXppDomComparator_init(ComThoughtworksXstreamIoXmlXppdomXppDomComparator *self) {
  (void) ComThoughtworksXstreamIoXmlXppdomXppDomComparator_initWithJavaLangThreadLocal_(self, nil);
}


#line 33
ComThoughtworksXstreamIoXmlXppdomXppDomComparator *new_ComThoughtworksXstreamIoXmlXppdomXppDomComparator_init() {
  ComThoughtworksXstreamIoXmlXppdomXppDomComparator *self = [ComThoughtworksXstreamIoXmlXppdomXppDomComparator alloc];
  ComThoughtworksXstreamIoXmlXppdomXppDomComparator_init(self);
  return self;
}


#line 43
void ComThoughtworksXstreamIoXmlXppdomXppDomComparator_initWithJavaLangThreadLocal_(ComThoughtworksXstreamIoXmlXppdomXppDomComparator *self, JavaLangThreadLocal *xpath) {
  (void) NSObject_init(self);
  
#line 44
  self->xpath_ = xpath;
}


#line 43
ComThoughtworksXstreamIoXmlXppdomXppDomComparator *new_ComThoughtworksXstreamIoXmlXppdomXppDomComparator_initWithJavaLangThreadLocal_(JavaLangThreadLocal *xpath) {
  ComThoughtworksXstreamIoXmlXppdomXppDomComparator *self = [ComThoughtworksXstreamIoXmlXppdomXppDomComparator alloc];
  ComThoughtworksXstreamIoXmlXppdomXppDomComparator_initWithJavaLangThreadLocal_(self, xpath);
  return self;
}


#line 62
jint ComThoughtworksXstreamIoXmlXppdomXppDomComparator_compareInternalWithComThoughtworksXstreamIoXmlXppdomXppDom_withComThoughtworksXstreamIoXmlXppdomXppDom_withJavaLangStringBuffer_withInt_(ComThoughtworksXstreamIoXmlXppdomXppDomComparator *self, ComThoughtworksXstreamIoXmlXppdomXppDom *dom1, ComThoughtworksXstreamIoXmlXppdomXppDom *dom2, JavaLangStringBuffer *xpath, jint count) {
  
#line 64
  jint pathlen = [((JavaLangStringBuffer *) nil_chk(xpath)) length];
  NSString *name = [((ComThoughtworksXstreamIoXmlXppdomXppDom *) nil_chk(dom1)) getName];
  jint s = [((NSString *) nil_chk(name)) compareToWithId:[((ComThoughtworksXstreamIoXmlXppdomXppDom *) nil_chk(dom2)) getName]];
  (void) [xpath appendWithNSString:name];
  if (count >= 0) {
    (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([xpath appendWithChar:'['])) appendWithInt:count])) appendWithChar:']'];
  }
  
#line 72
  if (s != 0) {
    (void) [xpath appendWithChar:'?'];
    
#line 75
    return s;
  }
  
#line 78
  IOSObjectArray *attributes = [dom1 getAttributeNames];
  IOSObjectArray *attributes2 = [dom2 getAttributeNames];
  jint len = ((IOSObjectArray *) nil_chk(attributes))->size_;
  s = ((IOSObjectArray *) nil_chk(attributes2))->size_ - len;
  if (s != 0) {
    (void) [xpath appendWithNSString:@"::count(@*)"];
    
#line 85
    return s < 0 ? 1 : -1;
  }
  
#line 88
  JavaUtilArrays_sortWithNSObjectArray_(attributes);
  JavaUtilArrays_sortWithNSObjectArray_(attributes2);
  for (jint i = 0; i < len; ++i) {
    NSString *attribute = IOSObjectArray_Get(attributes, i);
    s = [((NSString *) nil_chk(attribute)) compareToWithId:IOSObjectArray_Get(attributes2, i)];
    if (s != 0) {
      (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([xpath appendWithNSString:@"[@"])) appendWithNSString:attribute])) appendWithNSString:@"?]"];
      
#line 96
      return s;
    }
    
#line 99
    s = [((NSString *) nil_chk([dom1 getAttributeWithNSString:attribute])) compareToWithId:[dom2 getAttributeWithNSString:attribute]];
    if (s != 0) {
      (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([xpath appendWithNSString:@"[@"])) appendWithNSString:attribute])) appendWithChar:']'];
      
#line 103
      return s;
    }
  }
  
#line 107
  jint children = [dom1 getChildCount];
  s = [dom2 getChildCount] - children;
  if (s != 0) {
    (void) [xpath appendWithNSString:@"::count(*)"];
    
#line 112
    return s < 0 ? 1 : -1;
  }
  
#line 115
  if (children > 0) {
    if ([dom1 getValue] != nil || [dom2 getValue] != nil) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"XppDom cannot handle mixed mode at ",
#line 118
      xpath, @"::text()"));
    }
    
#line 122
    (void) [xpath appendWithChar:'/'];
    
#line 124
    id<JavaUtilMap> names = new_JavaUtilHashMap_init();
    for (jint i = 0; i < children; ++i) {
      ComThoughtworksXstreamIoXmlXppdomXppDom *child1 = [dom1 getChildWithInt:i];
      ComThoughtworksXstreamIoXmlXppdomXppDom *child2 = [dom2 getChildWithInt:i];
      NSString *child = [((ComThoughtworksXstreamIoXmlXppdomXppDom *) nil_chk(child1)) getName];
      if (![names containsKeyWithId:child]) {
        (void) [names putWithId:child withId:[IOSIntArray newArrayWithLength:1]];
      }
      
#line 133
      s = ComThoughtworksXstreamIoXmlXppdomXppDomComparator_compareInternalWithComThoughtworksXstreamIoXmlXppdomXppDom_withComThoughtworksXstreamIoXmlXppdomXppDom_withJavaLangStringBuffer_withInt_(self, child1, child2, xpath, (*IOSIntArray_GetRef(nil_chk(((IOSIntArray *) check_class_cast([names getWithId:child], [IOSIntArray class]))), 0))++);
      if (s != 0) {
        return s;
      }
    }
  }
  else {
    
#line 139
    NSString *value2 = [dom2 getValue];
    NSString *value1 = [dom1 getValue];
    if (value1 == nil) {
      s = value2 == nil ? 0 : -1;
    }
    else {
      
#line 144
      s = value2 == nil ? 1 : [value1 compareToWithId:value2];
    }
    
#line 147
    if (s != 0) {
      (void) [xpath appendWithNSString:@"::text()"];
      
#line 150
      return s;
    }
  }
  
#line 154
  [xpath setLengthWithInt:pathlen];
  
#line 156
  return s;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamIoXmlXppdomXppDomComparator)
