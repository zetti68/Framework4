//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/io/xml/XppReader.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/io/xml/XppReader.java"

#include "IOSClass.h"
#include "com/thoughtworks/xstream/converters/ErrorWriter.h"
#include "com/thoughtworks/xstream/io/AbstractReader.h"
#include "com/thoughtworks/xstream/io/StreamException.h"
#include "com/thoughtworks/xstream/io/naming/NameCoder.h"
#include "com/thoughtworks/xstream/io/xml/AbstractPullReader.h"
#include "com/thoughtworks/xstream/io/xml/XmlFriendlyNameCoder.h"
#include "com/thoughtworks/xstream/io/xml/XmlFriendlyReplacer.h"
#include "com/thoughtworks/xstream/io/xml/XppReader.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/InstantiationException.h"
#include "org/xmlpull/v1/XmlPullParser.h"
#include "org/xmlpull/v1/XmlPullParserException.h"


#line 30
@implementation ComThoughtworksXstreamIoXmlXppReader


#line 42
- (instancetype)initWithJavaIoReader:(JavaIoReader *)reader
       withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser {
  return
#line 43
  [self initComThoughtworksXstreamIoXmlXppReaderWithJavaIoReader:reader withOrgXmlpullV1XmlPullParser:parser withComThoughtworksXstreamIoNamingNameCoder:[[ComThoughtworksXstreamIoXmlXmlFriendlyNameCoder alloc] init]];
}


#line 54
- (instancetype)initComThoughtworksXstreamIoXmlXppReaderWithJavaIoReader:(JavaIoReader *)reader
                                           withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser
                             withComThoughtworksXstreamIoNamingNameCoder:(id<ComThoughtworksXstreamIoNamingNameCoder>)nameCoder {
  if (self =
#line 55
  [super initWithComThoughtworksXstreamIoNamingNameCoder:nameCoder]) {
    
#line 56
    self->parser_ = parser;
    
#line 57
    self->reader_ = reader;
    
#line 58
    @try {
      [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser)) setInputWithJavaIoReader:self->reader_];
    }
    @catch (
#line 60
    OrgXmlpullV1XmlPullParserException *e) {
      @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithJavaLangThrowable:e];
    }
    
#line 63
    [self moveDown];
  }
  return self;
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)reader
       withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser
withComThoughtworksXstreamIoNamingNameCoder:(id<ComThoughtworksXstreamIoNamingNameCoder>)nameCoder {
  return [self initComThoughtworksXstreamIoXmlXppReaderWithJavaIoReader:
#line 54
reader withOrgXmlpullV1XmlPullParser:parser withComThoughtworksXstreamIoNamingNameCoder:nameCoder];
}


#line 69
- (instancetype)initWithJavaIoReader:(JavaIoReader *)reader {
  return
#line 70
  [self initComThoughtworksXstreamIoXmlXppReaderWithJavaIoReader:reader withComThoughtworksXstreamIoXmlXmlFriendlyReplacer:[[ComThoughtworksXstreamIoXmlXmlFriendlyReplacer alloc] init]];
}


#line 77
- (instancetype)initComThoughtworksXstreamIoXmlXppReaderWithJavaIoReader:(JavaIoReader *)reader
                      withComThoughtworksXstreamIoXmlXmlFriendlyReplacer:(ComThoughtworksXstreamIoXmlXmlFriendlyReplacer *)replacer {
  if (self =
#line 78
  [super initWithComThoughtworksXstreamIoXmlXmlFriendlyReplacer:replacer]) {
    
#line 79
    @try {
      parser_ = [self createParser];
      self->reader_ = reader;
      [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser_)) setInputWithJavaIoReader:self->reader_];
      [self moveDown];
    }
    @catch (
#line 84
    OrgXmlpullV1XmlPullParserException *e) {
      @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithJavaLangThrowable:e];
    }
  }
  return self;
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)reader
withComThoughtworksXstreamIoXmlXmlFriendlyReplacer:(ComThoughtworksXstreamIoXmlXmlFriendlyReplacer *)replacer {
  return [self initComThoughtworksXstreamIoXmlXppReaderWithJavaIoReader:
#line 77
reader withComThoughtworksXstreamIoXmlXmlFriendlyReplacer:replacer];
}


#line 93
- (id<OrgXmlpullV1XmlPullParser>)createParser {
  
#line 94
  JavaLangException *exception = nil;
  @try {
    return (id<OrgXmlpullV1XmlPullParser>) check_protocol_cast([((IOSClass *) nil_chk([IOSClass forName:@"org.xmlpull.mxp1.MXParser" initialize:YES classLoader:[[IOSClass classWithProtocol:@protocol(OrgXmlpullV1XmlPullParser)] getClassLoader]])) newInstance], @protocol(OrgXmlpullV1XmlPullParser));
  }
  @catch (
#line 97
  JavaLangInstantiationException *e) {
    exception = e;
  }
  @catch (
#line 99
  JavaLangIllegalAccessException *e) {
    exception = e;
  }
  @catch (
#line 101
  JavaLangClassNotFoundException *e) {
    exception = e;
  }
  @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithNSString:@"Cannot create Xpp3 parser instance." withJavaLangThrowable:exception];
}


#line 107
- (jint)pullNextEvent {
  
#line 108
  @try {
    switch ([((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser_)) next]) {
      case OrgXmlpullV1XmlPullParser_START_DOCUMENT:
      case OrgXmlpullV1XmlPullParser_START_TAG:
      return ComThoughtworksXstreamIoXmlAbstractPullReader_START_NODE;
      case OrgXmlpullV1XmlPullParser_END_DOCUMENT:
      case OrgXmlpullV1XmlPullParser_END_TAG:
      return ComThoughtworksXstreamIoXmlAbstractPullReader_END_NODE;
      case OrgXmlpullV1XmlPullParser_TEXT:
      return ComThoughtworksXstreamIoXmlAbstractPullReader_TEXT;
      case OrgXmlpullV1XmlPullParser_COMMENT:
      return ComThoughtworksXstreamIoXmlAbstractPullReader_COMMENT;
      default:
      return ComThoughtworksXstreamIoXmlAbstractPullReader_OTHER;
    }
  }
  @catch (
#line 123
  OrgXmlpullV1XmlPullParserException *e) {
    @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithJavaLangThrowable:e];
  }
  @catch (
#line 125
  JavaIoIOException *e) {
    @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithJavaLangThrowable:e];
  }
}


#line 130
- (NSString *)pullElementName {
  
#line 131
  return [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser_)) getName];
}


#line 134
- (NSString *)pullText {
  
#line 135
  return [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser_)) getText];
}


#line 138
- (NSString *)getAttributeWithNSString:(NSString *)name {
  
#line 139
  return [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser_)) getAttributeValueWithNSString:nil withNSString:[self encodeAttributeWithNSString:name]];
}


#line 142
- (NSString *)getAttributeWithInt:(jint)index {
  
#line 143
  return [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser_)) getAttributeValueWithInt:index];
}


#line 146
- (jint)getAttributeCount {
  
#line 147
  return [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser_)) getAttributeCount];
}


#line 150
- (NSString *)getAttributeNameWithInt:(jint)index {
  
#line 151
  return [self decodeAttributeWithNSString:[((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser_)) getAttributeNameWithInt:index]];
}


#line 154
- (void)appendErrorsWithComThoughtworksXstreamConvertersErrorWriter:(id<ComThoughtworksXstreamConvertersErrorWriter>)errorWriter {
  
#line 155
  [((id<ComThoughtworksXstreamConvertersErrorWriter>) nil_chk(errorWriter)) addWithNSString:@"line number" withNSString:[NSString valueOfInt:[((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser_)) getLineNumber]]];
}


#line 158
- (void)close {
  
#line 159
  @try {
    [((JavaIoReader *) nil_chk(reader_)) close];
  }
  @catch (
#line 161
  JavaIoIOException *e) {
    @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithJavaLangThrowable:e];
  }
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamIoXmlXppReader *)other {
  [super copyAllFieldsTo:other];
  other->parser_ = parser_;
  other->reader_ = reader_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoReader:withOrgXmlpullV1XmlPullParser:", "XppReader", NULL, 0x1, NULL },
    { "initWithJavaIoReader:withOrgXmlpullV1XmlPullParser:withComThoughtworksXstreamIoNamingNameCoder:", "XppReader", NULL, 0x1, NULL },
    { "initWithJavaIoReader:", "XppReader", NULL, 0x1, NULL },
    { "initWithJavaIoReader:withComThoughtworksXstreamIoXmlXmlFriendlyReplacer:", "XppReader", NULL, 0x1, NULL },
    { "createParser", NULL, "Lorg.xmlpull.v1.XmlPullParser;", 0x4, NULL },
    { "pullNextEvent", NULL, "I", 0x4, NULL },
    { "pullElementName", NULL, "Ljava.lang.String;", 0x4, NULL },
    { "pullText", NULL, "Ljava.lang.String;", 0x4, NULL },
    { "getAttributeWithNSString:", "getAttribute", "Ljava.lang.String;", 0x1, NULL },
    { "getAttributeWithInt:", "getAttribute", "Ljava.lang.String;", 0x1, NULL },
    { "getAttributeCount", NULL, "I", 0x1, NULL },
    { "getAttributeNameWithInt:", "getAttributeName", "Ljava.lang.String;", 0x1, NULL },
    { "appendErrorsWithComThoughtworksXstreamConvertersErrorWriter:", "appendErrors", "V", 0x1, NULL },
    { "close", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "parser_", NULL, 0x12, "Lorg.xmlpull.v1.XmlPullParser;", NULL,  },
    { "reader_", NULL, 0x12, "Ljava.io.Reader;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoXmlXppReader = { "XppReader", "com.thoughtworks.xstream.io.xml", NULL, 0x1, 14, methods, 2, fields, 0, NULL};
  return &_ComThoughtworksXstreamIoXmlXppReader;
}

@end
