//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/io/xml/xppdom/XppDom.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/io/xml/xppdom/XppDom.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/io/xml/xppdom/Xpp3Dom.h"
#include "com/thoughtworks/xstream/io/xml/xppdom/XppDom.h"
#include "java/io/IOException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/xmlpull/v1/XmlPullParser.h"
#include "org/xmlpull/v1/XmlPullParserException.h"

#define ComThoughtworksXstreamIoXmlXppdomXppDom_serialVersionUID 1LL

@interface ComThoughtworksXstreamIoXmlXppdomXppDom () {
 @public
  NSString *name_;
  NSString *value_;
  id<JavaUtilMap> attributes_;
  id<JavaUtilList> childList_;
  id<JavaUtilMap> childMap_;
  ComThoughtworksXstreamIoXmlXppdomXppDom *parent_;
}

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoXmlXppdomXppDom, name_, NSString *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoXmlXppdomXppDom, value_, NSString *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoXmlXppdomXppDom, attributes_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoXmlXppdomXppDom, childList_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoXmlXppdomXppDom, childMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoXmlXppdomXppDom, parent_, ComThoughtworksXstreamIoXmlXppdomXppDom *)

J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamIoXmlXppdomXppDom, serialVersionUID, jlong)


#line 33
@implementation ComThoughtworksXstreamIoXmlXppdomXppDom


#line 43
- (instancetype)initWithNSString:(NSString *)name {
  ComThoughtworksXstreamIoXmlXppdomXppDom_initWithNSString_(self, name);
  return self;
}


#line 53
- (NSString *)getName {
  return name_;
}


#line 61
- (NSString *)getValue {
  return value_;
}

- (void)setValueWithNSString:(NSString *)value {
  self->value_ = value;
}


#line 73
- (IOSObjectArray *)getAttributeNames {
  if (nil == attributes_) {
    return [IOSObjectArray newArrayWithLength:0 type:NSString_class_()];
  }
  else {
    
#line 77
    return (IOSObjectArray *) check_class_cast([((id<JavaUtilSet>) nil_chk([attributes_ keySet])) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSString_class_()]], [IOSObjectArray class]);
  }
}


#line 81
- (NSString *)getAttributeWithNSString:(NSString *)name {
  return (nil != attributes_) ? (NSString *) check_class_cast([attributes_ getWithId:name], [NSString class]) : nil;
}

- (void)setAttributeWithNSString:(NSString *)name
                    withNSString:(NSString *)value {
  if (nil == attributes_) {
    attributes_ = new_JavaUtilHashMap_init();
  }
  
#line 90
  (void) [((id<JavaUtilMap>) nil_chk(attributes_)) putWithId:name withId:value];
}


#line 97
- (ComThoughtworksXstreamIoXmlXppdomXppDom *)getChildWithInt:(jint)i {
  return (ComThoughtworksXstreamIoXmlXppdomXppDom *) check_class_cast([((id<JavaUtilList>) nil_chk(childList_)) getWithInt:i], [ComThoughtworksXstreamIoXmlXppdomXppDom class]);
}

- (ComThoughtworksXstreamIoXmlXppdomXppDom *)getChildWithNSString:(NSString *)name {
  return (ComThoughtworksXstreamIoXmlXppdomXppDom *) check_class_cast([((id<JavaUtilMap>) nil_chk(childMap_)) getWithId:name], [ComThoughtworksXstreamIoXmlXppdomXppDom class]);
}

- (void)addChildWithComThoughtworksXstreamIoXmlXppdomXppDom:(ComThoughtworksXstreamIoXmlXppdomXppDom *)xpp3Dom {
  [((ComThoughtworksXstreamIoXmlXppdomXppDom *) nil_chk(xpp3Dom)) setParentWithComThoughtworksXstreamIoXmlXppdomXppDom:self];
  [((id<JavaUtilList>) nil_chk(childList_)) addWithId:xpp3Dom];
  (void) [((id<JavaUtilMap>) nil_chk(childMap_)) putWithId:[xpp3Dom getName] withId:xpp3Dom];
}

- (IOSObjectArray *)getChildren {
  if (nil == childList_) {
    return [IOSObjectArray newArrayWithLength:0 type:ComThoughtworksXstreamIoXmlXppdomXppDom_class_()];
  }
  else {
    
#line 115
    return (IOSObjectArray *) check_class_cast([childList_ toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:ComThoughtworksXstreamIoXmlXppdomXppDom_class_()]], [IOSObjectArray class]);
  }
}


#line 119
- (IOSObjectArray *)getChildrenWithNSString:(NSString *)name {
  if (nil == childList_) {
    return [IOSObjectArray newArrayWithLength:0 type:ComThoughtworksXstreamIoXmlXppdomXppDom_class_()];
  }
  else {
    
#line 123
    JavaUtilArrayList *children = new_JavaUtilArrayList_init();
    jint size = [self->childList_ size];
    
#line 126
    for (jint i = 0; i < size; i++) {
      ComThoughtworksXstreamIoXmlXppdomXppDom *configuration = (ComThoughtworksXstreamIoXmlXppdomXppDom *) check_class_cast([self->childList_ getWithInt:i], [ComThoughtworksXstreamIoXmlXppdomXppDom class]);
      if ([((NSString *) nil_chk(name)) isEqual:[((ComThoughtworksXstreamIoXmlXppdomXppDom *) nil_chk(configuration)) getName]]) {
        [children addWithId:configuration];
      }
    }
    
#line 133
    return (IOSObjectArray *) check_class_cast([children toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:ComThoughtworksXstreamIoXmlXppdomXppDom_class_()]], [IOSObjectArray class]);
  }
}


#line 137
- (jint)getChildCount {
  if (nil == childList_) {
    return 0;
  }
  
#line 142
  return [((id<JavaUtilList>) nil_chk(childList_)) size];
}


#line 149
- (ComThoughtworksXstreamIoXmlXppdomXppDom *)getParent {
  return parent_;
}

- (void)setParentWithComThoughtworksXstreamIoXmlXppdomXppDom:(ComThoughtworksXstreamIoXmlXppdomXppDom *)parent {
  self->parent_ = parent;
}


#line 161
- (id)readResolve {
  childMap_ = new_JavaUtilHashMap_init();
  for (id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(childList_)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    ComThoughtworksXstreamIoXmlXppdomXppDom *element = (ComThoughtworksXstreamIoXmlXppdomXppDom *) check_class_cast([iter next], [ComThoughtworksXstreamIoXmlXppdomXppDom class]);
    (void) [childMap_ putWithId:[((ComThoughtworksXstreamIoXmlXppdomXppDom *) nil_chk(element)) getName] withId:element];
  }
  return self;
}


#line 184
+ (ComThoughtworksXstreamIoXmlXppdomXppDom *)buildWithOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser {
  return ComThoughtworksXstreamIoXmlXppdomXppDom_buildWithOrgXmlpullV1XmlPullParser_(parser);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "XppDom", NULL, 0x1, NULL, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getValue", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setValueWithNSString:", "setValue", "V", 0x1, NULL, NULL },
    { "getAttributeNames", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getAttributeWithNSString:", "getAttribute", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setAttributeWithNSString:withNSString:", "setAttribute", "V", 0x1, NULL, NULL },
    { "getChildWithInt:", "getChild", "Lcom.thoughtworks.xstream.io.xml.xppdom.XppDom;", 0x1, NULL, NULL },
    { "getChildWithNSString:", "getChild", "Lcom.thoughtworks.xstream.io.xml.xppdom.XppDom;", 0x1, NULL, NULL },
    { "addChildWithComThoughtworksXstreamIoXmlXppdomXppDom:", "addChild", "V", 0x1, NULL, NULL },
    { "getChildren", NULL, "[Lcom.thoughtworks.xstream.io.xml.xppdom.XppDom;", 0x1, NULL, NULL },
    { "getChildrenWithNSString:", "getChildren", "[Lcom.thoughtworks.xstream.io.xml.xppdom.XppDom;", 0x1, NULL, NULL },
    { "getChildCount", NULL, "I", 0x1, NULL, NULL },
    { "getParent", NULL, "Lcom.thoughtworks.xstream.io.xml.xppdom.XppDom;", 0x1, NULL, NULL },
    { "setParentWithComThoughtworksXstreamIoXmlXppdomXppDom:", "setParent", "V", 0x1, NULL, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x0, NULL, NULL },
    { "buildWithOrgXmlpullV1XmlPullParser:", "build", "Lcom.thoughtworks.xstream.io.xml.xppdom.XppDom;", 0x9, "Lorg.xmlpull.v1.XmlPullParserException;Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = ComThoughtworksXstreamIoXmlXppdomXppDom_serialVersionUID },
    { "name_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "value_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "attributes_", NULL, 0x2, "Ljava.util.Map;", NULL, NULL,  },
    { "childList_", NULL, 0x2, "Ljava.util.List;", NULL, NULL,  },
    { "childMap_", NULL, 0x82, "Ljava.util.Map;", NULL, NULL,  },
    { "parent_", NULL, 0x2, "Lcom.thoughtworks.xstream.io.xml.xppdom.XppDom;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoXmlXppdomXppDom = { 2, "XppDom", "com.thoughtworks.xstream.io.xml.xppdom", NULL, 0x1, 17, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamIoXmlXppdomXppDom;
}

@end


#line 43
void ComThoughtworksXstreamIoXmlXppdomXppDom_initWithNSString_(ComThoughtworksXstreamIoXmlXppdomXppDom *self, NSString *name) {
  (void) NSObject_init(self);
  
#line 44
  self->name_ = name;
  self->childList_ = new_JavaUtilArrayList_init();
  self->childMap_ = new_JavaUtilHashMap_init();
}


#line 43
ComThoughtworksXstreamIoXmlXppdomXppDom *new_ComThoughtworksXstreamIoXmlXppdomXppDom_initWithNSString_(NSString *name) {
  ComThoughtworksXstreamIoXmlXppdomXppDom *self = [ComThoughtworksXstreamIoXmlXppdomXppDom alloc];
  ComThoughtworksXstreamIoXmlXppdomXppDom_initWithNSString_(self, name);
  return self;
}


#line 184
ComThoughtworksXstreamIoXmlXppdomXppDom *ComThoughtworksXstreamIoXmlXppdomXppDom_buildWithOrgXmlpullV1XmlPullParser_(id<OrgXmlpullV1XmlPullParser> parser) {
  ComThoughtworksXstreamIoXmlXppdomXppDom_initialize();
  
#line 185
  id<JavaUtilList> elements = new_JavaUtilArrayList_init();
  id<JavaUtilList> values = new_JavaUtilArrayList_init();
  ComThoughtworksXstreamIoXmlXppdomXppDom *node = nil;
  
#line 189
  jint eventType = [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser)) getEventType];
  while (eventType != OrgXmlpullV1XmlPullParser_END_DOCUMENT) {
    if (eventType == OrgXmlpullV1XmlPullParser_START_TAG) {
      NSString *rawName = [parser getName];
      
#line 195
      ComThoughtworksXstreamIoXmlXppdomXppDom *child = new_ComThoughtworksXstreamIoXmlXppdomXpp3Dom_initWithNSString_(rawName);
      
#line 197
      jint depth = [elements size];
      if (depth > 0) {
        ComThoughtworksXstreamIoXmlXppdomXppDom *parent = (ComThoughtworksXstreamIoXmlXppdomXppDom *) check_class_cast([elements getWithInt:depth - 1], [ComThoughtworksXstreamIoXmlXppdomXppDom class]);
        [((ComThoughtworksXstreamIoXmlXppdomXppDom *) nil_chk(parent)) addChildWithComThoughtworksXstreamIoXmlXppdomXppDom:child];
      }
      
#line 203
      [elements addWithId:child];
      [values addWithId:new_JavaLangStringBuffer_init()];
      
#line 206
      jint attributesSize = [parser getAttributeCount];
      for (jint i = 0; i < attributesSize; i++) {
        NSString *name = [parser getAttributeNameWithInt:i];
        NSString *value = [parser getAttributeValueWithInt:i];
        [child setAttributeWithNSString:name withNSString:value];
      }
    }
    else
#line 212
    if (eventType == OrgXmlpullV1XmlPullParser_TEXT) {
      jint depth = [values size] - 1;
      JavaLangStringBuffer *valueBuffer = (JavaLangStringBuffer *) check_class_cast([values getWithInt:depth], [JavaLangStringBuffer class]);
      (void) [((JavaLangStringBuffer *) nil_chk(valueBuffer)) appendWithNSString:[parser getText]];
    }
    else
#line 216
    if (eventType == OrgXmlpullV1XmlPullParser_END_TAG) {
      jint depth = [elements size] - 1;
      ComThoughtworksXstreamIoXmlXppdomXppDom *finalNode = (ComThoughtworksXstreamIoXmlXppdomXppDom *) check_class_cast([elements removeWithInt:depth], [ComThoughtworksXstreamIoXmlXppdomXppDom class]);
      NSString *accumulatedValue = [nil_chk(([values removeWithInt:depth])) description];
      
#line 221
      NSString *finishedValue;
      if (0 == ((jint) [((NSString *) nil_chk(accumulatedValue)) length])) {
        finishedValue = nil;
      }
      else {
        
#line 225
        finishedValue = accumulatedValue;
      }
      
#line 228
      [((ComThoughtworksXstreamIoXmlXppdomXppDom *) nil_chk(finalNode)) setValueWithNSString:finishedValue];
      if (0 == depth) {
        node = finalNode;
      }
    }
    
#line 234
    eventType = [parser next];
  }
  
#line 237
  return node;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamIoXmlXppdomXppDom)
