//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/io/xml/xppdom/XppDom.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/io/xml/xppdom/XppDom.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/thoughtworks/xstream/io/xml/xppdom/Xpp3Dom.h"
#include "com/thoughtworks/xstream/io/xml/xppdom/XppDom.h"
#include "java/io/IOException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/xmlpull/v1/XmlPullParser.h"
#include "org/xmlpull/v1/XmlPullParserException.h"


#line 33
@implementation ComThoughtworksXstreamIoXmlXppdomXppDom


#line 43
- (instancetype)initWithNSString:(NSString *)name {
  if (self = [super init]) {
    
#line 44
    self->name_ = name;
    
#line 45
    childList_ = [[JavaUtilArrayList alloc] init];
    
#line 46
    childMap_ = [[JavaUtilHashMap alloc] init];
  }
  return self;
}


#line 53
- (NSString *)getName {
  
#line 54
  return name_;
}


#line 61
- (NSString *)getValue {
  
#line 62
  return value_;
}


#line 65
- (void)setValueWithNSString:(NSString *)value {
  
#line 66
  self->value_ = value;
}


#line 73
- (IOSObjectArray *)getAttributeNames {
  
#line 74
  if (nil == attributes_) {
    return [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSString class]]];
  }
  else {
    
#line 77
    return (IOSObjectArray *) check_class_cast([((id<JavaUtilSet>) nil_chk([attributes_ keySet])) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSString class]]]], [IOSObjectArray class]);
  }
}


#line 81
- (NSString *)getAttributeWithNSString:(NSString *)name {
  
#line 82
  return (nil != attributes_) ? (NSString *) check_class_cast([attributes_ getWithId:name], [NSString class]) : nil;
}


#line 85
- (void)setAttributeWithNSString:(NSString *)name
                    withNSString:(NSString *)value {
  
#line 86
  if (nil == attributes_) {
    attributes_ = [[JavaUtilHashMap alloc] init];
  }
  
#line 90
  (void) [((id<JavaUtilMap>) nil_chk(attributes_)) putWithId:name withId:value];
}

- (ComThoughtworksXstreamIoXmlXppdomXppDom *)getChildWithInt:(jint)i {
  
#line 98
  return (ComThoughtworksXstreamIoXmlXppdomXppDom *) check_class_cast([((id<JavaUtilList>) nil_chk(childList_)) getWithInt:i], [ComThoughtworksXstreamIoXmlXppdomXppDom class]);
}


#line 101
- (ComThoughtworksXstreamIoXmlXppdomXppDom *)getChildWithNSString:(NSString *)name {
  
#line 102
  return (ComThoughtworksXstreamIoXmlXppdomXppDom *) check_class_cast([((id<JavaUtilMap>) nil_chk(childMap_)) getWithId:name], [ComThoughtworksXstreamIoXmlXppdomXppDom class]);
}


#line 105
- (void)addChildWithComThoughtworksXstreamIoXmlXppdomXppDom:(ComThoughtworksXstreamIoXmlXppdomXppDom *)xpp3Dom {
  
#line 106
  [((ComThoughtworksXstreamIoXmlXppdomXppDom *) nil_chk(xpp3Dom)) setParentWithComThoughtworksXstreamIoXmlXppdomXppDom:self];
  [((id<JavaUtilList>) nil_chk(childList_)) addWithId:xpp3Dom];
  (void) [((id<JavaUtilMap>) nil_chk(childMap_)) putWithId:[xpp3Dom getName] withId:xpp3Dom];
}


#line 111
- (IOSObjectArray *)getChildren {
  
#line 112
  if (nil == childList_) {
    return [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[ComThoughtworksXstreamIoXmlXppdomXppDom class]]];
  }
  else {
    
#line 115
    return (IOSObjectArray *) check_class_cast([childList_ toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[ComThoughtworksXstreamIoXmlXppdomXppDom class]]]], [IOSObjectArray class]);
  }
}


#line 119
- (IOSObjectArray *)getChildrenWithNSString:(NSString *)name {
  
#line 120
  if (nil == childList_) {
    return [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[ComThoughtworksXstreamIoXmlXppdomXppDom class]]];
  }
  else {
    
#line 123
    JavaUtilArrayList *children = [[JavaUtilArrayList alloc] init];
    jint size = [self->childList_ size];
    
#line 126
    for (jint i = 0; i < size; i++) {
      ComThoughtworksXstreamIoXmlXppdomXppDom *configuration = (ComThoughtworksXstreamIoXmlXppdomXppDom *) check_class_cast([self->childList_ getWithInt:i], [ComThoughtworksXstreamIoXmlXppdomXppDom class]);
      if ([((NSString *) nil_chk(name)) isEqual:[((ComThoughtworksXstreamIoXmlXppdomXppDom *) nil_chk(configuration)) getName]]) {
        [children addWithId:configuration];
      }
    }
    
#line 133
    return (IOSObjectArray *) check_class_cast([children toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[ComThoughtworksXstreamIoXmlXppdomXppDom class]]]], [IOSObjectArray class]);
  }
}


#line 137
- (jint)getChildCount {
  
#line 138
  if (nil == childList_) {
    return 0;
  }
  
#line 142
  return [((id<JavaUtilList>) nil_chk(childList_)) size];
}


#line 149
- (ComThoughtworksXstreamIoXmlXppdomXppDom *)getParent {
  
#line 150
  return parent_;
}


#line 153
- (void)setParentWithComThoughtworksXstreamIoXmlXppdomXppDom:(ComThoughtworksXstreamIoXmlXppdomXppDom *)parent {
  
#line 154
  self->parent_ = parent;
}


#line 161
- (id)readResolve {
  
#line 162
  childMap_ = [[JavaUtilHashMap alloc] init];
  for (id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(childList_)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    ComThoughtworksXstreamIoXmlXppdomXppDom *element = (ComThoughtworksXstreamIoXmlXppdomXppDom *) check_class_cast([iter next], [ComThoughtworksXstreamIoXmlXppdomXppDom class]);
    (void) [childMap_ putWithId:[((ComThoughtworksXstreamIoXmlXppdomXppDom *) nil_chk(element)) getName] withId:element];
  }
  return self;
}


#line 184
+ (ComThoughtworksXstreamIoXmlXppdomXppDom *)buildWithOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)parser {
  
#line 185
  id<JavaUtilList> elements = [[JavaUtilArrayList alloc] init];
  id<JavaUtilList> values = [[JavaUtilArrayList alloc] init];
  ComThoughtworksXstreamIoXmlXppdomXppDom *node = nil;
  
#line 189
  jint eventType = [((id<OrgXmlpullV1XmlPullParser>) nil_chk(parser)) getEventType];
  while (eventType != OrgXmlpullV1XmlPullParser_END_DOCUMENT) {
    if (eventType == OrgXmlpullV1XmlPullParser_START_TAG) {
      NSString *rawName = [parser getName];
      
#line 195
      ComThoughtworksXstreamIoXmlXppdomXppDom *child = [[ComThoughtworksXstreamIoXmlXppdomXpp3Dom alloc] initWithNSString:rawName];
      
#line 197
      jint depth = [elements size];
      if (depth > 0) {
        ComThoughtworksXstreamIoXmlXppdomXppDom *parent = (ComThoughtworksXstreamIoXmlXppdomXppDom *) check_class_cast([elements getWithInt:depth - 1], [ComThoughtworksXstreamIoXmlXppdomXppDom class]);
        [((ComThoughtworksXstreamIoXmlXppdomXppDom *) nil_chk(parent)) addChildWithComThoughtworksXstreamIoXmlXppdomXppDom:child];
      }
      
#line 203
      [elements addWithId:child];
      [values addWithId:[[JavaLangStringBuffer alloc] init]];
      
#line 206
      jint attributesSize = [parser getAttributeCount];
      for (jint i = 0; i < attributesSize; i++) {
        NSString *name = [parser getAttributeNameWithInt:i];
        NSString *value = [parser getAttributeValueWithInt:i];
        [child setAttributeWithNSString:name withNSString:value];
      }
    }
    else
#line 212
    if (eventType == OrgXmlpullV1XmlPullParser_TEXT) {
      jint depth = [values size] - 1;
      JavaLangStringBuffer *valueBuffer = (JavaLangStringBuffer *) check_class_cast([values getWithInt:depth], [JavaLangStringBuffer class]);
      (void) [((JavaLangStringBuffer *) nil_chk(valueBuffer)) appendWithNSString:[parser getText]];
    }
    else
#line 216
    if (eventType == OrgXmlpullV1XmlPullParser_END_TAG) {
      jint depth = [elements size] - 1;
      ComThoughtworksXstreamIoXmlXppdomXppDom *finalNode = (ComThoughtworksXstreamIoXmlXppdomXppDom *) check_class_cast([elements removeWithInt:depth], [ComThoughtworksXstreamIoXmlXppdomXppDom class]);
      NSString *accumulatedValue = [nil_chk(([values removeWithInt:depth])) description];
      
#line 221
      NSString *finishedValue;
      if (0 == ((jint) [((NSString *) nil_chk(accumulatedValue)) length])) {
        finishedValue = nil;
      }
      else {
        
#line 225
        finishedValue = accumulatedValue;
      }
      
#line 228
      [((ComThoughtworksXstreamIoXmlXppdomXppDom *) nil_chk(finalNode)) setValueWithNSString:finishedValue];
      if (0 == depth) {
        node = finalNode;
      }
    }
    
#line 234
    eventType = [parser next];
  }
  
#line 237
  return node;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamIoXmlXppdomXppDom *)other {
  [super copyAllFieldsTo:other];
  other->attributes_ = attributes_;
  other->childList_ = childList_;
  other->childMap_ = childMap_;
  other->name_ = name_;
  other->parent_ = parent_;
  other->value_ = value_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "XppDom", NULL, 0x1, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getValue", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setValueWithNSString:", "setValue", "V", 0x1, NULL },
    { "getAttributeNames", NULL, "[Ljava.lang.String;", 0x1, NULL },
    { "getAttributeWithNSString:", "getAttribute", "Ljava.lang.String;", 0x1, NULL },
    { "setAttributeWithNSString:withNSString:", "setAttribute", "V", 0x1, NULL },
    { "getChildWithInt:", "getChild", "Lcom.thoughtworks.xstream.io.xml.xppdom.XppDom;", 0x1, NULL },
    { "getChildWithNSString:", "getChild", "Lcom.thoughtworks.xstream.io.xml.xppdom.XppDom;", 0x1, NULL },
    { "addChildWithComThoughtworksXstreamIoXmlXppdomXppDom:", "addChild", "V", 0x1, NULL },
    { "getChildren", NULL, "[Lcom.thoughtworks.xstream.io.xml.xppdom.XppDom;", 0x1, NULL },
    { "getChildrenWithNSString:", "getChildren", "[Lcom.thoughtworks.xstream.io.xml.xppdom.XppDom;", 0x1, NULL },
    { "getChildCount", NULL, "I", 0x1, NULL },
    { "getParent", NULL, "Lcom.thoughtworks.xstream.io.xml.xppdom.XppDom;", 0x1, NULL },
    { "setParentWithComThoughtworksXstreamIoXmlXppdomXppDom:", "setParent", "V", 0x1, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x0, NULL },
    { "buildWithOrgXmlpullV1XmlPullParser:", "build", "Lcom.thoughtworks.xstream.io.xml.xppdom.XppDom;", 0x9, "Lorg.xmlpull.v1.XmlPullParserException;Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = ComThoughtworksXstreamIoXmlXppdomXppDom_serialVersionUID },
    { "name_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "value_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "attributes_", NULL, 0x2, "Ljava.util.Map;", NULL,  },
    { "childList_", NULL, 0x2, "Ljava.util.List;", NULL,  },
    { "childMap_", NULL, 0x82, "Ljava.util.Map;", NULL,  },
    { "parent_", NULL, 0x2, "Lcom.thoughtworks.xstream.io.xml.xppdom.XppDom;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoXmlXppdomXppDom = { "XppDom", "com.thoughtworks.xstream.io.xml.xppdom", NULL, 0x1, 17, methods, 7, fields, 0, NULL};
  return &_ComThoughtworksXstreamIoXmlXppdomXppDom;
}

@end
