//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/io/naming/StaticNameCoder.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/io/naming/StaticNameCoder.java"

#include "com/thoughtworks/xstream/io/naming/StaticNameCoder.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"


#line 30
@implementation ComThoughtworksXstreamIoNamingStaticNameCoder


#line 45
- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)java2Node
                    withJavaUtilMap:(id<JavaUtilMap>)java2Attribute {
  if (self = [super init]) {
    
#line 46
    self->java2Node_ = [[JavaUtilHashMap alloc] initWithJavaUtilMap:java2Node];
    
#line 47
    if (java2Node == java2Attribute || java2Attribute == nil) {
      self->java2Attribute_ = self->java2Node_;
    }
    else {
      
#line 50
      self->java2Attribute_ = [[JavaUtilHashMap alloc] initWithJavaUtilMap:java2Attribute];
    }
    
#line 52
    (void) [self readResolve];
  }
  return self;
}


#line 58
- (NSString *)decodeAttributeWithNSString:(NSString *)attributeName {
  
#line 59
  NSString *name = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(attribute2Java_)) getWithId:attributeName], [NSString class]);
  return name == nil ? attributeName : name;
}


#line 66
- (NSString *)decodeNodeWithNSString:(NSString *)nodeName {
  
#line 67
  NSString *name = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(node2Java_)) getWithId:nodeName], [NSString class]);
  return name == nil ? nodeName : name;
}


#line 74
- (NSString *)encodeAttributeWithNSString:(NSString *)name {
  
#line 75
  NSString *friendlyName = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(java2Attribute_)) getWithId:name], [NSString class]);
  return friendlyName == nil ? name : friendlyName;
}


#line 82
- (NSString *)encodeNodeWithNSString:(NSString *)name {
  
#line 83
  NSString *friendlyName = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(java2Node_)) getWithId:name], [NSString class]);
  return friendlyName == nil ? name : friendlyName;
}


#line 87
- (id)readResolve {
  
#line 88
  node2Java_ = [self invertMapWithJavaUtilMap:java2Node_];
  if (java2Node_ == java2Attribute_) {
    attribute2Java_ = node2Java_;
  }
  else {
    
#line 92
    attribute2Java_ = [self invertMapWithJavaUtilMap:java2Attribute_];
  }
  return self;
}


#line 97
- (id<JavaUtilMap>)invertMapWithJavaUtilMap:(id<JavaUtilMap>)map {
  
#line 98
  id<JavaUtilMap> inverseMap = [[JavaUtilHashMap alloc] initWithInt:[((id<JavaUtilMap>) nil_chk(map)) size]];
  for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([map entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) check_protocol_cast([iter next], @protocol(JavaUtilMap_Entry));
    (void) [inverseMap putWithId:(NSString *) check_class_cast([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue], [NSString class]) withId:(NSString *) check_class_cast([entry_ getKey], [NSString class])];
  }
  return inverseMap;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamIoNamingStaticNameCoder *)other {
  [super copyAllFieldsTo:other];
  other->attribute2Java_ = attribute2Java_;
  other->java2Attribute_ = java2Attribute_;
  other->java2Node_ = java2Node_;
  other->node2Java_ = node2Java_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilMap:withJavaUtilMap:", "StaticNameCoder", NULL, 0x1, NULL },
    { "decodeAttributeWithNSString:", "decodeAttribute", "Ljava.lang.String;", 0x1, NULL },
    { "decodeNodeWithNSString:", "decodeNode", "Ljava.lang.String;", 0x1, NULL },
    { "encodeAttributeWithNSString:", "encodeAttribute", "Ljava.lang.String;", 0x1, NULL },
    { "encodeNodeWithNSString:", "encodeNode", "Ljava.lang.String;", 0x1, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
    { "invertMapWithJavaUtilMap:", "invertMap", "Ljava.util.Map;", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "java2Node_", NULL, 0x12, "Ljava.util.Map;", NULL,  },
    { "java2Attribute_", NULL, 0x12, "Ljava.util.Map;", NULL,  },
    { "node2Java_", NULL, 0x82, "Ljava.util.Map;", NULL,  },
    { "attribute2Java_", NULL, 0x82, "Ljava.util.Map;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoNamingStaticNameCoder = { "StaticNameCoder", "com.thoughtworks.xstream.io.naming", NULL, 0x1, 7, methods, 4, fields, 0, NULL};
  return &_ComThoughtworksXstreamIoNamingStaticNameCoder;
}

@end
