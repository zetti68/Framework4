//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/io/StatefulWriter.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/io/StatefulWriter.java"

#include "IOSClass.h"
#include "com/thoughtworks/xstream/core/util/FastStack.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamWriter.h"
#include "com/thoughtworks/xstream/io/StatefulWriter.h"
#include "com/thoughtworks/xstream/io/StreamException.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"


#line 30
@implementation ComThoughtworksXstreamIoStatefulWriter

jint ComThoughtworksXstreamIoStatefulWriter_STATE_OPEN_ = 
#line 37
0;
jint ComThoughtworksXstreamIoStatefulWriter_STATE_NODE_START_ = 
#line 43
1;
jint ComThoughtworksXstreamIoStatefulWriter_STATE_VALUE_ = 
#line 49
2;
jint ComThoughtworksXstreamIoStatefulWriter_STATE_NODE_END_ = 
#line 55
3;
jint ComThoughtworksXstreamIoStatefulWriter_STATE_CLOSED_ = 
#line 61
4;


#line 73
- (instancetype)initWithComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)wrapped {
  if (self =
#line 74
  [super initWithComThoughtworksXstreamIoHierarchicalStreamWriter:wrapped]) {
    state__ =
#line 63
    ComThoughtworksXstreamIoStatefulWriter_STATE_OPEN_;
    
#line 75
    attributes_ = [[ComThoughtworksXstreamCoreUtilFastStack alloc] initWithInt:16];
  }
  return self;
}


#line 78
- (void)startNodeWithNSString:(NSString *)name {
  
#line 79
  [self startNodeCommon];
  [super startNodeWithNSString:name];
}


#line 83
- (void)startNodeWithNSString:(NSString *)name
                 withIOSClass:(IOSClass *)clazz {
  
#line 84
  [self startNodeCommon];
  [super startNodeWithNSString:name withIOSClass:clazz];
}


#line 88
- (void)startNodeCommon {
  
#line 89
  [self checkClosed];
  if (state__ == ComThoughtworksXstreamIoStatefulWriter_STATE_VALUE_) {
    
#line 92
    @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithJavaLangThrowable:[[JavaLangIllegalStateException alloc] initWithNSString:@"Opening node after writing text"]];
  }
  state__ = ComThoughtworksXstreamIoStatefulWriter_STATE_NODE_START_;
  ++balance_;
  (void) [((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(attributes_)) pushWithId:[[JavaUtilHashSet alloc] init]];
}


#line 99
- (void)addAttributeWithNSString:(NSString *)name
                    withNSString:(NSString *)value {
  
#line 100
  [self checkClosed];
  if (state__ != ComThoughtworksXstreamIoStatefulWriter_STATE_NODE_START_) {
    @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithJavaLangThrowable:[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$$$", @"Writing attribute '",
#line 103
    name, @"' without an opened node")]];
  }
  
#line 106
  id<JavaUtilSet> currentAttributes = (id<JavaUtilSet>) check_protocol_cast([((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(attributes_)) peek], @protocol(JavaUtilSet));
  if ([((id<JavaUtilSet>) nil_chk(currentAttributes)) containsWithId:name]) {
    @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithJavaLangThrowable:[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$$$", @"Writing attribute '",
#line 109
    name, @"' twice")]];
  }
  
#line 112
  [currentAttributes addWithId:name];
  [super addAttributeWithNSString:name withNSString:value];
}


#line 116
- (void)setValueWithNSString:(NSString *)text {
  
#line 117
  [self checkClosed];
  if (state__ != ComThoughtworksXstreamIoStatefulWriter_STATE_NODE_START_) {
    
#line 120
    @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithJavaLangThrowable:[[JavaLangIllegalStateException alloc] initWithNSString:
#line 121
    @"Writing text without an opened node"]];
  }
  state__ = ComThoughtworksXstreamIoStatefulWriter_STATE_VALUE_;
  [super setValueWithNSString:text];
}


#line 127
- (void)endNode {
  
#line 128
  [self checkClosed];
  if (balance_-- == 0) {
    @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithJavaLangThrowable:[[JavaLangIllegalStateException alloc] initWithNSString:@"Unbalanced node"]];
  }
  [((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(attributes_)) popSilently];
  state__ = ComThoughtworksXstreamIoStatefulWriter_STATE_NODE_END_;
  [super endNode];
}


#line 137
- (void)flush {
  
#line 138
  [self checkClosed];
  [super flush];
}


#line 142
- (void)close {
  
#line 143
  if (state__ != ComThoughtworksXstreamIoStatefulWriter_STATE_NODE_END_ && state__ != ComThoughtworksXstreamIoStatefulWriter_STATE_OPEN_) {
  }
  
#line 147
  state__ = ComThoughtworksXstreamIoStatefulWriter_STATE_CLOSED_;
  [super close];
}


#line 151
- (void)checkClosed {
  
#line 152
  if (state__ == ComThoughtworksXstreamIoStatefulWriter_STATE_CLOSED_) {
    @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithJavaLangThrowable:[[JavaIoIOException alloc] initWithNSString:@"Writing on a closed stream"]];
  }
}


#line 168
- (jint)state {
  
#line 169
  return state__;
}


#line 172
- (id)readResolve {
  
#line 173
  attributes_ = [[ComThoughtworksXstreamCoreUtilFastStack alloc] initWithInt:16];
  return self;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamIoStatefulWriter *)other {
  [super copyAllFieldsTo:other];
  other->attributes_ = attributes_;
  other->balance_ = balance_;
  other->state__ = state__;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamIoHierarchicalStreamWriter:", "StatefulWriter", NULL, 0x1, NULL },
    { "startNodeWithNSString:", "startNode", "V", 0x1, NULL },
    { "startNodeWithNSString:withIOSClass:", "startNode", "V", 0x1, NULL },
    { "startNodeCommon", NULL, "V", 0x2, NULL },
    { "addAttributeWithNSString:withNSString:", "addAttribute", "V", 0x1, NULL },
    { "setValueWithNSString:", "setValue", "V", 0x1, NULL },
    { "endNode", NULL, "V", 0x1, NULL },
    { "flush", NULL, "V", 0x1, NULL },
    { "close", NULL, "V", 0x1, NULL },
    { "checkClosed", NULL, "V", 0x2, NULL },
    { "state", NULL, "I", 0x1, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "STATE_OPEN_", NULL, 0x9, "I", &ComThoughtworksXstreamIoStatefulWriter_STATE_OPEN_,  },
    { "STATE_NODE_START_", NULL, 0x9, "I", &ComThoughtworksXstreamIoStatefulWriter_STATE_NODE_START_,  },
    { "STATE_VALUE_", NULL, 0x9, "I", &ComThoughtworksXstreamIoStatefulWriter_STATE_VALUE_,  },
    { "STATE_NODE_END_", NULL, 0x9, "I", &ComThoughtworksXstreamIoStatefulWriter_STATE_NODE_END_,  },
    { "STATE_CLOSED_", NULL, 0x9, "I", &ComThoughtworksXstreamIoStatefulWriter_STATE_CLOSED_,  },
    { "state__", "state", 0x82, "I", NULL,  },
    { "balance_", NULL, 0x82, "I", NULL,  },
    { "attributes_", NULL, 0x82, "Lcom.thoughtworks.xstream.core.util.FastStack;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoStatefulWriter = { "StatefulWriter", "com.thoughtworks.xstream.io", NULL, 0x1, 12, methods, 8, fields, 0, NULL};
  return &_ComThoughtworksXstreamIoStatefulWriter;
}

@end
