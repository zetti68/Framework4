//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/io/AbstractDriver.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/io/AbstractDriver.java"

#include "com/thoughtworks/xstream/io/AbstractDriver.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamDriver.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/io/StreamException.h"
#include "com/thoughtworks/xstream/io/naming/NameCoder.h"
#include "com/thoughtworks/xstream/io/naming/NoNameCoder.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/net/URL.h"

#pragma clang diagnostic ignored "-Wprotocol"


#line 32
@implementation ComThoughtworksXstreamIoAbstractDriver


#line 39
- (instancetype)init {
  return
#line 40
  [self initComThoughtworksXstreamIoAbstractDriverWithComThoughtworksXstreamIoNamingNameCoder:[[ComThoughtworksXstreamIoNamingNoNameCoder alloc] init]];
}


#line 48
- (instancetype)initComThoughtworksXstreamIoAbstractDriverWithComThoughtworksXstreamIoNamingNameCoder:(id<ComThoughtworksXstreamIoNamingNameCoder>)nameCoder {
  if (self = [super init]) {
    
#line 49
    self->replacer_ = nameCoder;
  }
  return self;
}

- (instancetype)initWithComThoughtworksXstreamIoNamingNameCoder:(id<ComThoughtworksXstreamIoNamingNameCoder>)nameCoder {
  return [self initComThoughtworksXstreamIoAbstractDriverWithComThoughtworksXstreamIoNamingNameCoder:
#line 48
nameCoder];
}


#line 52
- (id<ComThoughtworksXstreamIoNamingNameCoder>)getNameCoder {
  
#line 53
  return replacer_;
}


#line 59
- (id<ComThoughtworksXstreamIoHierarchicalStreamReader>)createReaderWithJavaNetURL:(JavaNetURL *)inArg {
  
#line 60
  JavaIoInputStream *stream = nil;
  @try {
    stream = [((JavaNetURL *) nil_chk(inArg)) openStream];
  }
  @catch (
#line 63
  JavaIoIOException *e) {
    @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithJavaLangThrowable:e];
  }
  return [self createReaderWithJavaIoInputStream:stream];
}


#line 72
- (id<ComThoughtworksXstreamIoHierarchicalStreamReader>)createReaderWithJavaIoFile:(JavaIoFile *)inArg {
  
#line 73
  @try {
    return [self createReaderWithJavaIoInputStream:[[JavaIoFileInputStream alloc] initWithJavaIoFile:inArg]];
  }
  @catch (
#line 75
  JavaIoFileNotFoundException *e) {
    @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithJavaLangThrowable:e];
  }
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamIoAbstractDriver *)other {
  [super copyAllFieldsTo:other];
  other->replacer_ = replacer_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "AbstractDriver", NULL, 0x1, NULL },
    { "initWithComThoughtworksXstreamIoNamingNameCoder:", "AbstractDriver", NULL, 0x1, NULL },
    { "getNameCoder", NULL, "Lcom.thoughtworks.xstream.io.naming.NameCoder;", 0x4, NULL },
    { "createReaderWithJavaNetURL:", "createReader", "Lcom.thoughtworks.xstream.io.HierarchicalStreamReader;", 0x1, NULL },
    { "createReaderWithJavaIoFile:", "createReader", "Lcom.thoughtworks.xstream.io.HierarchicalStreamReader;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "replacer_", NULL, 0x2, "Lcom.thoughtworks.xstream.io.naming.NameCoder;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoAbstractDriver = { "AbstractDriver", "com.thoughtworks.xstream.io", NULL, 0x401, 5, methods, 1, fields, 0, NULL};
  return &_ComThoughtworksXstreamIoAbstractDriver;
}

@end
