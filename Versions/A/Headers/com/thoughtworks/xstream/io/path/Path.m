//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/io/path/Path.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/io/path/Path.java"

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/core/util/FastStack.h"
#include "com/thoughtworks/xstream/io/path/Path.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface ComThoughtworksXstreamIoPathPath () {
 @public
  IOSObjectArray *chunks_;
  NSString *pathAsString_;
  NSString *pathExplicit_;
}

- (NSString *)normalizeWithNSString:(NSString *)s
                            withInt:(jint)start
                            withInt:(jint)end;

- (jint)depthOfPathDivergenceWithNSStringArray:(IOSObjectArray *)path1
                             withNSStringArray:(IOSObjectArray *)path2;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoPathPath, chunks_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoPathPath, pathAsString_, NSString *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoPathPath, pathExplicit_, NSString *)

static ComThoughtworksXstreamIoPathPath *ComThoughtworksXstreamIoPathPath_DOT_;
J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamIoPathPath, DOT_, ComThoughtworksXstreamIoPathPath *)

__attribute__((unused)) static NSString *ComThoughtworksXstreamIoPathPath_normalizeWithNSString_withInt_withInt_(ComThoughtworksXstreamIoPathPath *self, NSString *s, jint start, jint end);

__attribute__((unused)) static jint ComThoughtworksXstreamIoPathPath_depthOfPathDivergenceWithNSStringArray_withNSStringArray_(ComThoughtworksXstreamIoPathPath *self, IOSObjectArray *path1, IOSObjectArray *path2);

J2OBJC_INITIALIZED_DEFN(ComThoughtworksXstreamIoPathPath)


#line 61
@implementation ComThoughtworksXstreamIoPathPath


#line 68
- (instancetype)initWithNSString:(NSString *)pathAsString {
  ComThoughtworksXstreamIoPathPath_initWithNSString_(self, pathAsString);
  return self;
}


#line 85
- (NSString *)normalizeWithNSString:(NSString *)s
                            withInt:(jint)start
                            withInt:(jint)end {
  return ComThoughtworksXstreamIoPathPath_normalizeWithNSString_withInt_withInt_(self, s, start, end);
}


#line 98
- (instancetype)initWithNSStringArray:(IOSObjectArray *)chunks {
  ComThoughtworksXstreamIoPathPath_initWithNSStringArray_(self, chunks);
  return self;
}


#line 102
- (NSString *)description {
  if (pathAsString_ == nil) {
    JavaLangStringBuffer *buffer = new_JavaLangStringBuffer_init();
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(chunks_))->size_; i++) {
      if (i > 0) (void) [buffer appendWithChar:'/'];
      (void) [buffer appendWithNSString:IOSObjectArray_Get(chunks_, i)];
    }
    pathAsString_ = [buffer description];
  }
  return pathAsString_;
}

- (NSString *)explicit__ {
  if (pathExplicit_ == nil) {
    JavaLangStringBuffer *buffer = new_JavaLangStringBuffer_init();
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(chunks_))->size_; i++) {
      if (i > 0) (void) [buffer appendWithChar:'/'];
      NSString *chunk = IOSObjectArray_Get(chunks_, i);
      (void) [buffer appendWithNSString:chunk];
      jint length = ((jint) [((NSString *) nil_chk(chunk)) length]);
      if (length > 0) {
        jchar c = [chunk charAtWithInt:length - 1];
        if (c != ']' && c != '.') {
          (void) [buffer appendWithNSString:@"[1]"];
        }
      }
    }
    pathExplicit_ = [buffer description];
  }
  return pathExplicit_;
}

- (jboolean)isEqual:(id)o {
  if (self == o) return YES;
  if (!([o isKindOfClass:[ComThoughtworksXstreamIoPathPath class]])) return NO;
  
#line 138
  ComThoughtworksXstreamIoPathPath *other = (ComThoughtworksXstreamIoPathPath *) check_class_cast(o, [ComThoughtworksXstreamIoPathPath class]);
  if (((IOSObjectArray *) nil_chk(chunks_))->size_ != ((ComThoughtworksXstreamIoPathPath *) nil_chk(other))->chunks_->size_) return NO;
  for (jint i = 0; i < chunks_->size_; i++) {
    if (![((NSString *) nil_chk(IOSObjectArray_Get(chunks_, i))) isEqual:IOSObjectArray_Get(other->chunks_, i)]) return NO;
  }
  
#line 144
  return YES;
}


#line 147
- (NSUInteger)hash {
  jint result = 543645643;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(chunks_))->size_; i++) {
    result = 29 * result + ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(chunks_, i))) hash]);
  }
  return result;
}

- (ComThoughtworksXstreamIoPathPath *)relativeToWithComThoughtworksXstreamIoPathPath:(ComThoughtworksXstreamIoPathPath *)that {
  jint depthOfPathDivergence = ComThoughtworksXstreamIoPathPath_depthOfPathDivergenceWithNSStringArray_withNSStringArray_(self, chunks_, ((ComThoughtworksXstreamIoPathPath *) nil_chk(that))->chunks_);
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(chunks_))->size_ + that->chunks_->size_ - 2 * depthOfPathDivergence type:NSString_class_()];
  jint count = 0;
  
#line 160
  for (jint i = depthOfPathDivergence; i < chunks_->size_; i++) {
    (void) IOSObjectArray_Set(result, count++, @"..");
  }
  for (jint j = depthOfPathDivergence; j < that->chunks_->size_; j++) {
    (void) IOSObjectArray_Set(result, count++, IOSObjectArray_Get(that->chunks_, j));
  }
  
#line 167
  if (count == 0) {
    return ComThoughtworksXstreamIoPathPath_DOT_;
  }
  else {
    
#line 170
    return new_ComThoughtworksXstreamIoPathPath_initWithNSStringArray_(result);
  }
}


#line 174
- (jint)depthOfPathDivergenceWithNSStringArray:(IOSObjectArray *)path1
                             withNSStringArray:(IOSObjectArray *)path2 {
  return ComThoughtworksXstreamIoPathPath_depthOfPathDivergenceWithNSStringArray_withNSStringArray_(self, path1, path2);
}


#line 184
- (ComThoughtworksXstreamIoPathPath *)applyWithComThoughtworksXstreamIoPathPath:(ComThoughtworksXstreamIoPathPath *)relativePath {
  ComThoughtworksXstreamCoreUtilFastStack *absoluteStack = new_ComThoughtworksXstreamCoreUtilFastStack_initWithInt_(16);
  
#line 187
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(chunks_))->size_; i++) {
    (void) [absoluteStack pushWithId:IOSObjectArray_Get(chunks_, i)];
  }
  
#line 191
  for (jint i = 0; i < ((ComThoughtworksXstreamIoPathPath *) nil_chk(relativePath))->chunks_->size_; i++) {
    NSString *relativeChunk = IOSObjectArray_Get(relativePath->chunks_, i);
    if ([((NSString *) nil_chk(relativeChunk)) isEqual:@".."]) {
      (void) [absoluteStack pop];
    }
    else
#line 195
    if (![relativeChunk isEqual:@"."]) {
      (void) [absoluteStack pushWithId:relativeChunk];
    }
  }
  
#line 200
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:[absoluteStack size] type:NSString_class_()];
  for (jint i = 0; i < result->size_; i++) {
    (void) IOSObjectArray_Set(result, i, (NSString *) check_class_cast([absoluteStack getWithInt:i], [NSString class]));
  }
  
#line 205
  return new_ComThoughtworksXstreamIoPathPath_initWithNSStringArray_(result);
}


#line 208
- (jboolean)isAncestorWithComThoughtworksXstreamIoPathPath:(ComThoughtworksXstreamIoPathPath *)child {
  if (child == nil || ((IOSObjectArray *) nil_chk(child->chunks_))->size_ < chunks_->size_) {
    return NO;
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(chunks_))->size_; i++) {
    if (![((NSString *) nil_chk(IOSObjectArray_Get(chunks_, i))) isEqual:IOSObjectArray_Get(((ComThoughtworksXstreamIoPathPath *) nil_chk(child))->chunks_, i)]) {
      return NO;
    }
  }
  return YES;
}

+ (void)initialize {
  if (self == [ComThoughtworksXstreamIoPathPath class]) {
    ComThoughtworksXstreamIoPathPath_DOT_ = new_ComThoughtworksXstreamIoPathPath_initWithNSStringArray_([IOSObjectArray newArrayWithObjects:(id[]){
#line 66
      @"." } count:1 type:NSString_class_()]);
      J2OBJC_SET_INITIALIZED(ComThoughtworksXstreamIoPathPath)
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "Path", NULL, 0x1, NULL, NULL },
    { "normalizeWithNSString:withInt:withInt:", "normalize", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "initWithNSStringArray:", "Path", NULL, 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "explicit__", "explicit", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "relativeToWithComThoughtworksXstreamIoPathPath:", "relativeTo", "Lcom.thoughtworks.xstream.io.path.Path;", 0x1, NULL, NULL },
    { "depthOfPathDivergenceWithNSStringArray:withNSStringArray:", "depthOfPathDivergence", "I", 0x2, NULL, NULL },
    { "applyWithComThoughtworksXstreamIoPathPath:", "apply", "Lcom.thoughtworks.xstream.io.path.Path;", 0x1, NULL, NULL },
    { "isAncestorWithComThoughtworksXstreamIoPathPath:", "isAncestor", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "chunks_", NULL, 0x12, "[Ljava.lang.String;", NULL, NULL,  },
    { "pathAsString_", NULL, 0x82, "Ljava.lang.String;", NULL, NULL,  },
    { "pathExplicit_", NULL, 0x82, "Ljava.lang.String;", NULL, NULL,  },
    { "DOT_", NULL, 0x1a, "Lcom.thoughtworks.xstream.io.path.Path;", &ComThoughtworksXstreamIoPathPath_DOT_, NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoPathPath = { 2, "Path", "com.thoughtworks.xstream.io.path", NULL, 0x1, 11, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamIoPathPath;
}

@end


#line 68
void ComThoughtworksXstreamIoPathPath_initWithNSString_(ComThoughtworksXstreamIoPathPath *self, NSString *pathAsString) {
  (void) NSObject_init(self);
  id<JavaUtilList> result = new_JavaUtilArrayList_init();
  jint currentIndex = 0;
  jint nextSeparator;
  self->pathAsString_ = pathAsString;
  while ((nextSeparator = [((NSString *) nil_chk(pathAsString)) indexOf:'/' fromIndex:currentIndex]) != -1) {
    
#line 76
    [result addWithId:ComThoughtworksXstreamIoPathPath_normalizeWithNSString_withInt_withInt_(self, pathAsString, currentIndex, nextSeparator)];
    currentIndex = nextSeparator + 1;
  }
  [result addWithId:ComThoughtworksXstreamIoPathPath_normalizeWithNSString_withInt_withInt_(self, pathAsString, currentIndex, ((jint) [pathAsString length]))];
  IOSObjectArray *arr = [IOSObjectArray newArrayWithLength:[result size] type:NSString_class_()];
  (void) [result toArrayWithNSObjectArray:arr];
  self->chunks_ = arr;
}


#line 68
ComThoughtworksXstreamIoPathPath *new_ComThoughtworksXstreamIoPathPath_initWithNSString_(NSString *pathAsString) {
  ComThoughtworksXstreamIoPathPath *self = [ComThoughtworksXstreamIoPathPath alloc];
  ComThoughtworksXstreamIoPathPath_initWithNSString_(self, pathAsString);
  return self;
}


#line 85
NSString *ComThoughtworksXstreamIoPathPath_normalizeWithNSString_withInt_withInt_(ComThoughtworksXstreamIoPathPath *self, NSString *s, jint start, jint end) {
  if (end - start > 3 &&
#line 87
  [((NSString *) nil_chk(s)) charAtWithInt:end - 3] == '[' &&
#line 88
  [s charAtWithInt:end - 2] == '1' &&
#line 89
  [s charAtWithInt:end - 1] == ']') {
    self->pathAsString_ = nil;
    return [s substring:start endIndex:end - 3];
  }
  else {
    
#line 93
    return [((NSString *) nil_chk(s)) substring:start endIndex:end];
  }
}


#line 98
void ComThoughtworksXstreamIoPathPath_initWithNSStringArray_(ComThoughtworksXstreamIoPathPath *self, IOSObjectArray *chunks) {
  (void) NSObject_init(self);
  
#line 99
  self->chunks_ = chunks;
}


#line 98
ComThoughtworksXstreamIoPathPath *new_ComThoughtworksXstreamIoPathPath_initWithNSStringArray_(IOSObjectArray *chunks) {
  ComThoughtworksXstreamIoPathPath *self = [ComThoughtworksXstreamIoPathPath alloc];
  ComThoughtworksXstreamIoPathPath_initWithNSStringArray_(self, chunks);
  return self;
}


#line 174
jint ComThoughtworksXstreamIoPathPath_depthOfPathDivergenceWithNSStringArray_withNSStringArray_(ComThoughtworksXstreamIoPathPath *self, IOSObjectArray *path1, IOSObjectArray *path2) {
  jint minLength = JavaLangMath_minWithInt_withInt_(((IOSObjectArray *) nil_chk(path1))->size_, ((IOSObjectArray *) nil_chk(path2))->size_);
  for (jint i = 0; i < minLength; i++) {
    if (![((NSString *) nil_chk(IOSObjectArray_Get(path1, i))) isEqual:IOSObjectArray_Get(path2, i)]) {
      return i;
    }
  }
  return minLength;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamIoPathPath)
