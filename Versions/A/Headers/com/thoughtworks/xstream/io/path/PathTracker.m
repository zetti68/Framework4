//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/io/path/PathTracker.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/io/path/PathTracker.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/io/path/Path.h"
#include "com/thoughtworks/xstream/io/path/PathTracker.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@interface ComThoughtworksXstreamIoPathPathTracker () {
 @public
  jint pointer_;
  jint capacity_;
  IOSObjectArray *pathStack_;
  IOSObjectArray *indexMapStack_;
  ComThoughtworksXstreamIoPathPath *currentPath_;
}

- (void)resizeStacksWithInt:(jint)newCapacity;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoPathPathTracker, pathStack_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoPathPathTracker, indexMapStack_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamIoPathPathTracker, currentPath_, ComThoughtworksXstreamIoPathPath *)

__attribute__((unused)) static void ComThoughtworksXstreamIoPathPathTracker_resizeStacksWithInt_(ComThoughtworksXstreamIoPathPathTracker *self, jint newCapacity);


#line 49
@implementation ComThoughtworksXstreamIoPathPathTracker


#line 58
- (instancetype)init {
  ComThoughtworksXstreamIoPathPathTracker_init(self);
  return self;
}


#line 69
- (instancetype)initWithInt:(jint)initialCapacity {
  ComThoughtworksXstreamIoPathPathTracker_initWithInt_(self, initialCapacity);
  return self;
}


#line 81
- (void)pushElementWithNSString:(NSString *)name {
  if (pointer_ + 1 >= capacity_) {
    ComThoughtworksXstreamIoPathPathTracker_resizeStacksWithInt_(self, capacity_ * 2);
  }
  (void) IOSObjectArray_Set(nil_chk(pathStack_), pointer_, name);
  id<JavaUtilMap> indexMap = IOSObjectArray_Get(nil_chk(indexMapStack_), pointer_);
  if (indexMap == nil) {
    indexMap = new_JavaUtilHashMap_init();
    (void) IOSObjectArray_Set(indexMapStack_, pointer_, indexMap);
  }
  if ([((id<JavaUtilMap>) nil_chk(indexMap)) containsKeyWithId:name]) {
    (void) [indexMap putWithId:name withId:JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast([indexMap getWithId:name], [JavaLangInteger class])))) intValue] + 1)];
  }
  else {
    
#line 94
    (void) [indexMap putWithId:name withId:JavaLangInteger_valueOfWithInt_(1)];
  }
  pointer_++;
  currentPath_ = nil;
}

- (void)popElement {
  (void) IOSObjectArray_Set(nil_chk(indexMapStack_), pointer_, nil);
  (void) IOSObjectArray_Set(nil_chk(pathStack_), pointer_, nil);
  currentPath_ = nil;
  pointer_--;
}


#line 116
- (NSString *)peekElement {
  return [self peekElementWithInt:0];
}


#line 130
- (NSString *)peekElementWithInt:(jint)i {
  if (i < -pointer_ || i > 0) {
    @throw new_JavaLangArrayIndexOutOfBoundsException_initWithInt_(i);
  }
  jint idx = pointer_ + i - 1;
  NSString *name;
  JavaLangInteger *integer = ((JavaLangInteger *) check_class_cast([((id<JavaUtilMap>) nil_chk(IOSObjectArray_Get(nil_chk(indexMapStack_), idx))) getWithId:IOSObjectArray_Get(nil_chk(pathStack_), idx)], [JavaLangInteger class]));
  jint index = [((JavaLangInteger *) nil_chk(integer)) intValue];
  if (index > 1) {
    JavaLangStringBuffer *chunk = new_JavaLangStringBuffer_initWithInt_(((jint) [((NSString *) nil_chk(IOSObjectArray_Get(pathStack_, idx))) length]) + 6);
    (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([chunk appendWithNSString:IOSObjectArray_Get(pathStack_, idx)])) appendWithChar:'['])) appendWithInt:index])) appendWithChar:']'];
    name = [chunk description];
  }
  else {
    
#line 143
    name = IOSObjectArray_Get(pathStack_, idx);
  }
  return name;
}


#line 154
- (jint)depth {
  return pointer_;
}

- (void)resizeStacksWithInt:(jint)newCapacity {
  ComThoughtworksXstreamIoPathPathTracker_resizeStacksWithInt_(self, newCapacity);
}


#line 172
- (ComThoughtworksXstreamIoPathPath *)getPath {
  if (currentPath_ == nil) {
    IOSObjectArray *chunks = [IOSObjectArray newArrayWithLength:pointer_ + 1 type:NSString_class_()];
    (void) IOSObjectArray_Set(chunks, 0, @"");
    for (jint i = -pointer_; ++i <= 0; ) {
      NSString *name = [self peekElementWithInt:i];
      (void) IOSObjectArray_Set(chunks, i + pointer_, name);
    }
    currentPath_ = new_ComThoughtworksXstreamIoPathPath_initWithNSStringArray_(chunks);
  }
  return currentPath_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "PathTracker", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "PathTracker", NULL, 0x1, NULL, NULL },
    { "pushElementWithNSString:", "pushElement", "V", 0x1, NULL, NULL },
    { "popElement", NULL, "V", 0x1, NULL, NULL },
    { "peekElement", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "peekElementWithInt:", "peekElement", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "depth", NULL, "I", 0x1, NULL, NULL },
    { "resizeStacksWithInt:", "resizeStacks", "V", 0x2, NULL, NULL },
    { "getPath", NULL, "Lcom.thoughtworks.xstream.io.path.Path;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pointer_", NULL, 0x2, "I", NULL, NULL,  },
    { "capacity_", NULL, 0x2, "I", NULL, NULL,  },
    { "pathStack_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "indexMapStack_", NULL, 0x2, "[Ljava.util.Map;", NULL, NULL,  },
    { "currentPath_", NULL, 0x2, "Lcom.thoughtworks.xstream.io.path.Path;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamIoPathPathTracker = { 2, "PathTracker", "com.thoughtworks.xstream.io.path", NULL, 0x1, 9, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamIoPathPathTracker;
}

@end


#line 58
void ComThoughtworksXstreamIoPathPathTracker_init(ComThoughtworksXstreamIoPathPathTracker *self) {
  (void) ComThoughtworksXstreamIoPathPathTracker_initWithInt_(self, 16);
}


#line 58
ComThoughtworksXstreamIoPathPathTracker *new_ComThoughtworksXstreamIoPathPathTracker_init() {
  ComThoughtworksXstreamIoPathPathTracker *self = [ComThoughtworksXstreamIoPathPathTracker alloc];
  ComThoughtworksXstreamIoPathPathTracker_init(self);
  return self;
}


#line 69
void ComThoughtworksXstreamIoPathPathTracker_initWithInt_(ComThoughtworksXstreamIoPathPathTracker *self, jint initialCapacity) {
  (void) NSObject_init(self);
  
#line 70
  self->capacity_ = JavaLangMath_maxWithInt_withInt_(1, initialCapacity);
  self->pathStack_ = [IOSObjectArray newArrayWithLength:self->capacity_ type:NSString_class_()];
  self->indexMapStack_ = [IOSObjectArray newArrayWithLength:self->capacity_ type:JavaUtilMap_class_()];
}


#line 69
ComThoughtworksXstreamIoPathPathTracker *new_ComThoughtworksXstreamIoPathPathTracker_initWithInt_(jint initialCapacity) {
  ComThoughtworksXstreamIoPathPathTracker *self = [ComThoughtworksXstreamIoPathPathTracker alloc];
  ComThoughtworksXstreamIoPathPathTracker_initWithInt_(self, initialCapacity);
  return self;
}


#line 158
void ComThoughtworksXstreamIoPathPathTracker_resizeStacksWithInt_(ComThoughtworksXstreamIoPathPathTracker *self, jint newCapacity) {
  IOSObjectArray *newPathStack = [IOSObjectArray newArrayWithLength:newCapacity type:NSString_class_()];
  IOSObjectArray *newIndexMapStack = [IOSObjectArray newArrayWithLength:newCapacity type:JavaUtilMap_class_()];
  jint min = JavaLangMath_minWithInt_withInt_(self->capacity_, newCapacity);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->pathStack_, 0, newPathStack, 0, min);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->indexMapStack_, 0, newIndexMapStack, 0, min);
  self->pathStack_ = newPathStack;
  self->indexMapStack_ = newIndexMapStack;
  self->capacity_ = newCapacity;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamIoPathPathTracker)
