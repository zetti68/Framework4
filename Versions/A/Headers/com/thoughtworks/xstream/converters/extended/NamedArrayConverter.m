//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/converters/extended/NamedArrayConverter.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/converters/extended/NamedArrayConverter.java"

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/MarshallingContext.h"
#include "com/thoughtworks/xstream/converters/UnmarshallingContext.h"
#include "com/thoughtworks/xstream/converters/extended/NamedArrayConverter.h"
#include "com/thoughtworks/xstream/core/util/HierarchicalStreams.h"
#include "com/thoughtworks/xstream/core/util/Primitives.h"
#include "com/thoughtworks/xstream/io/ExtendedHierarchicalStreamWriterHelper.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamWriter.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/reflect/Array.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface ComThoughtworksXstreamConvertersExtendedNamedArrayConverter () {
 @public
  IOSClass *arrayType_;
  NSString *itemName_;
  id<ComThoughtworksXstreamMapperMapper> mapper_;
}

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersExtendedNamedArrayConverter, arrayType_, IOSClass *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersExtendedNamedArrayConverter, itemName_, NSString *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersExtendedNamedArrayConverter, mapper_, id<ComThoughtworksXstreamMapperMapper>)


#line 36
@implementation ComThoughtworksXstreamConvertersExtendedNamedArrayConverter


#line 49
- (instancetype)initWithIOSClass:(IOSClass *)arrayType
withComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper
                    withNSString:(NSString *)itemName {
  ComThoughtworksXstreamConvertersExtendedNamedArrayConverter_initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_(self, arrayType, mapper, itemName);
  return self;
}


#line 58
- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  return type == arrayType_;
}

- (void)marshalWithId:(id)source
withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer
withComThoughtworksXstreamConvertersMarshallingContext:(id<ComThoughtworksXstreamConvertersMarshallingContext>)context {
  jint length = JavaLangReflectArray_getLengthWithId_(source);
  for (jint i = 0; i < length; ++i) {
    id item = JavaLangReflectArray_getWithId_withInt_(source, i);
    IOSClass *itemType = item == nil ?
#line 67
    ComThoughtworksXstreamMapperMapper_Null_class_() :
#line 68
    [((IOSClass *) nil_chk([((IOSClass *) nil_chk(arrayType_)) getComponentType])) isPrimitive] ? ComThoughtworksXstreamCoreUtilPrimitives_unboxWithIOSClass_(
#line 69
    [item getClass]) :
#line 70
    [item getClass];
    ComThoughtworksXstreamIoExtendedHierarchicalStreamWriterHelper_startNodeWithComThoughtworksXstreamIoHierarchicalStreamWriter_withNSString_withIOSClass_(writer, itemName_, itemType);
    if (![itemType isEqual:[((IOSClass *) nil_chk(arrayType_)) getComponentType]]) {
      NSString *attributeName = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper_)) aliasForSystemAttributeWithNSString:@"class"];
      if (attributeName != nil) {
        [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) addAttributeWithNSString:attributeName withNSString:[mapper_ serializedClassWithIOSClass:itemType]];
      }
    }
    if (item != nil) {
      [((id<ComThoughtworksXstreamConvertersMarshallingContext>) nil_chk(context)) convertAnotherWithId:item];
    }
    [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) endNode];
  }
}


#line 85
- (id)unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
           withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context {
  id<JavaUtilList> list = new_JavaUtilArrayList_init();
  while ([((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader)) hasMoreChildren]) {
    [reader moveDown];
    id item;
    NSString *className_ = ComThoughtworksXstreamCoreUtilHierarchicalStreams_readClassAttributeWithComThoughtworksXstreamIoHierarchicalStreamReader_withComThoughtworksXstreamMapperMapper_(reader, mapper_);
    IOSClass *itemType = className_ == nil ? [((IOSClass *) nil_chk(arrayType_)) getComponentType] : [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper_)) realClassWithNSString:className_];
    if ([ComThoughtworksXstreamMapperMapper_Null_class_() isEqual:itemType]) {
      item = nil;
    }
    else {
      
#line 95
      item = [((id<ComThoughtworksXstreamConvertersUnmarshallingContext>) nil_chk(context)) convertAnotherWithId:nil withIOSClass:itemType];
    }
    [list addWithId:item];
    [reader moveUp];
  }
  id array = JavaLangReflectArray_newInstanceWithIOSClass_withInt_([((IOSClass *) nil_chk(arrayType_)) getComponentType], [list size]);
  for (jint i = 0; i < [list size]; ++i) {
    JavaLangReflectArray_setWithId_withInt_withId_(array, i, [list getWithInt:i]);
  }
  return array;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithIOSClass:withComThoughtworksXstreamMapperMapper:withNSString:", "NamedArrayConverter", NULL, 0x1, NULL, NULL },
    { "canConvertWithIOSClass:", "canConvert", "Z", 0x1, NULL, NULL },
    { "marshalWithId:withComThoughtworksXstreamIoHierarchicalStreamWriter:withComThoughtworksXstreamConvertersMarshallingContext:", "marshal", "V", 0x1, NULL, NULL },
    { "unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:", "unmarshal", "Ljava.lang.Object;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "arrayType_", NULL, 0x12, "Ljava.lang.Class;", NULL, NULL,  },
    { "itemName_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "mapper_", NULL, 0x12, "Lcom.thoughtworks.xstream.mapper.Mapper;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersExtendedNamedArrayConverter = { 2, "NamedArrayConverter", "com.thoughtworks.xstream.converters.extended", NULL, 0x1, 4, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamConvertersExtendedNamedArrayConverter;
}

@end


#line 49
void ComThoughtworksXstreamConvertersExtendedNamedArrayConverter_initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_(ComThoughtworksXstreamConvertersExtendedNamedArrayConverter *self, IOSClass *arrayType, id<ComThoughtworksXstreamMapperMapper> mapper, NSString *itemName) {
  (void) NSObject_init(self);
  
#line 50
  if (![((IOSClass *) nil_chk(arrayType)) isArray]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", [arrayType getName], @" is not an array"));
  }
  self->arrayType_ = arrayType;
  self->mapper_ = mapper;
  self->itemName_ = itemName;
}


#line 49
ComThoughtworksXstreamConvertersExtendedNamedArrayConverter *new_ComThoughtworksXstreamConvertersExtendedNamedArrayConverter_initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_(IOSClass *arrayType, id<ComThoughtworksXstreamMapperMapper> mapper, NSString *itemName) {
  ComThoughtworksXstreamConvertersExtendedNamedArrayConverter *self = [ComThoughtworksXstreamConvertersExtendedNamedArrayConverter alloc];
  ComThoughtworksXstreamConvertersExtendedNamedArrayConverter_initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_(self, arrayType, mapper, itemName);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamConvertersExtendedNamedArrayConverter)
