//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/converters/extended/NamedMapConverter.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/converters/extended/NamedMapConverter.java"

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/converters/Converter.h"
#include "com/thoughtworks/xstream/converters/ConverterLookup.h"
#include "com/thoughtworks/xstream/converters/MarshallingContext.h"
#include "com/thoughtworks/xstream/converters/SingleValueConverter.h"
#include "com/thoughtworks/xstream/converters/UnmarshallingContext.h"
#include "com/thoughtworks/xstream/converters/collections/AbstractCollectionConverter.h"
#include "com/thoughtworks/xstream/converters/collections/MapConverter.h"
#include "com/thoughtworks/xstream/converters/extended/NamedMapConverter.h"
#include "com/thoughtworks/xstream/converters/extended/UseAttributeForEnumMapper.h"
#include "com/thoughtworks/xstream/core/JVM.h"
#include "com/thoughtworks/xstream/core/util/HierarchicalStreams.h"
#include "com/thoughtworks/xstream/io/ExtendedHierarchicalStreamWriterHelper.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamWriter.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface ComThoughtworksXstreamConvertersExtendedNamedMapConverter () {
 @public
  NSString *entryName_;
  NSString *keyName_;
  IOSClass *keyType_;
  NSString *valueName_;
  IOSClass *valueType_;
  jboolean keyAsAttribute_;
  jboolean valueAsAttribute_;
  id<ComThoughtworksXstreamConvertersConverterLookup> lookup_;
  id<ComThoughtworksXstreamMapperMapper> enumMapper_;
}

- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getSingleValueConverterWithIOSClass:(IOSClass *)type;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersExtendedNamedMapConverter, entryName_, NSString *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersExtendedNamedMapConverter, keyName_, NSString *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersExtendedNamedMapConverter, keyType_, IOSClass *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersExtendedNamedMapConverter, valueName_, NSString *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersExtendedNamedMapConverter, valueType_, IOSClass *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersExtendedNamedMapConverter, lookup_, id<ComThoughtworksXstreamConvertersConverterLookup>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersExtendedNamedMapConverter, enumMapper_, id<ComThoughtworksXstreamMapperMapper>)

__attribute__((unused)) static id<ComThoughtworksXstreamConvertersSingleValueConverter> ComThoughtworksXstreamConvertersExtendedNamedMapConverter_getSingleValueConverterWithIOSClass_(ComThoughtworksXstreamConvertersExtendedNamedMapConverter *self, IOSClass *type);


#line 112
@implementation ComThoughtworksXstreamConvertersExtendedNamedMapConverter


#line 135
- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper
                                              withNSString:(NSString *)entryName
                                              withNSString:(NSString *)keyName
                                              withIOSClass:(IOSClass *)keyType
                                              withNSString:(NSString *)valueName
                                              withIOSClass:(IOSClass *)valueType {
  ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_(self, mapper, entryName, keyName, keyType, valueName, valueType);
  return self;
}


#line 153
- (instancetype)initWithIOSClass:(IOSClass *)type
withComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper
                    withNSString:(NSString *)entryName
                    withNSString:(NSString *)keyName
                    withIOSClass:(IOSClass *)keyType
                    withNSString:(NSString *)valueName
                    withIOSClass:(IOSClass *)valueType {
  ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_(self, type, mapper, entryName, keyName, keyType, valueName, valueType);
  return self;
}


#line 174
- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper
                                              withNSString:(NSString *)entryName
                                              withNSString:(NSString *)keyName
                                              withIOSClass:(IOSClass *)keyType
                                              withNSString:(NSString *)valueName
                                              withIOSClass:(IOSClass *)valueType
                                               withBoolean:(jboolean)keyAsAttribute
                                               withBoolean:(jboolean)valueAsAttribute
       withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)lookup {
  ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_(self, mapper, entryName, keyName, keyType, valueName, valueType, keyAsAttribute, valueAsAttribute, lookup);
  return self;
}


#line 198
- (instancetype)initWithIOSClass:(IOSClass *)type
withComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper
                    withNSString:(NSString *)entryName
                    withNSString:(NSString *)keyName
                    withIOSClass:(IOSClass *)keyType
                    withNSString:(NSString *)valueName
                    withIOSClass:(IOSClass *)valueType
                     withBoolean:(jboolean)keyAsAttribute
                     withBoolean:(jboolean)valueAsAttribute
withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)lookup {
  ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_(self, type, mapper, entryName, keyName, keyType, valueName, valueType, keyAsAttribute, valueAsAttribute, lookup);
  return self;
}


#line 244
- (void)marshalWithId:(id)source
withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer
withComThoughtworksXstreamConvertersMarshallingContext:(id<ComThoughtworksXstreamConvertersMarshallingContext>)context {
  
#line 246
  id<JavaUtilMap> map = (id<JavaUtilMap>) check_protocol_cast(source, @protocol(JavaUtilMap));
  id<ComThoughtworksXstreamConvertersSingleValueConverter> keyConverter = nil;
  id<ComThoughtworksXstreamConvertersSingleValueConverter> valueConverter = nil;
  if (keyAsAttribute_) {
    keyConverter = ComThoughtworksXstreamConvertersExtendedNamedMapConverter_getSingleValueConverterWithIOSClass_(self, keyType_);
  }
  if (valueAsAttribute_ || valueName_ == nil) {
    valueConverter = ComThoughtworksXstreamConvertersExtendedNamedMapConverter_getSingleValueConverterWithIOSClass_(self, valueType_);
  }
  for (id<JavaUtilIterator> iterator = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(map)) entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) check_protocol_cast([iterator next], @protocol(JavaUtilMap_Entry));
    id key = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    id value = [entry_ getValue];
    if (entryName_ != nil) {
      ComThoughtworksXstreamIoExtendedHierarchicalStreamWriterHelper_startNodeWithComThoughtworksXstreamIoHierarchicalStreamWriter_withNSString_withIOSClass_(
#line 261
      writer, entryName_, [entry_ getClass]);
      if (keyConverter != nil && key != nil) {
        [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) addAttributeWithNSString:keyName_ withNSString:[keyConverter toStringWithId:key]];
      }
      if (valueName_ != nil && valueConverter != nil && value != nil) {
        [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) addAttributeWithNSString:valueName_ withNSString:[valueConverter toStringWithId:value]];
      }
    }
    
#line 270
    if (keyConverter == nil) {
      [self writeItemWithNSString:keyName_ withIOSClass:keyType_ withId:key withComThoughtworksXstreamConvertersMarshallingContext:context withComThoughtworksXstreamIoHierarchicalStreamWriter:writer];
    }
    if (valueConverter == nil) {
      [self writeItemWithNSString:valueName_ withIOSClass:valueType_ withId:value withComThoughtworksXstreamConvertersMarshallingContext:context withComThoughtworksXstreamIoHierarchicalStreamWriter:writer];
    }
    else
#line 275
    if (valueName_ == nil) {
      [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) setValueWithNSString:[valueConverter toStringWithId:value]];
    }
    
#line 279
    if (entryName_ != nil) {
      [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) endNode];
    }
  }
}


#line 285
- (void)populateMapWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
               withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context
                                                        withJavaUtilMap:(id<JavaUtilMap>)map
                                                        withJavaUtilMap:(id<JavaUtilMap>)target {
  
#line 287
  id<ComThoughtworksXstreamConvertersSingleValueConverter> keyConverter = nil;
  id<ComThoughtworksXstreamConvertersSingleValueConverter> valueConverter = nil;
  if (keyAsAttribute_) {
    keyConverter = ComThoughtworksXstreamConvertersExtendedNamedMapConverter_getSingleValueConverterWithIOSClass_(self, keyType_);
  }
  if (valueAsAttribute_ || valueName_ == nil) {
    valueConverter = ComThoughtworksXstreamConvertersExtendedNamedMapConverter_getSingleValueConverterWithIOSClass_(self, valueType_);
  }
  
#line 296
  while ([((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader)) hasMoreChildren]) {
    id key = nil;
    id value = nil;
    
#line 300
    if (entryName_ != nil) {
      [reader moveDown];
      
#line 303
      if (keyConverter != nil) {
        NSString *attribute = [reader getAttributeWithNSString:keyName_];
        if (attribute != nil) {
          key = [keyConverter fromStringWithNSString:attribute];
        }
      }
      
#line 310
      if (valueAsAttribute_ && valueConverter != nil) {
        NSString *attribute = [reader getAttributeWithNSString:valueName_];
        if (attribute != nil) {
          value = [valueConverter fromStringWithNSString:attribute];
        }
      }
    }
    
#line 318
    if (keyConverter == nil) {
      [reader moveDown];
      if (valueConverter == nil &&
#line 321
      ![((NSString *) nil_chk(keyName_)) isEqual:valueName_] &&
#line 322
      [((NSString *) nil_chk([reader getNodeName])) isEqual:valueName_]) {
        value = [self readItemWithIOSClass:valueType_ withComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamConvertersUnmarshallingContext:context withId:map];
      }
      else {
        
#line 325
        key = [self readItemWithIOSClass:keyType_ withComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamConvertersUnmarshallingContext:context withId:map];
      }
      [reader moveUp];
    }
    
#line 330
    if (valueConverter == nil) {
      [reader moveDown];
      if (keyConverter == nil && key == nil && value != nil) {
        key = [self readItemWithIOSClass:keyType_ withComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamConvertersUnmarshallingContext:context withId:map];
      }
      else {
        
#line 335
        value = [self readItemWithIOSClass:valueType_ withComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamConvertersUnmarshallingContext:context withId:map];
      }
      [reader moveUp];
    }
    else
#line 338
    if (!valueAsAttribute_) {
      value = [reader getValue];
    }
    
#line 342
    (void) [((id<JavaUtilMap>) nil_chk(target)) putWithId:key withId:value];
    
#line 344
    if (entryName_ != nil) {
      [reader moveUp];
    }
  }
}


#line 350
- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getSingleValueConverterWithIOSClass:(IOSClass *)type {
  return ComThoughtworksXstreamConvertersExtendedNamedMapConverter_getSingleValueConverterWithIOSClass_(self, type);
}


#line 365
- (void)writeItemWithNSString:(NSString *)name
                 withIOSClass:(IOSClass *)type
                       withId:(id)item
withComThoughtworksXstreamConvertersMarshallingContext:(id<ComThoughtworksXstreamConvertersMarshallingContext>)context
withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer {
  
#line 367
  IOSClass *itemType = item == nil ? ComThoughtworksXstreamMapperMapper_Null_class_() : [item getClass];
  ComThoughtworksXstreamIoExtendedHierarchicalStreamWriterHelper_startNodeWithComThoughtworksXstreamIoHierarchicalStreamWriter_withNSString_withIOSClass_(writer, name, itemType);
  if (![itemType isEqual:type]) {
    NSString *attributeName = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk([self mapper])) aliasForSystemAttributeWithNSString:@"class"];
    if (attributeName != nil) {
      [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) addAttributeWithNSString:attributeName withNSString:[((id<ComThoughtworksXstreamMapperMapper>) nil_chk([self mapper])) serializedClassWithIOSClass:itemType]];
    }
  }
  if (item != nil) {
    [((id<ComThoughtworksXstreamConvertersMarshallingContext>) nil_chk(context)) convertAnotherWithId:item];
  }
  [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) endNode];
}


#line 381
- (id)readItemWithIOSClass:(IOSClass *)type
withComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context
                    withId:(id)current {
  
#line 383
  NSString *className_ = ComThoughtworksXstreamCoreUtilHierarchicalStreams_readClassAttributeWithComThoughtworksXstreamIoHierarchicalStreamReader_withComThoughtworksXstreamMapperMapper_(reader, [self mapper]);
  IOSClass *itemType = className_ == nil ? type : [((id<ComThoughtworksXstreamMapperMapper>) nil_chk([self mapper])) realClassWithNSString:className_];
  if ([ComThoughtworksXstreamMapperMapper_Null_class_() isEqual:itemType]) {
    return nil;
  }
  else {
    
#line 388
    return [((id<ComThoughtworksXstreamConvertersUnmarshallingContext>) nil_chk(context)) convertAnotherWithId:current withIOSClass:itemType];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamMapperMapper:withNSString:withNSString:withIOSClass:withNSString:withIOSClass:", "NamedMapConverter", NULL, 0x1, NULL, NULL },
    { "initWithIOSClass:withComThoughtworksXstreamMapperMapper:withNSString:withNSString:withIOSClass:withNSString:withIOSClass:", "NamedMapConverter", NULL, 0x1, NULL, NULL },
    { "initWithComThoughtworksXstreamMapperMapper:withNSString:withNSString:withIOSClass:withNSString:withIOSClass:withBoolean:withBoolean:withComThoughtworksXstreamConvertersConverterLookup:", "NamedMapConverter", NULL, 0x1, NULL, NULL },
    { "initWithIOSClass:withComThoughtworksXstreamMapperMapper:withNSString:withNSString:withIOSClass:withNSString:withIOSClass:withBoolean:withBoolean:withComThoughtworksXstreamConvertersConverterLookup:", "NamedMapConverter", NULL, 0x1, NULL, NULL },
    { "marshalWithId:withComThoughtworksXstreamIoHierarchicalStreamWriter:withComThoughtworksXstreamConvertersMarshallingContext:", "marshal", "V", 0x1, NULL, NULL },
    { "populateMapWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:withJavaUtilMap:withJavaUtilMap:", "populateMap", "V", 0x4, NULL, NULL },
    { "getSingleValueConverterWithIOSClass:", "getSingleValueConverter", "Lcom.thoughtworks.xstream.converters.SingleValueConverter;", 0x2, NULL, NULL },
    { "writeItemWithNSString:withIOSClass:withId:withComThoughtworksXstreamConvertersMarshallingContext:withComThoughtworksXstreamIoHierarchicalStreamWriter:", "writeItem", "V", 0x4, NULL, NULL },
    { "readItemWithIOSClass:withComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:withId:", "readItem", "Ljava.lang.Object;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "entryName_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "keyName_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "keyType_", NULL, 0x12, "Ljava.lang.Class;", NULL, NULL,  },
    { "valueName_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "valueType_", NULL, 0x12, "Ljava.lang.Class;", NULL, NULL,  },
    { "keyAsAttribute_", NULL, 0x12, "Z", NULL, NULL,  },
    { "valueAsAttribute_", NULL, 0x12, "Z", NULL, NULL,  },
    { "lookup_", NULL, 0x12, "Lcom.thoughtworks.xstream.converters.ConverterLookup;", NULL, NULL,  },
    { "enumMapper_", NULL, 0x12, "Lcom.thoughtworks.xstream.mapper.Mapper;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersExtendedNamedMapConverter = { 2, "NamedMapConverter", "com.thoughtworks.xstream.converters.extended", NULL, 0x1, 9, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamConvertersExtendedNamedMapConverter;
}

@end


#line 135
void ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_(ComThoughtworksXstreamConvertersExtendedNamedMapConverter *self, id<ComThoughtworksXstreamMapperMapper> mapper, NSString *entryName, NSString *keyName, IOSClass *keyType, NSString *valueName, IOSClass *valueType) {
  (void) ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_(self,
#line 138
  mapper, entryName, keyName, keyType, valueName, valueType, NO, NO, nil);
}


#line 135
ComThoughtworksXstreamConvertersExtendedNamedMapConverter *new_ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_(id<ComThoughtworksXstreamMapperMapper> mapper, NSString *entryName, NSString *keyName, IOSClass *keyType, NSString *valueName, IOSClass *valueType) {
  ComThoughtworksXstreamConvertersExtendedNamedMapConverter *self = [ComThoughtworksXstreamConvertersExtendedNamedMapConverter alloc];
  ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_(self, mapper, entryName, keyName, keyType, valueName, valueType);
  return self;
}


#line 153
void ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_(ComThoughtworksXstreamConvertersExtendedNamedMapConverter *self, IOSClass *type, id<ComThoughtworksXstreamMapperMapper> mapper, NSString *entryName, NSString *keyName, IOSClass *keyType, NSString *valueName, IOSClass *valueType) {
  (void) ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_(self,
#line 157
  type, mapper, entryName, keyName, keyType, valueName, valueType, NO, NO, nil);
}


#line 153
ComThoughtworksXstreamConvertersExtendedNamedMapConverter *new_ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_(IOSClass *type, id<ComThoughtworksXstreamMapperMapper> mapper, NSString *entryName, NSString *keyName, IOSClass *keyType, NSString *valueName, IOSClass *valueType) {
  ComThoughtworksXstreamConvertersExtendedNamedMapConverter *self = [ComThoughtworksXstreamConvertersExtendedNamedMapConverter alloc];
  ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_(self, type, mapper, entryName, keyName, keyType, valueName, valueType);
  return self;
}


#line 174
void ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_(ComThoughtworksXstreamConvertersExtendedNamedMapConverter *self, id<ComThoughtworksXstreamMapperMapper> mapper, NSString *entryName, NSString *keyName, IOSClass *keyType, NSString *valueName, IOSClass *valueType, jboolean keyAsAttribute, jboolean valueAsAttribute, id<ComThoughtworksXstreamConvertersConverterLookup> lookup) {
  (void) ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_(self,
#line 179
  nil, mapper, entryName, keyName, keyType, valueName, valueType, keyAsAttribute,
#line 180
  valueAsAttribute, lookup);
}


#line 174
ComThoughtworksXstreamConvertersExtendedNamedMapConverter *new_ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_(id<ComThoughtworksXstreamMapperMapper> mapper, NSString *entryName, NSString *keyName, IOSClass *keyType, NSString *valueName, IOSClass *valueType, jboolean keyAsAttribute, jboolean valueAsAttribute, id<ComThoughtworksXstreamConvertersConverterLookup> lookup) {
  ComThoughtworksXstreamConvertersExtendedNamedMapConverter *self = [ComThoughtworksXstreamConvertersExtendedNamedMapConverter alloc];
  ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_(self, mapper, entryName, keyName, keyType, valueName, valueType, keyAsAttribute, valueAsAttribute, lookup);
  return self;
}


#line 198
void ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_(ComThoughtworksXstreamConvertersExtendedNamedMapConverter *self, IOSClass *type, id<ComThoughtworksXstreamMapperMapper> mapper, NSString *entryName, NSString *keyName, IOSClass *keyType, NSString *valueName, IOSClass *valueType, jboolean keyAsAttribute, jboolean valueAsAttribute, id<ComThoughtworksXstreamConvertersConverterLookup> lookup) {
  (void) ComThoughtworksXstreamConvertersCollectionsMapConverter_initWithComThoughtworksXstreamMapperMapper_withIOSClass_(self,
#line 202
  mapper, type);
  self->entryName_ = entryName != nil && ((jint) [entryName length]) == 0 ? nil : entryName;
  self->keyName_ = keyName != nil && ((jint) [keyName length]) == 0 ? nil : keyName;
  self->keyType_ = keyType;
  self->valueName_ = valueName != nil && ((jint) [valueName length]) == 0 ? nil : valueName;
  self->valueType_ = valueType;
  self->keyAsAttribute_ = keyAsAttribute;
  self->valueAsAttribute_ = valueAsAttribute;
  self->lookup_ = lookup;
  self->enumMapper_ = ComThoughtworksXstreamCoreJVM_is15() ? ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper_createEnumMapperWithComThoughtworksXstreamMapperMapper_(mapper) : nil;
  
#line 213
  if (keyType == nil || valueType == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Class types of key and value are mandatory");
  }
  if (entryName == nil) {
    if (keyAsAttribute || valueAsAttribute) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 219
      @"Cannot write attributes to map entry, if map entry must be omitted");
    }
    if (valueName == nil) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 223
      @"Cannot write value as text of entry, if entry must be omitted");
    }
  }
  if (keyName == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot write key without name");
  }
  if (valueName == nil) {
    if (valueAsAttribute) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 232
      @"Cannot write value as attribute without name");
    }
    else
#line 233
    if (!keyAsAttribute) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 235
      @"Cannot write value as text of entry, if key is also child element");
    }
  }
  if (keyAsAttribute && valueAsAttribute && [((NSString *) nil_chk(keyName)) isEqual:valueName]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 240
    @"Cannot write key and value with same attribute name");
  }
}


#line 198
ComThoughtworksXstreamConvertersExtendedNamedMapConverter *new_ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_(IOSClass *type, id<ComThoughtworksXstreamMapperMapper> mapper, NSString *entryName, NSString *keyName, IOSClass *keyType, NSString *valueName, IOSClass *valueType, jboolean keyAsAttribute, jboolean valueAsAttribute, id<ComThoughtworksXstreamConvertersConverterLookup> lookup) {
  ComThoughtworksXstreamConvertersExtendedNamedMapConverter *self = [ComThoughtworksXstreamConvertersExtendedNamedMapConverter alloc];
  ComThoughtworksXstreamConvertersExtendedNamedMapConverter_initWithIOSClass_withComThoughtworksXstreamMapperMapper_withNSString_withNSString_withIOSClass_withNSString_withIOSClass_withBoolean_withBoolean_withComThoughtworksXstreamConvertersConverterLookup_(self, type, mapper, entryName, keyName, keyType, valueName, valueType, keyAsAttribute, valueAsAttribute, lookup);
  return self;
}


#line 350
id<ComThoughtworksXstreamConvertersSingleValueConverter> ComThoughtworksXstreamConvertersExtendedNamedMapConverter_getSingleValueConverterWithIOSClass_(ComThoughtworksXstreamConvertersExtendedNamedMapConverter *self, IOSClass *type) {
  id<ComThoughtworksXstreamConvertersSingleValueConverter> conv = ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper_isEnumWithIOSClass_(type) ? [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(self->enumMapper_)) getConverterFromItemTypeWithNSString:
#line 352
  nil withIOSClass:type withIOSClass:nil] : [((id<ComThoughtworksXstreamMapperMapper>) nil_chk([self mapper])) getConverterFromItemTypeWithNSString:
#line 353
  nil withIOSClass:type withIOSClass:nil];
  if (conv == nil) {
    id<ComThoughtworksXstreamConvertersConverter> converter = [((id<ComThoughtworksXstreamConvertersConverterLookup>) nil_chk(self->lookup_)) lookupConverterForTypeWithIOSClass:type];
    if ([ComThoughtworksXstreamConvertersSingleValueConverter_class_() isInstance:converter]) {
      conv = (id<ComThoughtworksXstreamConvertersSingleValueConverter>) check_protocol_cast(converter, @protocol(ComThoughtworksXstreamConvertersSingleValueConverter));
    }
    else {
      
#line 359
      @throw new_ComThoughtworksXstreamConvertersConversionException_initWithNSString_(@"No SingleValueConverter for key available");
    }
  }
  return conv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamConvertersExtendedNamedMapConverter)
