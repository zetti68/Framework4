//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/extended/ToAttributedValueConverter.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/extended/ToAttributedValueConverter.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/converters/Converter.h"
#include "com/thoughtworks/xstream/converters/ConverterLookup.h"
#include "com/thoughtworks/xstream/converters/ConverterMatcher.h"
#include "com/thoughtworks/xstream/converters/MarshallingContext.h"
#include "com/thoughtworks/xstream/converters/SingleValueConverter.h"
#include "com/thoughtworks/xstream/converters/UnmarshallingContext.h"
#include "com/thoughtworks/xstream/converters/extended/ToAttributedValueConverter.h"
#include "com/thoughtworks/xstream/converters/extended/UseAttributeForEnumMapper.h"
#include "com/thoughtworks/xstream/converters/reflection/AbstractReflectionConverter.h"
#include "com/thoughtworks/xstream/converters/reflection/ReflectionProvider.h"
#include "com/thoughtworks/xstream/core/JVM.h"
#include "com/thoughtworks/xstream/core/util/FastField.h"
#include "com/thoughtworks/xstream/core/util/HierarchicalStreams.h"
#include "com/thoughtworks/xstream/core/util/Primitives.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamWriter.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NoSuchFieldException.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"


#line 51
@implementation ComThoughtworksXstreamConvertersExtendedToAttributedValueConverter

NSString * ComThoughtworksXstreamConvertersExtendedToAttributedValueConverter_STRUCTURE_MARKER_ = 
#line 52
@"";


#line 69
- (instancetype)initWithIOSClass:(IOSClass *)type
withComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper
withComThoughtworksXstreamConvertersReflectionReflectionProvider:(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)reflectionProvider
withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)lookup
                    withNSString:(NSString *)valueFieldName {
  return
#line 72
  [self initComThoughtworksXstreamConvertersExtendedToAttributedValueConverterWithIOSClass:type withComThoughtworksXstreamMapperMapper:mapper withComThoughtworksXstreamConvertersReflectionReflectionProvider:reflectionProvider withComThoughtworksXstreamConvertersConverterLookup:lookup withNSString:valueFieldName withIOSClass:nil];
}


#line 85
- (instancetype)initComThoughtworksXstreamConvertersExtendedToAttributedValueConverterWithIOSClass:(IOSClass *)type
                                                            withComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper
                                  withComThoughtworksXstreamConvertersReflectionReflectionProvider:(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)reflectionProvider
                                               withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)lookup
                                                                                      withNSString:(NSString *)valueFieldName
                                                                                      withIOSClass:(IOSClass *)valueDefinedIn {
  if (self = [super init]) {
    
#line 88
    self->type_ = type;
    
#line 89
    self->mapper_ = mapper;
    
#line 90
    self->reflectionProvider_ = reflectionProvider;
    
#line 91
    self->lookup_ = lookup;
    
#line 93
    if (valueFieldName == nil) {
      valueField_ = nil;
    }
    else {
      
#line 96
      JavaLangReflectField *field = nil;
      @try {
        field = [(valueDefinedIn != nil ? valueDefinedIn : type) getDeclaredField:
#line 99
        valueFieldName];
        if (![((JavaLangReflectField *) nil_chk(field)) isAccessible]) {
          [field setAccessibleWithBoolean:YES];
        }
      }
      @catch (
#line 103
      JavaLangNoSuchFieldException *e) {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$$$", [((JavaLangNoSuchFieldException *) nil_chk(e)) getMessage], @": ", valueFieldName)];
      }
      self->valueField_ = field;
    }
    
#line 108
    enumMapper_ = [ComThoughtworksXstreamCoreJVM is15] ? [ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper createEnumMapperWithComThoughtworksXstreamMapperMapper:mapper] : nil;
  }
  return self;
}

- (instancetype)initWithIOSClass:(IOSClass *)type
withComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper
withComThoughtworksXstreamConvertersReflectionReflectionProvider:(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)reflectionProvider
withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)lookup
                    withNSString:(NSString *)valueFieldName
                    withIOSClass:(IOSClass *)valueDefinedIn {
  return [self initComThoughtworksXstreamConvertersExtendedToAttributedValueConverterWithIOSClass:
#line 86
type withComThoughtworksXstreamMapperMapper:mapper withComThoughtworksXstreamConvertersReflectionReflectionProvider:reflectionProvider withComThoughtworksXstreamConvertersConverterLookup:
#line 87
lookup withNSString:valueFieldName withIOSClass:valueDefinedIn];
}


#line 111
- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  
#line 112
  return self->type_ == type;
}


#line 115
- (void)marshalWithId:(id)source
withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer
withComThoughtworksXstreamConvertersMarshallingContext:(id<ComThoughtworksXstreamConvertersMarshallingContext>)context {
  IOSClass *sourceType = [nil_chk(source) getClass];
  id<JavaUtilMap> defaultFieldDefinition = [[JavaUtilHashMap alloc] init];
  IOSObjectArray *tagValue = [IOSObjectArray arrayWithLength:1 type:[IOSClass classWithClass:[NSString class]]];
  IOSObjectArray *realValue = [IOSObjectArray arrayWithLength:1 type:[IOSClass classWithClass:[NSObject class]]];
  IOSObjectArray *fieldType = [IOSObjectArray arrayWithLength:1 type:[IOSClass classWithClass:[IOSClass class]]];
  IOSObjectArray *definingType = [IOSObjectArray arrayWithLength:1 type:[IOSClass classWithClass:[IOSClass class]]];
  [((id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(reflectionProvider_)) visitSerializableFieldsWithId:source withComThoughtworksXstreamConvertersReflectionReflectionProvider_Visitor:[[ComThoughtworksXstreamConvertersExtendedToAttributedValueConverter_$1 alloc] initWithComThoughtworksXstreamConvertersExtendedToAttributedValueConverter:self withJavaUtilMap:defaultFieldDefinition withIOSClass:sourceType withIOSClassArray:definingType withIOSClassArray:fieldType withNSObjectArray:realValue withNSStringArray:tagValue withComThoughtworksXstreamIoHierarchicalStreamWriter:writer]];
  
#line 182
  if (IOSObjectArray_Get(tagValue, 0) != nil) {
    IOSClass *actualType = [nil_chk(IOSObjectArray_Get(realValue, 0)) getClass];
    IOSClass *defaultType = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper_)) defaultImplementationOfWithIOSClass:IOSObjectArray_Get(fieldType, 0)];
    if (![actualType isEqual:defaultType]) {
      NSString *serializedClassName = [mapper_ serializedClassWithIOSClass:actualType];
      if (![((NSString *) nil_chk(serializedClassName)) isEqual:[mapper_ serializedClassWithIOSClass:defaultType]]) {
        NSString *attributeName = [mapper_ aliasForSystemAttributeWithNSString:@"class"];
        if (attributeName != nil) {
          [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) addAttributeWithNSString:attributeName withNSString:serializedClassName];
        }
      }
    }
    
#line 195
    if (IOSObjectArray_Get(tagValue, 0) == ComThoughtworksXstreamConvertersExtendedToAttributedValueConverter_STRUCTURE_MARKER_) {
      [((id<ComThoughtworksXstreamConvertersMarshallingContext>) nil_chk(context)) convertAnotherWithId:IOSObjectArray_Get(realValue, 0)];
    }
    else {
      
#line 198
      [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) setValueWithNSString:IOSObjectArray_Get(tagValue, 0)];
    }
  }
}


#line 203
- (id)unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
           withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context {
  
#line 205
  id result = [((id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(reflectionProvider_)) newInstanceWithIOSClass:[((id<ComThoughtworksXstreamConvertersUnmarshallingContext>) nil_chk(context)) getRequiredType]];
  IOSClass *resultType = [nil_chk(result) getClass];
  
#line 208
  id<JavaUtilSet> seenFields = [[JavaUtilHashSet alloc] init];
  id<JavaUtilIterator> it = [((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader)) getAttributeNames];
  
#line 211
  id<JavaUtilSet> systemAttributes = [[JavaUtilHashSet alloc] init];
  [systemAttributes addWithId:[((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper_)) aliasForSystemAttributeWithNSString:@"class"]];
  
#line 215
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *attrName = (NSString *) check_class_cast([it next], [NSString class]);
    if ([systemAttributes containsWithId:attrName]) {
      continue;
    }
    
#line 221
    NSString *fieldName = [mapper_ realMemberWithIOSClass:resultType withNSString:attrName];
    JavaLangReflectField *field = [reflectionProvider_ getFieldOrNullWithIOSClass:resultType withNSString:fieldName];
    if (field != nil) {
      if ([JavaLangReflectModifier isTransientWithInt:[field getModifiers]]) {
        continue;
      }
      
#line 228
      IOSClass *type = [field getType];
      IOSClass *declaringClass = [field getDeclaringClass];
      id<ComThoughtworksXstreamConvertersConverterMatcher> converter = [ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper isEnumWithIOSClass:type] ?
#line 231
      (id<ComThoughtworksXstreamConvertersConverterMatcher>) check_protocol_cast([((id<ComThoughtworksXstreamMapperMapper>) nil_chk(enumMapper_)) getConverterFromItemTypeWithNSString:nil withIOSClass:type withIOSClass:nil], @protocol(ComThoughtworksXstreamConvertersConverterMatcher)) :
#line 232
      (id<ComThoughtworksXstreamConvertersConverterMatcher>) check_protocol_cast([mapper_ getLocalConverterWithIOSClass:declaringClass withNSString:fieldName], @protocol(ComThoughtworksXstreamConvertersConverterMatcher));
      if (converter == nil) {
        converter = [((id<ComThoughtworksXstreamConvertersConverterLookup>) nil_chk(lookup_)) lookupConverterForTypeWithIOSClass:type];
      }
      
#line 237
      if (!([(id) converter conformsToProtocol: @protocol(ComThoughtworksXstreamConvertersSingleValueConverter)])) {
        ComThoughtworksXstreamConvertersConversionException *exception = [[ComThoughtworksXstreamConvertersConversionException alloc] initWithNSString:
#line 239
        @"Cannot read field as a single value for object"];
        [exception addWithNSString:@"field" withNSString:fieldName];
        [exception addWithNSString:@"type" withNSString:[resultType getName]];
        @throw exception;
      }
      
#line 245
      if (converter != nil) {
        id value = [((id<ComThoughtworksXstreamConvertersSingleValueConverter>) check_protocol_cast(converter, @protocol(ComThoughtworksXstreamConvertersSingleValueConverter))) fromStringWithNSString:[reader getAttributeWithNSString:
#line 247
        attrName]];
        if ([((IOSClass *) nil_chk(type)) isPrimitive]) {
          type = [ComThoughtworksXstreamCoreUtilPrimitives boxWithIOSClass:type];
        }
        
#line 252
        if (value != nil && ![((IOSClass *) nil_chk(type)) isAssignableFrom:[value getClass]]) {
          ComThoughtworksXstreamConvertersConversionException *exception = [[ComThoughtworksXstreamConvertersConversionException alloc] initWithNSString:
#line 254
          @"Cannot assign object to type"];
          [exception addWithNSString:@"object type" withNSString:[[value getClass] getName]];
          [exception addWithNSString:@"target type" withNSString:[type getName]];
          @throw exception;
        }
        
#line 260
        [reflectionProvider_ writeFieldWithId:result withNSString:fieldName withId:value withIOSClass:declaringClass];
        if (![seenFields addWithId:[[ComThoughtworksXstreamCoreUtilFastField alloc] initWithIOSClass:declaringClass withNSString:fieldName]]) {
          @throw [[ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_DuplicateFieldException alloc] initWithNSString:JreStrcat("$$$C", fieldName, @" [",
#line 264
          [((IOSClass *) nil_chk(declaringClass)) getName], ']')];
        }
      }
    }
  }
  
#line 271
  if (valueField_ != nil) {
    IOSClass *classDefiningField = [valueField_ getDeclaringClass];
    NSString *fieldName = [valueField_ getName];
    JavaLangReflectField *field = fieldName == nil ? nil : [reflectionProvider_ getFieldWithIOSClass:
#line 275
    classDefiningField withNSString:fieldName];
    if (fieldName == nil || field == nil) {
      ComThoughtworksXstreamConvertersConversionException *exception = [[ComThoughtworksXstreamConvertersConversionException alloc] initWithNSString:
#line 278
      @"Cannot assign value to field of type"];
      [exception addWithNSString:@"element" withNSString:[reader getNodeName]];
      [exception addWithNSString:@"field" withNSString:fieldName];
      [exception addWithNSString:@"target type" withNSString:[((IOSClass *) nil_chk([context getRequiredType])) getName]];
      @throw exception;
    }
    
#line 285
    IOSClass *type;
    NSString *classAttribute = [ComThoughtworksXstreamCoreUtilHierarchicalStreams readClassAttributeWithComThoughtworksXstreamIoHierarchicalStreamReader:
#line 287
    reader withComThoughtworksXstreamMapperMapper:mapper_];
    if (classAttribute != nil) {
      type = [mapper_ realClassWithNSString:classAttribute];
    }
    else {
      
#line 291
      type = [mapper_ defaultImplementationOfWithIOSClass:[reflectionProvider_ getFieldTypeWithId:
#line 292
      result withNSString:fieldName withIOSClass:classDefiningField]];
    }
    
#line 295
    id value = [context convertAnotherWithId:
#line 296
    result withIOSClass:type withComThoughtworksXstreamConvertersConverter:
#line 297
    [mapper_ getLocalConverterWithIOSClass:[field getDeclaringClass] withNSString:[field getName]]];
    
#line 299
    IOSClass *definedType = [reflectionProvider_ getFieldTypeWithId:
#line 300
    result withNSString:fieldName withIOSClass:classDefiningField];
    if (![((IOSClass *) nil_chk(definedType)) isPrimitive]) {
      type = definedType;
    }
    
#line 305
    if (value != nil && ![((IOSClass *) nil_chk(type)) isAssignableFrom:[value getClass]]) {
      ComThoughtworksXstreamConvertersConversionException *exception = [[ComThoughtworksXstreamConvertersConversionException alloc] initWithNSString:
#line 307
      @"Cannot assign object to type"];
      [exception addWithNSString:@"object type" withNSString:[[value getClass] getName]];
      [exception addWithNSString:@"target type" withNSString:[type getName]];
      @throw exception;
    }
    
#line 313
    [reflectionProvider_ writeFieldWithId:result withNSString:fieldName withId:value withIOSClass:classDefiningField];
    if (![seenFields addWithId:[[ComThoughtworksXstreamCoreUtilFastField alloc] initWithIOSClass:classDefiningField withNSString:fieldName]]) {
      @throw [[ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_DuplicateFieldException alloc] initWithNSString:JreStrcat("$$$C", fieldName, @" [",
#line 317
      [((IOSClass *) nil_chk(classDefiningField)) getName], ']')];
    }
  }
  
#line 321
  return result;
}


#line 324
- (jboolean)fieldIsEqualWithComThoughtworksXstreamCoreUtilFastField:(ComThoughtworksXstreamCoreUtilFastField *)field {
  
#line 325
  return [((NSString *) nil_chk([((JavaLangReflectField *) nil_chk(valueField_)) getName])) isEqual:[((ComThoughtworksXstreamCoreUtilFastField *) nil_chk(field)) getName]] &&
#line 326
  [((NSString *) nil_chk([((IOSClass *) nil_chk([valueField_ getDeclaringClass])) getName])) isEqual:[field getDeclaringClass]];
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamConvertersExtendedToAttributedValueConverter *)other {
  [super copyAllFieldsTo:other];
  other->enumMapper_ = enumMapper_;
  other->lookup_ = lookup_;
  other->mapper_ = mapper_;
  other->reflectionProvider_ = reflectionProvider_;
  other->type_ = type_;
  other->valueField_ = valueField_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithIOSClass:withComThoughtworksXstreamMapperMapper:withComThoughtworksXstreamConvertersReflectionReflectionProvider:withComThoughtworksXstreamConvertersConverterLookup:withNSString:", "ToAttributedValueConverter", NULL, 0x1, NULL },
    { "initWithIOSClass:withComThoughtworksXstreamMapperMapper:withComThoughtworksXstreamConvertersReflectionReflectionProvider:withComThoughtworksXstreamConvertersConverterLookup:withNSString:withIOSClass:", "ToAttributedValueConverter", NULL, 0x1, NULL },
    { "canConvertWithIOSClass:", "canConvert", "Z", 0x1, NULL },
    { "marshalWithId:withComThoughtworksXstreamIoHierarchicalStreamWriter:withComThoughtworksXstreamConvertersMarshallingContext:", "marshal", "V", 0x1, NULL },
    { "unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:", "unmarshal", "Ljava.lang.Object;", 0x1, NULL },
    { "fieldIsEqualWithComThoughtworksXstreamCoreUtilFastField:", "fieldIsEqual", "Z", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "STRUCTURE_MARKER_", NULL, 0x1a, "Ljava.lang.String;", &ComThoughtworksXstreamConvertersExtendedToAttributedValueConverter_STRUCTURE_MARKER_,  },
    { "type_", NULL, 0x12, "Ljava.lang.Class;", NULL,  },
    { "mapper_", NULL, 0x12, "Lcom.thoughtworks.xstream.mapper.Mapper;", NULL,  },
    { "enumMapper_", NULL, 0x12, "Lcom.thoughtworks.xstream.mapper.Mapper;", NULL,  },
    { "reflectionProvider_", NULL, 0x12, "Lcom.thoughtworks.xstream.converters.reflection.ReflectionProvider;", NULL,  },
    { "lookup_", NULL, 0x12, "Lcom.thoughtworks.xstream.converters.ConverterLookup;", NULL,  },
    { "valueField_", NULL, 0x12, "Ljava.lang.reflect.Field;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersExtendedToAttributedValueConverter = { "ToAttributedValueConverter", "com.thoughtworks.xstream.converters.extended", NULL, 0x1, 6, methods, 7, fields, 0, NULL};
  return &_ComThoughtworksXstreamConvertersExtendedToAttributedValueConverter;
}

@end

@implementation ComThoughtworksXstreamConvertersExtendedToAttributedValueConverter_$1


#line 124
- (void)visitWithNSString:(NSString *)fieldName
             withIOSClass:(IOSClass *)type
             withIOSClass:(IOSClass *)definedIn
                   withId:(id)value {
  
#line 126
  if (![((id<ComThoughtworksXstreamMapperMapper>) nil_chk(this$0_->mapper_)) shouldSerializeMemberWithIOSClass:definedIn withNSString:fieldName]) {
    return;
  }
  
#line 130
  ComThoughtworksXstreamCoreUtilFastField *field = [[ComThoughtworksXstreamCoreUtilFastField alloc] initWithIOSClass:definedIn withNSString:fieldName];
  NSString *alias = [this$0_->mapper_ serializedMemberWithIOSClass:definedIn withNSString:fieldName];
  if (![((id<JavaUtilMap>) nil_chk(val$defaultFieldDefinition_)) containsKeyWithId:alias]) {
    IOSClass *lookupType = val$sourceType_;
    (void) [val$defaultFieldDefinition_ putWithId:
#line 135
    alias withId:[((id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(this$0_->reflectionProvider_)) getFieldWithIOSClass:lookupType withNSString:fieldName]];
  }
  else
#line 136
  if (![this$0_ fieldIsEqualWithComThoughtworksXstreamCoreUtilFastField:field]) {
    ComThoughtworksXstreamConvertersConversionException *exception = [[ComThoughtworksXstreamConvertersConversionException alloc] initWithNSString:
#line 138
    @"Cannot write attribute twice for object"];
    [exception addWithNSString:@"alias" withNSString:alias];
    [exception addWithNSString:@"type" withNSString:[((IOSClass *) nil_chk(val$sourceType_)) getName]];
    @throw exception;
  }
  
#line 144
  id<ComThoughtworksXstreamConvertersConverterMatcher> converter = [ComThoughtworksXstreamConvertersExtendedUseAttributeForEnumMapper isEnumWithIOSClass:type] ?
#line 145
  (id<ComThoughtworksXstreamConvertersConverterMatcher>) check_protocol_cast([((id<ComThoughtworksXstreamMapperMapper>) nil_chk(this$0_->enumMapper_)) getConverterFromItemTypeWithNSString:nil withIOSClass:type withIOSClass:nil], @protocol(ComThoughtworksXstreamConvertersConverterMatcher)) :
#line 146
  (id<ComThoughtworksXstreamConvertersConverterMatcher>) check_protocol_cast([this$0_->mapper_ getLocalConverterWithIOSClass:definedIn withNSString:fieldName], @protocol(ComThoughtworksXstreamConvertersConverterMatcher));
  if (converter == nil) {
    converter = [((id<ComThoughtworksXstreamConvertersConverterLookup>) nil_chk(this$0_->lookup_)) lookupConverterForTypeWithIOSClass:type];
  }
  
#line 151
  if (value != nil) {
    jboolean isValueField = this$0_->valueField_ != nil && [this$0_ fieldIsEqualWithComThoughtworksXstreamCoreUtilFastField:field];
    if (isValueField) {
      IOSObjectArray_Set(nil_chk(val$definingType_), 0, definedIn);
      IOSObjectArray_Set(nil_chk(val$fieldType_), 0, type);
      IOSObjectArray_Set(nil_chk(val$realValue_), 0, value);
      IOSObjectArray_Set(nil_chk(val$tagValue_), 0, ComThoughtworksXstreamConvertersExtendedToAttributedValueConverter_get_STRUCTURE_MARKER_());
    }
    if ([(id) converter conformsToProtocol: @protocol(ComThoughtworksXstreamConvertersSingleValueConverter)]) {
      NSString *str = [((id<ComThoughtworksXstreamConvertersSingleValueConverter>) nil_chk(((id<ComThoughtworksXstreamConvertersSingleValueConverter>) check_protocol_cast(converter, @protocol(ComThoughtworksXstreamConvertersSingleValueConverter))))) toStringWithId:value];
      
#line 162
      if (isValueField) {
        IOSObjectArray_Set(nil_chk(val$tagValue_), 0, str);
      }
      else {
        
#line 165
        if (str != nil) {
          [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(val$writer_)) addAttributeWithNSString:alias withNSString:str];
        }
      }
    }
    else {
      
#line 170
      if (!isValueField) {
        ComThoughtworksXstreamConvertersConversionException *exception = [[ComThoughtworksXstreamConvertersConversionException alloc] initWithNSString:
#line 172
        @"Cannot write element as attribute"];
        [exception addWithNSString:@"alias" withNSString:alias];
        [exception addWithNSString:@"type" withNSString:[((IOSClass *) nil_chk(val$sourceType_)) getName]];
        @throw exception;
      }
    }
  }
}

- (instancetype)initWithComThoughtworksXstreamConvertersExtendedToAttributedValueConverter:(ComThoughtworksXstreamConvertersExtendedToAttributedValueConverter *)outer$
                                                                           withJavaUtilMap:(id<JavaUtilMap>)capture$0
                                                                              withIOSClass:(IOSClass *)capture$1
                                                                         withIOSClassArray:(IOSObjectArray *)capture$2
                                                                         withIOSClassArray:(IOSObjectArray *)capture$3
                                                                         withNSObjectArray:(IOSObjectArray *)capture$4
                                                                         withNSStringArray:(IOSObjectArray *)capture$5
                                      withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)capture$6 {
  this$0_ = outer$;
  val$defaultFieldDefinition_ = capture$0;
  val$sourceType_ = capture$1;
  val$definingType_ = capture$2;
  val$fieldType_ = capture$3;
  val$realValue_ = capture$4;
  val$tagValue_ = capture$5;
  val$writer_ = capture$6;
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "visitWithNSString:withIOSClass:withIOSClass:withId:", "visit", "V", 0x1, NULL },
    { "initWithComThoughtworksXstreamConvertersExtendedToAttributedValueConverter:withJavaUtilMap:withIOSClass:withIOSClassArray:withIOSClassArray:withNSObjectArray:withNSStringArray:withComThoughtworksXstreamIoHierarchicalStreamWriter:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.thoughtworks.xstream.converters.extended.ToAttributedValueConverter;", NULL,  },
    { "val$defaultFieldDefinition_", NULL, 0x1012, "Ljava.util.Map;", NULL,  },
    { "val$sourceType_", NULL, 0x1012, "Ljava.lang.Class;", NULL,  },
    { "val$definingType_", NULL, 0x1012, "[Ljava.lang.Class;", NULL,  },
    { "val$fieldType_", NULL, 0x1012, "[Ljava.lang.Class;", NULL,  },
    { "val$realValue_", NULL, 0x1012, "[Ljava.lang.Object;", NULL,  },
    { "val$tagValue_", NULL, 0x1012, "[Ljava.lang.String;", NULL,  },
    { "val$writer_", NULL, 0x1012, "Lcom.thoughtworks.xstream.io.HierarchicalStreamWriter;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersExtendedToAttributedValueConverter_$1 = { "$1", "com.thoughtworks.xstream.converters.extended", "ToAttributedValueConverter", 0x8000, 2, methods, 8, fields, 0, NULL};
  return &_ComThoughtworksXstreamConvertersExtendedToAttributedValueConverter_$1;
}

@end
