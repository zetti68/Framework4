//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/converters/extended/JavaMethodConverter.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/converters/extended/JavaMethodConverter.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/converters/MarshallingContext.h"
#include "com/thoughtworks/xstream/converters/SingleValueConverter.h"
#include "com/thoughtworks/xstream/converters/UnmarshallingContext.h"
#include "com/thoughtworks/xstream/converters/extended/JavaClassConverter.h"
#include "com/thoughtworks/xstream/converters/extended/JavaMethodConverter.h"
#include "com/thoughtworks/xstream/core/ClassLoaderReference.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamWriter.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/Method.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface ComThoughtworksXstreamConvertersExtendedJavaMethodConverter () {
 @public
  id<ComThoughtworksXstreamConvertersSingleValueConverter> javaClassConverter_;
}

- (void)marshalMethodWithComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer
                                                             withNSString:(NSString *)declaringClassName
                                                             withNSString:(NSString *)methodName
                                                        withIOSClassArray:(IOSObjectArray *)parameterTypes;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersExtendedJavaMethodConverter, javaClassConverter_, id<ComThoughtworksXstreamConvertersSingleValueConverter>)

__attribute__((unused)) static void ComThoughtworksXstreamConvertersExtendedJavaMethodConverter_marshalMethodWithComThoughtworksXstreamIoHierarchicalStreamWriter_withNSString_withNSString_withIOSClassArray_(ComThoughtworksXstreamConvertersExtendedJavaMethodConverter *self, id<ComThoughtworksXstreamIoHierarchicalStreamWriter> writer, NSString *declaringClassName, NSString *methodName, IOSObjectArray *parameterTypes);


#line 34
@implementation ComThoughtworksXstreamConvertersExtendedJavaMethodConverter


#line 43
- (instancetype)initWithComThoughtworksXstreamCoreClassLoaderReference:(ComThoughtworksXstreamCoreClassLoaderReference *)classLoaderReference {
  ComThoughtworksXstreamConvertersExtendedJavaMethodConverter_initWithComThoughtworksXstreamCoreClassLoaderReference_(self, classLoaderReference);
  return self;
}


#line 50
- (instancetype)initWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader {
  ComThoughtworksXstreamConvertersExtendedJavaMethodConverter_initWithJavaLangClassLoader_(self, classLoader);
  return self;
}


#line 59
- (instancetype)initWithComThoughtworksXstreamConvertersSingleValueConverter:(id<ComThoughtworksXstreamConvertersSingleValueConverter>)javaClassConverter {
  ComThoughtworksXstreamConvertersExtendedJavaMethodConverter_initWithComThoughtworksXstreamConvertersSingleValueConverter_(self, javaClassConverter);
  return self;
}


#line 63
- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  return [((IOSClass *) nil_chk(type)) isEqual:JavaLangReflectMethod_class_()] || [type isEqual:JavaLangReflectConstructor_class_()];
}

- (void)marshalWithId:(id)source
withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer
withComThoughtworksXstreamConvertersMarshallingContext:(id<ComThoughtworksXstreamConvertersMarshallingContext>)context {
  if ([source isKindOfClass:[JavaLangReflectMethod class]]) {
    JavaLangReflectMethod *method = (JavaLangReflectMethod *) check_class_cast(source, [JavaLangReflectMethod class]);
    NSString *declaringClassName = [((id<ComThoughtworksXstreamConvertersSingleValueConverter>) nil_chk(javaClassConverter_)) toStringWithId:[((JavaLangReflectMethod *) nil_chk(method)) getDeclaringClass]];
    ComThoughtworksXstreamConvertersExtendedJavaMethodConverter_marshalMethodWithComThoughtworksXstreamIoHierarchicalStreamWriter_withNSString_withNSString_withIOSClassArray_(self, writer, declaringClassName, [method getName], [method getParameterTypes]);
  }
  else {
    
#line 73
    JavaLangReflectConstructor *method = (JavaLangReflectConstructor *) check_class_cast(source, [JavaLangReflectConstructor class]);
    NSString *declaringClassName = [((id<ComThoughtworksXstreamConvertersSingleValueConverter>) nil_chk(javaClassConverter_)) toStringWithId:[((JavaLangReflectConstructor *) nil_chk(method)) getDeclaringClass]];
    ComThoughtworksXstreamConvertersExtendedJavaMethodConverter_marshalMethodWithComThoughtworksXstreamIoHierarchicalStreamWriter_withNSString_withNSString_withIOSClassArray_(self, writer, declaringClassName, nil, [method getParameterTypes]);
  }
}


#line 79
- (void)marshalMethodWithComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer
                                                             withNSString:(NSString *)declaringClassName
                                                             withNSString:(NSString *)methodName
                                                        withIOSClassArray:(IOSObjectArray *)parameterTypes {
  ComThoughtworksXstreamConvertersExtendedJavaMethodConverter_marshalMethodWithComThoughtworksXstreamIoHierarchicalStreamWriter_withNSString_withNSString_withIOSClassArray_(self, writer, declaringClassName, methodName, parameterTypes);
}


#line 101
- (id)unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
           withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context {
  @try {
    jboolean isMethodNotConstructor = [((IOSClass *) nil_chk([((id<ComThoughtworksXstreamConvertersUnmarshallingContext>) nil_chk(context)) getRequiredType])) isEqual:JavaLangReflectMethod_class_()];
    
#line 105
    [((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader)) moveDown];
    NSString *declaringClassName = [reader getValue];
    IOSClass *declaringClass = (IOSClass *) check_class_cast([((id<ComThoughtworksXstreamConvertersSingleValueConverter>) nil_chk(javaClassConverter_)) fromStringWithNSString:declaringClassName], [IOSClass class]);
    [reader moveUp];
    
#line 110
    NSString *methodName = nil;
    if (isMethodNotConstructor) {
      [reader moveDown];
      methodName = [reader getValue];
      [reader moveUp];
    }
    
#line 117
    [reader moveDown];
    id<JavaUtilList> parameterTypeList = new_JavaUtilArrayList_init();
    while ([reader hasMoreChildren]) {
      [reader moveDown];
      NSString *parameterTypeName = [reader getValue];
      [parameterTypeList addWithId:[javaClassConverter_ fromStringWithNSString:parameterTypeName]];
      [reader moveUp];
    }
    IOSObjectArray *parameterTypes = (IOSObjectArray *) check_class_cast([parameterTypeList toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[parameterTypeList size] type:IOSClass_class_()]], [IOSObjectArray class]);
    [reader moveUp];
    
#line 128
    if (isMethodNotConstructor) {
      return [((IOSClass *) nil_chk(declaringClass)) getDeclaredMethod:methodName parameterTypes:parameterTypes];
    }
    else {
      
#line 131
      return [((IOSClass *) nil_chk(declaringClass)) getDeclaredConstructor:parameterTypes];
    }
  }
  @catch (
#line 133
  JavaLangNoSuchMethodException *e) {
    @throw new_ComThoughtworksXstreamConvertersConversionException_initWithJavaLangThrowable_(e);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamCoreClassLoaderReference:", "JavaMethodConverter", NULL, 0x1, NULL, NULL },
    { "initWithJavaLangClassLoader:", "JavaMethodConverter", NULL, 0x1, NULL, NULL },
    { "initWithComThoughtworksXstreamConvertersSingleValueConverter:", "JavaMethodConverter", NULL, 0x4, NULL, NULL },
    { "canConvertWithIOSClass:", "canConvert", "Z", 0x1, NULL, NULL },
    { "marshalWithId:withComThoughtworksXstreamIoHierarchicalStreamWriter:withComThoughtworksXstreamConvertersMarshallingContext:", "marshal", "V", 0x1, NULL, NULL },
    { "marshalMethodWithComThoughtworksXstreamIoHierarchicalStreamWriter:withNSString:withNSString:withIOSClassArray:", "marshalMethod", "V", 0x2, NULL, NULL },
    { "unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:", "unmarshal", "Ljava.lang.Object;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "javaClassConverter_", NULL, 0x12, "Lcom.thoughtworks.xstream.converters.SingleValueConverter;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersExtendedJavaMethodConverter = { 2, "JavaMethodConverter", "com.thoughtworks.xstream.converters.extended", NULL, 0x1, 7, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamConvertersExtendedJavaMethodConverter;
}

@end


#line 43
void ComThoughtworksXstreamConvertersExtendedJavaMethodConverter_initWithComThoughtworksXstreamCoreClassLoaderReference_(ComThoughtworksXstreamConvertersExtendedJavaMethodConverter *self, ComThoughtworksXstreamCoreClassLoaderReference *classLoaderReference) {
  (void) ComThoughtworksXstreamConvertersExtendedJavaMethodConverter_initWithComThoughtworksXstreamConvertersSingleValueConverter_(self, new_ComThoughtworksXstreamConvertersExtendedJavaClassConverter_initWithComThoughtworksXstreamCoreClassLoaderReference_(classLoaderReference));
}


#line 43
ComThoughtworksXstreamConvertersExtendedJavaMethodConverter *new_ComThoughtworksXstreamConvertersExtendedJavaMethodConverter_initWithComThoughtworksXstreamCoreClassLoaderReference_(ComThoughtworksXstreamCoreClassLoaderReference *classLoaderReference) {
  ComThoughtworksXstreamConvertersExtendedJavaMethodConverter *self = [ComThoughtworksXstreamConvertersExtendedJavaMethodConverter alloc];
  ComThoughtworksXstreamConvertersExtendedJavaMethodConverter_initWithComThoughtworksXstreamCoreClassLoaderReference_(self, classLoaderReference);
  return self;
}


#line 50
void ComThoughtworksXstreamConvertersExtendedJavaMethodConverter_initWithJavaLangClassLoader_(ComThoughtworksXstreamConvertersExtendedJavaMethodConverter *self, JavaLangClassLoader *classLoader) {
  (void) ComThoughtworksXstreamConvertersExtendedJavaMethodConverter_initWithComThoughtworksXstreamCoreClassLoaderReference_(self, new_ComThoughtworksXstreamCoreClassLoaderReference_initWithJavaLangClassLoader_(classLoader));
}


#line 50
ComThoughtworksXstreamConvertersExtendedJavaMethodConverter *new_ComThoughtworksXstreamConvertersExtendedJavaMethodConverter_initWithJavaLangClassLoader_(JavaLangClassLoader *classLoader) {
  ComThoughtworksXstreamConvertersExtendedJavaMethodConverter *self = [ComThoughtworksXstreamConvertersExtendedJavaMethodConverter alloc];
  ComThoughtworksXstreamConvertersExtendedJavaMethodConverter_initWithJavaLangClassLoader_(self, classLoader);
  return self;
}


#line 59
void ComThoughtworksXstreamConvertersExtendedJavaMethodConverter_initWithComThoughtworksXstreamConvertersSingleValueConverter_(ComThoughtworksXstreamConvertersExtendedJavaMethodConverter *self, id<ComThoughtworksXstreamConvertersSingleValueConverter> javaClassConverter) {
  (void) NSObject_init(self);
  
#line 60
  self->javaClassConverter_ = javaClassConverter;
}


#line 59
ComThoughtworksXstreamConvertersExtendedJavaMethodConverter *new_ComThoughtworksXstreamConvertersExtendedJavaMethodConverter_initWithComThoughtworksXstreamConvertersSingleValueConverter_(id<ComThoughtworksXstreamConvertersSingleValueConverter> javaClassConverter) {
  ComThoughtworksXstreamConvertersExtendedJavaMethodConverter *self = [ComThoughtworksXstreamConvertersExtendedJavaMethodConverter alloc];
  ComThoughtworksXstreamConvertersExtendedJavaMethodConverter_initWithComThoughtworksXstreamConvertersSingleValueConverter_(self, javaClassConverter);
  return self;
}


#line 79
void ComThoughtworksXstreamConvertersExtendedJavaMethodConverter_marshalMethodWithComThoughtworksXstreamIoHierarchicalStreamWriter_withNSString_withNSString_withIOSClassArray_(ComThoughtworksXstreamConvertersExtendedJavaMethodConverter *self, id<ComThoughtworksXstreamIoHierarchicalStreamWriter> writer, NSString *declaringClassName, NSString *methodName, IOSObjectArray *parameterTypes) {
  
#line 81
  [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) startNodeWithNSString:@"class"];
  [writer setValueWithNSString:declaringClassName];
  [writer endNode];
  
#line 85
  if (methodName != nil) {
    
#line 87
    [writer startNodeWithNSString:@"name"];
    [writer setValueWithNSString:methodName];
    [writer endNode];
  }
  
#line 92
  [writer startNodeWithNSString:@"parameter-types"];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(parameterTypes))->size_; i++) {
    [writer startNodeWithNSString:@"class"];
    [writer setValueWithNSString:[((id<ComThoughtworksXstreamConvertersSingleValueConverter>) nil_chk(self->javaClassConverter_)) toStringWithId:IOSObjectArray_Get(parameterTypes, i)]];
    [writer endNode];
  }
  [writer endNode];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamConvertersExtendedJavaMethodConverter)
