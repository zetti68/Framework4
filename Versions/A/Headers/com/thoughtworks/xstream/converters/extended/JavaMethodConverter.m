//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/extended/JavaMethodConverter.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/extended/JavaMethodConverter.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/converters/MarshallingContext.h"
#include "com/thoughtworks/xstream/converters/SingleValueConverter.h"
#include "com/thoughtworks/xstream/converters/UnmarshallingContext.h"
#include "com/thoughtworks/xstream/converters/extended/JavaClassConverter.h"
#include "com/thoughtworks/xstream/converters/extended/JavaMethodConverter.h"
#include "com/thoughtworks/xstream/core/ClassLoaderReference.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamWriter.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/Method.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"


#line 34
@implementation ComThoughtworksXstreamConvertersExtendedJavaMethodConverter


#line 43
- (instancetype)initComThoughtworksXstreamConvertersExtendedJavaMethodConverterWithComThoughtworksXstreamCoreClassLoaderReference:(ComThoughtworksXstreamCoreClassLoaderReference *)classLoaderReference {
  return
#line 44
  [self initComThoughtworksXstreamConvertersExtendedJavaMethodConverterWithComThoughtworksXstreamConvertersSingleValueConverter:[[ComThoughtworksXstreamConvertersExtendedJavaClassConverter alloc] initWithComThoughtworksXstreamCoreClassLoaderReference:classLoaderReference]];
}

- (instancetype)initWithComThoughtworksXstreamCoreClassLoaderReference:(ComThoughtworksXstreamCoreClassLoaderReference *)classLoaderReference {
  return [self initComThoughtworksXstreamConvertersExtendedJavaMethodConverterWithComThoughtworksXstreamCoreClassLoaderReference:
#line 43
classLoaderReference];
}


#line 50
- (instancetype)initWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader {
  return
#line 51
  [self initComThoughtworksXstreamConvertersExtendedJavaMethodConverterWithComThoughtworksXstreamCoreClassLoaderReference:[[ComThoughtworksXstreamCoreClassLoaderReference alloc] initWithJavaLangClassLoader:classLoader]];
}


#line 59
- (instancetype)initComThoughtworksXstreamConvertersExtendedJavaMethodConverterWithComThoughtworksXstreamConvertersSingleValueConverter:(id<ComThoughtworksXstreamConvertersSingleValueConverter>)javaClassConverter {
  if (self = [super init]) {
    
#line 60
    self->javaClassConverter_ = javaClassConverter;
  }
  return self;
}

- (instancetype)initWithComThoughtworksXstreamConvertersSingleValueConverter:(id<ComThoughtworksXstreamConvertersSingleValueConverter>)javaClassConverter {
  return [self initComThoughtworksXstreamConvertersExtendedJavaMethodConverterWithComThoughtworksXstreamConvertersSingleValueConverter:
#line 59
javaClassConverter];
}


#line 63
- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  
#line 64
  return [((IOSClass *) nil_chk(type)) isEqual:[IOSClass classWithClass:[JavaLangReflectMethod class]]] || [type isEqual:[IOSClass classWithClass:[JavaLangReflectConstructor class]]];
}


#line 67
- (void)marshalWithId:(id)source
withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer
withComThoughtworksXstreamConvertersMarshallingContext:(id<ComThoughtworksXstreamConvertersMarshallingContext>)context {
  
#line 68
  if ([source isKindOfClass:[JavaLangReflectMethod class]]) {
    JavaLangReflectMethod *method = (JavaLangReflectMethod *) check_class_cast(source, [JavaLangReflectMethod class]);
    NSString *declaringClassName = [((id<ComThoughtworksXstreamConvertersSingleValueConverter>) nil_chk(javaClassConverter_)) toStringWithId:[((JavaLangReflectMethod *) nil_chk(method)) getDeclaringClass]];
    [self marshalMethodWithComThoughtworksXstreamIoHierarchicalStreamWriter:writer withNSString:declaringClassName withNSString:[method getName] withIOSClassArray:[method getParameterTypes]];
  }
  else {
    
#line 73
    JavaLangReflectConstructor *method = (JavaLangReflectConstructor *) check_class_cast(source, [JavaLangReflectConstructor class]);
    NSString *declaringClassName = [((id<ComThoughtworksXstreamConvertersSingleValueConverter>) nil_chk(javaClassConverter_)) toStringWithId:[((JavaLangReflectConstructor *) nil_chk(method)) getDeclaringClass]];
    [self marshalMethodWithComThoughtworksXstreamIoHierarchicalStreamWriter:writer withNSString:declaringClassName withNSString:nil withIOSClassArray:[method getParameterTypes]];
  }
}


#line 79
- (void)marshalMethodWithComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer
                                                             withNSString:(NSString *)declaringClassName
                                                             withNSString:(NSString *)methodName
                                                        withIOSClassArray:(IOSObjectArray *)parameterTypes {
  
#line 81
  [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) startNodeWithNSString:@"class"];
  [writer setValueWithNSString:declaringClassName];
  [writer endNode];
  
#line 85
  if (methodName != nil) {
    
#line 87
    [writer startNodeWithNSString:@"name"];
    [writer setValueWithNSString:methodName];
    [writer endNode];
  }
  
#line 92
  [writer startNodeWithNSString:@"parameter-types"];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(parameterTypes))->size_; i++) {
    [writer startNodeWithNSString:@"class"];
    [writer setValueWithNSString:[((id<ComThoughtworksXstreamConvertersSingleValueConverter>) nil_chk(javaClassConverter_)) toStringWithId:IOSObjectArray_Get(parameterTypes, i)]];
    [writer endNode];
  }
  [writer endNode];
}


#line 101
- (id)unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
           withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context {
  
#line 102
  @try {
    jboolean isMethodNotConstructor = [((IOSClass *) nil_chk([((id<ComThoughtworksXstreamConvertersUnmarshallingContext>) nil_chk(context)) getRequiredType])) isEqual:[IOSClass classWithClass:[JavaLangReflectMethod class]]];
    
#line 105
    [((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader)) moveDown];
    NSString *declaringClassName = [reader getValue];
    IOSClass *declaringClass = (IOSClass *) check_class_cast([((id<ComThoughtworksXstreamConvertersSingleValueConverter>) nil_chk(javaClassConverter_)) fromStringWithNSString:declaringClassName], [IOSClass class]);
    [reader moveUp];
    
#line 110
    NSString *methodName = nil;
    if (isMethodNotConstructor) {
      [reader moveDown];
      methodName = [reader getValue];
      [reader moveUp];
    }
    
#line 117
    [reader moveDown];
    id<JavaUtilList> parameterTypeList = [[JavaUtilArrayList alloc] init];
    while ([reader hasMoreChildren]) {
      [reader moveDown];
      NSString *parameterTypeName = [reader getValue];
      [parameterTypeList addWithId:[javaClassConverter_ fromStringWithNSString:parameterTypeName]];
      [reader moveUp];
    }
    IOSObjectArray *parameterTypes = (IOSObjectArray *) check_class_cast([parameterTypeList toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[parameterTypeList size] type:[IOSClass classWithClass:[IOSClass class]]]], [IOSObjectArray class]);
    [reader moveUp];
    
#line 128
    if (isMethodNotConstructor) {
      return [((IOSClass *) nil_chk(declaringClass)) getDeclaredMethod:methodName parameterTypes:parameterTypes];
    }
    else {
      
#line 131
      return [((IOSClass *) nil_chk(declaringClass)) getDeclaredConstructor:parameterTypes];
    }
  }
  @catch (
#line 133
  JavaLangNoSuchMethodException *e) {
    @throw [[ComThoughtworksXstreamConvertersConversionException alloc] initWithJavaLangThrowable:e];
  }
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamConvertersExtendedJavaMethodConverter *)other {
  [super copyAllFieldsTo:other];
  other->javaClassConverter_ = javaClassConverter_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamCoreClassLoaderReference:", "JavaMethodConverter", NULL, 0x1, NULL },
    { "initWithJavaLangClassLoader:", "JavaMethodConverter", NULL, 0x1, NULL },
    { "initWithComThoughtworksXstreamConvertersSingleValueConverter:", "JavaMethodConverter", NULL, 0x4, NULL },
    { "canConvertWithIOSClass:", "canConvert", "Z", 0x1, NULL },
    { "marshalWithId:withComThoughtworksXstreamIoHierarchicalStreamWriter:withComThoughtworksXstreamConvertersMarshallingContext:", "marshal", "V", 0x1, NULL },
    { "marshalMethodWithComThoughtworksXstreamIoHierarchicalStreamWriter:withNSString:withNSString:withIOSClassArray:", "marshalMethod", "V", 0x2, NULL },
    { "unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:", "unmarshal", "Ljava.lang.Object;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "javaClassConverter_", NULL, 0x12, "Lcom.thoughtworks.xstream.converters.SingleValueConverter;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersExtendedJavaMethodConverter = { "JavaMethodConverter", "com.thoughtworks.xstream.converters.extended", NULL, 0x1, 7, methods, 1, fields, 0, NULL};
  return &_ComThoughtworksXstreamConvertersExtendedJavaMethodConverter;
}

@end
