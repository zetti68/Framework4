//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/extended/SqlTimestampConverter.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/extended/SqlTimestampConverter.java"

#include "IOSClass.h"
#include "com/thoughtworks/xstream/converters/extended/SqlTimestampConverter.h"
#include "com/thoughtworks/xstream/core/util/ThreadSafeSimpleDateFormat.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/sql/Timestamp.h"
#include "java/text/ParseException.h"
#include "java/util/Date.h"
#include "java/util/TimeZone.h"


#line 28
@implementation ComThoughtworksXstreamConvertersExtendedSqlTimestampConverter


#line 33
- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  
#line 34
  return [((IOSClass *) nil_chk(type)) isEqual:[IOSClass classWithClass:[JavaSqlTimestamp class]]];
}


#line 37
- (NSString *)toStringWithId:(id)obj {
  
#line 38
  JavaSqlTimestamp *timestamp = (JavaSqlTimestamp *) check_class_cast(obj, [JavaSqlTimestamp class]);
  JavaLangStringBuffer *buffer = [((JavaLangStringBuffer *) [[JavaLangStringBuffer alloc] initWithNSString:[((ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *) nil_chk(format_)) formatWithJavaUtilDate:timestamp]]) appendWithChar:'.'];
  if ([((JavaSqlTimestamp *) nil_chk(timestamp)) getNanos] == 0) {
    (void) [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithChar:'0'];
  }
  else {
    
#line 43
    NSString *nanos = [NSString valueOfInt:[timestamp getNanos] + 1000000000];
    jint last = 10;
    while (last > 2 && [((NSString *) nil_chk(nanos)) charAtWithInt:last - 1] == '0')
#line 46
    --last;
    (void) [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithJavaLangCharSequence:[((NSString *) nil_chk(nanos)) subSequenceFrom:1 to:last]];
  }
  return [((JavaLangStringBuffer *) nil_chk(buffer)) description];
}


#line 52
- (id)fromStringWithNSString:(NSString *)str {
  
#line 53
  jint idx = [((NSString *) nil_chk(str)) lastIndexOf:'.'];
  if (idx < 0 || ((jint) [str length]) - idx < 2 || ((jint) [str length]) - idx > 10) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:
#line 56
    @"Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]"];
  }
  @try {
    JavaSqlTimestamp *timestamp = [[JavaSqlTimestamp alloc] initWithLong:[((JavaUtilDate *) nil_chk([((ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *) nil_chk(format_)) parseWithNSString:[str substring:0 endIndex:idx]])) getTime]];
    JavaLangStringBuffer *buffer = [[JavaLangStringBuffer alloc] initWithNSString:[str substring:idx + 1]];
    while ([buffer sequenceLength] != 9) {
      (void) [buffer appendWithChar:'0'];
    }
    [timestamp setNanosWithInt:[JavaLangInteger parseIntWithNSString:[buffer description]]];
    return timestamp;
  }
  @catch (
#line 66
  JavaTextParseException *e) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:
#line 68
    @"Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]"];
  }
}

- (instancetype)init {
  if (self = [super init]) {
    format_ =
#line 30
    [[ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat alloc] initWithNSString:
#line 31
    @"yyyy-MM-dd HH:mm:ss" withJavaUtilTimeZone:[JavaUtilTimeZone getTimeZoneWithNSString:@"UTC"] withInt:0 withInt:5 withBoolean:NO];
  }
  return self;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamConvertersExtendedSqlTimestampConverter *)other {
  [super copyAllFieldsTo:other];
  other->format_ = format_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "canConvertWithIOSClass:", "canConvert", "Z", 0x1, NULL },
    { "toStringWithId:", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "fromStringWithNSString:", "fromString", "Ljava.lang.Object;", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "format_", NULL, 0x12, "Lcom.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersExtendedSqlTimestampConverter = { "SqlTimestampConverter", "com.thoughtworks.xstream.converters.extended", NULL, 0x1, 4, methods, 1, fields, 0, NULL};
  return &_ComThoughtworksXstreamConvertersExtendedSqlTimestampConverter;
}

@end
