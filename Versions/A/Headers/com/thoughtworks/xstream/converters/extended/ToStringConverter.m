//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/extended/ToStringConverter.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/extended/ToStringConverter.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/converters/extended/ToStringConverter.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/InvocationTargetException.h"


#line 28
@implementation ComThoughtworksXstreamConvertersExtendedToStringConverter


#line 32
- (instancetype)initWithIOSClass:(IOSClass *)clazz {
  if (self = [super init]) {
    
#line 33
    self->clazz_ = clazz;
    
#line 34
    ctor_ = [((IOSClass *) nil_chk(clazz)) getConstructor:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass classWithClass:[NSString class]] } count:1 type:[IOSClass classWithClass:[IOSClass class]]]];
  }
  return self;
}


#line 36
- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  
#line 37
  return [((IOSClass *) nil_chk(type)) isEqual:clazz_];
}


#line 39
- (NSString *)toStringWithId:(id)obj {
  
#line 40
  return obj == nil ? nil : [obj description];
}


#line 43
- (id)fromStringWithNSString:(NSString *)str {
  
#line 44
  @try {
    return [((JavaLangReflectConstructor *) nil_chk(ctor_)) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ str } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
  }
  @catch (
#line 46
  JavaLangInstantiationException *e) {
    @throw [[ComThoughtworksXstreamConvertersConversionException alloc] initWithNSString:@"Unable to instantiate single String param constructor" withJavaLangThrowable:e];
  }
  @catch (
#line 48
  JavaLangIllegalAccessException *e) {
    @throw [[ComThoughtworksXstreamConvertersConversionException alloc] initWithNSString:@"Unable to access single String param constructor" withJavaLangThrowable:e];
  }
  @catch (
#line 50
  JavaLangReflectInvocationTargetException *e) {
    @throw [[ComThoughtworksXstreamConvertersConversionException alloc] initWithNSString:@"Unable to target single String param constructor" withJavaLangThrowable:[((JavaLangReflectInvocationTargetException *) nil_chk(e)) getTargetException]];
  }
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamConvertersExtendedToStringConverter *)other {
  [super copyAllFieldsTo:other];
  other->clazz_ = clazz_;
  other->ctor_ = ctor_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithIOSClass:", "ToStringConverter", NULL, 0x1, "Ljava.lang.NoSuchMethodException;" },
    { "canConvertWithIOSClass:", "canConvert", "Z", 0x1, NULL },
    { "toStringWithId:", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "fromStringWithNSString:", "fromString", "Ljava.lang.Object;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "clazz_", NULL, 0x12, "Ljava.lang.Class;", NULL,  },
    { "ctor_", NULL, 0x12, "Ljava.lang.reflect.Constructor;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersExtendedToStringConverter = { "ToStringConverter", "com.thoughtworks.xstream.converters.extended", NULL, 0x1, 4, methods, 2, fields, 0, NULL};
  return &_ComThoughtworksXstreamConvertersExtendedToStringConverter;
}

@end
