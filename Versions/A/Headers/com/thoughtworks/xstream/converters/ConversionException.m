//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/converters/ConversionException.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/converters/ConversionException.java"

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/XStreamException.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/core/util/OrderRetainingMap.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/Throwable.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface ComThoughtworksXstreamConvertersConversionException () {
 @public
  id<JavaUtilMap> stuff_;
}

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersConversionException, stuff_, id<JavaUtilMap>)

static NSString *ComThoughtworksXstreamConvertersConversionException_SEPARATOR_ = 
#line 34
@"\n-------------------------------";
J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamConvertersConversionException, SEPARATOR_, NSString *)


#line 32
@implementation ComThoughtworksXstreamConvertersConversionException


#line 37
- (instancetype)initWithNSString:(NSString *)msg
           withJavaLangThrowable:(JavaLangThrowable *)cause {
  ComThoughtworksXstreamConvertersConversionException_initWithNSString_withJavaLangThrowable_(self, msg, cause);
  return self;
}


#line 48
- (instancetype)initWithNSString:(NSString *)msg {
  ComThoughtworksXstreamConvertersConversionException_initWithNSString_(self, msg);
  return self;
}


#line 52
- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)cause {
  ComThoughtworksXstreamConvertersConversionException_initWithJavaLangThrowable_(self, cause);
  return self;
}


#line 56
- (NSString *)getWithNSString:(NSString *)errorKey {
  return (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(stuff_)) getWithId:errorKey], [NSString class]);
}

- (void)addWithNSString:(NSString *)name
           withNSString:(NSString *)information {
  NSString *key = name;
  jint i = 0;
  while ([((id<JavaUtilMap>) nil_chk(stuff_)) containsKeyWithId:key]) {
    NSString *value = (NSString *) check_class_cast([stuff_ getWithId:key], [NSString class]);
    if ([((NSString *) nil_chk(information)) isEqual:value])
#line 66
    return;
    key = JreStrcat("$CIC", name, '[', ++i, ']');
  }
  (void) [stuff_ putWithId:key withId:information];
}


#line 72
- (void)setWithNSString:(NSString *)name
           withNSString:(NSString *)information {
  NSString *key = name;
  jint i = 0;
  (void) [((id<JavaUtilMap>) nil_chk(stuff_)) putWithId:key withId:information];
  while ([stuff_ containsKeyWithId:key]) {
    if (i != 0) {
      (void) [stuff_ removeWithId:key];
    }
    key = JreStrcat("$CIC", name, '[', ++i, ']');
  }
}


#line 84
- (id<JavaUtilIterator>)keys {
  return [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(stuff_)) keySet])) iterator];
}

- (NSString *)getMessage {
  JavaLangStringBuffer *result = new_JavaLangStringBuffer_init();
  if ([super getMessage] != nil) {
    (void) [result appendWithNSString:[super getMessage]];
  }
  if (![((NSString *) nil_chk([result description])) hasSuffix:ComThoughtworksXstreamConvertersConversionException_SEPARATOR_]) {
    (void) [result appendWithNSString:@"\n---- Debugging information ----"];
  }
  for (id<JavaUtilIterator> iterator = [self keys]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
    NSString *k = (NSString *) check_class_cast([iterator next], [NSString class]);
    NSString *v = [self getWithNSString:k];
    (void) [((JavaLangStringBuffer *) nil_chk([result appendWithChar:0x000a])) appendWithNSString:k];
    (void) [result appendWithNSString:[@"                    " substring:JavaLangMath_minWithInt_withInt_(20, ((jint) [((NSString *) nil_chk(k)) length]))]];
    (void) [((JavaLangStringBuffer *) nil_chk([result appendWithNSString:@": "])) appendWithNSString:v];
  }
  (void) [result appendWithNSString:ComThoughtworksXstreamConvertersConversionException_SEPARATOR_];
  return [result description];
}

- (NSString *)getShortMessage {
  return [super getMessage];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withJavaLangThrowable:", "ConversionException", NULL, 0x1, NULL, NULL },
    { "initWithNSString:", "ConversionException", NULL, 0x1, NULL, NULL },
    { "initWithJavaLangThrowable:", "ConversionException", NULL, 0x1, NULL, NULL },
    { "getWithNSString:", "get", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "addWithNSString:withNSString:", "add", "V", 0x1, NULL, NULL },
    { "setWithNSString:withNSString:", "set", "V", 0x1, NULL, NULL },
    { "keys", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "getMessage", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getShortMessage", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "SEPARATOR_", NULL, 0x1a, "Ljava.lang.String;", &ComThoughtworksXstreamConvertersConversionException_SEPARATOR_, NULL,  },
    { "stuff_", NULL, 0x2, "Ljava.util.Map;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersConversionException = { 2, "ConversionException", "com.thoughtworks.xstream.converters", NULL, 0x1, 9, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamConvertersConversionException;
}

@end


#line 37
void ComThoughtworksXstreamConvertersConversionException_initWithNSString_withJavaLangThrowable_(ComThoughtworksXstreamConvertersConversionException *self, NSString *msg, JavaLangThrowable *cause) {
  (void) ComThoughtworksXstreamXStreamException_initWithNSString_withJavaLangThrowable_(self, msg, cause);
  self->stuff_ = new_ComThoughtworksXstreamCoreUtilOrderRetainingMap_init();
  
#line 39
  if (msg != nil) {
    [self addWithNSString:@"message" withNSString:msg];
  }
  if (cause != nil) {
    [self addWithNSString:@"cause-exception" withNSString:[[cause getClass] getName]];
    [self addWithNSString:@"cause-message" withNSString:[cause isKindOfClass:[ComThoughtworksXstreamConvertersConversionException class]] ? [((ComThoughtworksXstreamConvertersConversionException *) check_class_cast(cause, [ComThoughtworksXstreamConvertersConversionException class])) getShortMessage] : [cause getMessage]];
  }
}


#line 37
ComThoughtworksXstreamConvertersConversionException *new_ComThoughtworksXstreamConvertersConversionException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *cause) {
  ComThoughtworksXstreamConvertersConversionException *self = [ComThoughtworksXstreamConvertersConversionException alloc];
  ComThoughtworksXstreamConvertersConversionException_initWithNSString_withJavaLangThrowable_(self, msg, cause);
  return self;
}


#line 48
void ComThoughtworksXstreamConvertersConversionException_initWithNSString_(ComThoughtworksXstreamConvertersConversionException *self, NSString *msg) {
  (void) ComThoughtworksXstreamXStreamException_initWithNSString_(self, msg);
  self->stuff_ = new_ComThoughtworksXstreamCoreUtilOrderRetainingMap_init();
}


#line 48
ComThoughtworksXstreamConvertersConversionException *new_ComThoughtworksXstreamConvertersConversionException_initWithNSString_(NSString *msg) {
  ComThoughtworksXstreamConvertersConversionException *self = [ComThoughtworksXstreamConvertersConversionException alloc];
  ComThoughtworksXstreamConvertersConversionException_initWithNSString_(self, msg);
  return self;
}


#line 52
void ComThoughtworksXstreamConvertersConversionException_initWithJavaLangThrowable_(ComThoughtworksXstreamConvertersConversionException *self, JavaLangThrowable *cause) {
  (void) ComThoughtworksXstreamConvertersConversionException_initWithNSString_withJavaLangThrowable_(self, [((JavaLangThrowable *) nil_chk(cause)) getMessage], cause);
}


#line 52
ComThoughtworksXstreamConvertersConversionException *new_ComThoughtworksXstreamConvertersConversionException_initWithJavaLangThrowable_(JavaLangThrowable *cause) {
  ComThoughtworksXstreamConvertersConversionException *self = [ComThoughtworksXstreamConvertersConversionException alloc];
  ComThoughtworksXstreamConvertersConversionException_initWithJavaLangThrowable_(self, cause);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamConvertersConversionException)
