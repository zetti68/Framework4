//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/enums/EnumSetConverter.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/enums/EnumSetConverter.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/converters/MarshallingContext.h"
#include "com/thoughtworks/xstream/converters/UnmarshallingContext.h"
#include "com/thoughtworks/xstream/converters/enums/EnumSetConverter.h"
#include "com/thoughtworks/xstream/core/util/Fields.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamWriter.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/lang/Enum.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/reflect/Field.h"
#include "java/util/EnumSet.h"
#include "java/util/Iterator.h"

BOOL ComThoughtworksXstreamConvertersEnumsEnumSetConverter_initialized = NO;


#line 40
@implementation ComThoughtworksXstreamConvertersEnumsEnumSetConverter

JavaLangReflectField * ComThoughtworksXstreamConvertersEnumsEnumSetConverter_typeField_;


#line 45
- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper {
  if (self = [super init]) {
    
#line 46
    self->mapper_ = mapper;
  }
  return self;
}


#line 49
- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  
#line 50
  return ComThoughtworksXstreamConvertersEnumsEnumSetConverter_typeField_ != nil && [[IOSClass classWithClass:[JavaUtilEnumSet class]] isAssignableFrom:type];
}


#line 53
- (void)marshalWithId:(id)source
withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer
withComThoughtworksXstreamConvertersMarshallingContext:(id<ComThoughtworksXstreamConvertersMarshallingContext>)context {
  
#line 54
  JavaUtilEnumSet *set = (JavaUtilEnumSet *) check_class_cast(source, [JavaUtilEnumSet class]);
  IOSClass *enumTypeForSet = (IOSClass *) check_class_cast([ComThoughtworksXstreamCoreUtilFields readWithJavaLangReflectField:ComThoughtworksXstreamConvertersEnumsEnumSetConverter_typeField_ withId:set], [IOSClass class]);
  NSString *attributeName = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper_)) aliasForSystemAttributeWithNSString:@"enum-type"];
  if (attributeName != nil) {
    [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) addAttributeWithNSString:attributeName withNSString:[mapper_ serializedClassWithIOSClass:enumTypeForSet]];
  }
  [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) setValueWithNSString:[self joinEnumValuesWithJavaUtilEnumSet:set]];
}


#line 63
- (NSString *)joinEnumValuesWithJavaUtilEnumSet:(JavaUtilEnumSet *)set {
  
#line 64
  jboolean seenFirst = NO;
  JavaLangStringBuffer *result = [[JavaLangStringBuffer alloc] init];
  for (id<JavaUtilIterator> iterator = [((JavaUtilEnumSet *) nil_chk(set)) iterator]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
    JavaLangEnum *value = (JavaLangEnum *) check_class_cast([iterator next], [JavaLangEnum class]);
    if (seenFirst) {
      (void) [result appendWithChar:','];
    }
    else {
      
#line 71
      seenFirst = YES;
    }
    (void) [result appendWithNSString:[((JavaLangEnum *) nil_chk(value)) name]];
  }
  return [result description];
}


#line 79
- (id)unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
           withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context {
  
#line 80
  NSString *attributeName = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper_)) aliasForSystemAttributeWithNSString:@"enum-type"];
  if (attributeName == nil) {
    @throw [[ComThoughtworksXstreamConvertersConversionException alloc] initWithNSString:@"No EnumType specified for EnumSet"];
  }
  IOSClass *enumTypeForSet = [mapper_ realClassWithNSString:[((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader)) getAttributeWithNSString:attributeName]];
  JavaUtilEnumSet *set = [JavaUtilEnumSet noneOfWithIOSClass:enumTypeForSet];
  IOSObjectArray *enumValues = [((NSString *) nil_chk([reader getValue])) split:@","];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(enumValues))->size_; i++) {
    NSString *enumValue = IOSObjectArray_Get(enumValues, i);
    if (((jint) [((NSString *) nil_chk(enumValue)) length]) > 0) {
      [((JavaUtilEnumSet *) nil_chk(set)) addWithId:[JavaLangEnum valueOfWithIOSClass:enumTypeForSet withNSString:enumValue]];
    }
  }
  return set;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamConvertersEnumsEnumSetConverter *)other {
  [super copyAllFieldsTo:other];
  other->mapper_ = mapper_;
}

+ (void)initialize {
  if (self == [ComThoughtworksXstreamConvertersEnumsEnumSetConverter class]) {
    ComThoughtworksXstreamConvertersEnumsEnumSetConverter_typeField_ =
#line 42
    [ComThoughtworksXstreamCoreUtilFields locateWithIOSClass:[IOSClass classWithClass:[JavaUtilEnumSet class]] withIOSClass:[IOSClass classWithClass:[IOSClass class]] withBoolean:NO];
    ComThoughtworksXstreamConvertersEnumsEnumSetConverter_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamMapperMapper:", "EnumSetConverter", NULL, 0x1, NULL },
    { "canConvertWithIOSClass:", "canConvert", "Z", 0x1, NULL },
    { "marshalWithId:withComThoughtworksXstreamIoHierarchicalStreamWriter:withComThoughtworksXstreamConvertersMarshallingContext:", "marshal", "V", 0x1, NULL },
    { "joinEnumValuesWithJavaUtilEnumSet:", "joinEnumValues", "Ljava.lang.String;", 0x2, NULL },
    { "unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:", "unmarshal", "Ljava.lang.Object;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "typeField_", NULL, 0x1a, "Ljava.lang.reflect.Field;", &ComThoughtworksXstreamConvertersEnumsEnumSetConverter_typeField_,  },
    { "mapper_", NULL, 0x12, "Lcom.thoughtworks.xstream.mapper.Mapper;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersEnumsEnumSetConverter = { "EnumSetConverter", "com.thoughtworks.xstream.converters.enums", NULL, 0x1, 5, methods, 2, fields, 0, NULL};
  return &_ComThoughtworksXstreamConvertersEnumsEnumSetConverter;
}

@end
