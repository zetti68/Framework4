//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/converters/basic/StringConverter.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/converters/basic/StringConverter.java"

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/basic/AbstractSingleValueConverter.h"
#include "com/thoughtworks/xstream/converters/basic/StringConverter.h"
#include "com/thoughtworks/xstream/core/util/WeakCache.h"
#include "java/util/Collections.h"
#include "java/util/Map.h"

#define ComThoughtworksXstreamConvertersBasicStringConverter_LENGTH_LIMIT 38

@interface ComThoughtworksXstreamConvertersBasicStringConverter () {
 @public
  id<JavaUtilMap> cache_;
  jint lengthLimit_;
}

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersBasicStringConverter, cache_, id<JavaUtilMap>)

J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamConvertersBasicStringConverter, LENGTH_LIMIT, jint)


#line 33
@implementation ComThoughtworksXstreamConvertersBasicStringConverter


#line 52
- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map
                            withInt:(jint)lengthLimit {
  ComThoughtworksXstreamConvertersBasicStringConverter_initWithJavaUtilMap_withInt_(self, map, lengthLimit);
  return self;
}


#line 62
- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map {
  ComThoughtworksXstreamConvertersBasicStringConverter_initWithJavaUtilMap_(self, map);
  return self;
}


#line 72
- (instancetype)initWithInt:(jint)lengthLimit {
  ComThoughtworksXstreamConvertersBasicStringConverter_initWithInt_(self, lengthLimit);
  return self;
}


#line 79
- (instancetype)init {
  ComThoughtworksXstreamConvertersBasicStringConverter_init(self);
  return self;
}


#line 83
- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  return [((IOSClass *) nil_chk(type)) isEqual:NSString_class_()];
}

- (id)fromStringWithNSString:(NSString *)str {
  if (cache_ != nil && str != nil && (lengthLimit_ < 0 || ((jint) [str length]) <= lengthLimit_)) {
    NSString *s = (NSString *) check_class_cast([cache_ getWithId:str], [NSString class]);
    
#line 91
    if (s == nil) {
      
#line 93
      (void) [cache_ putWithId:str withId:str];
      
#line 95
      s = str;
    }
    
#line 98
    return s;
  }
  else {
    
#line 100
    return str;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilMap:withInt:", "StringConverter", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilMap:", "StringConverter", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "StringConverter", NULL, 0x1, NULL, NULL },
    { "init", "StringConverter", NULL, 0x1, NULL, NULL },
    { "canConvertWithIOSClass:", "canConvert", "Z", 0x1, NULL, NULL },
    { "fromStringWithNSString:", "fromString", "Ljava.lang.Object;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LENGTH_LIMIT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = ComThoughtworksXstreamConvertersBasicStringConverter_LENGTH_LIMIT },
    { "cache_", NULL, 0x12, "Ljava.util.Map;", NULL, NULL,  },
    { "lengthLimit_", NULL, 0x12, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersBasicStringConverter = { 2, "StringConverter", "com.thoughtworks.xstream.converters.basic", NULL, 0x1, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamConvertersBasicStringConverter;
}

@end


#line 52
void ComThoughtworksXstreamConvertersBasicStringConverter_initWithJavaUtilMap_withInt_(ComThoughtworksXstreamConvertersBasicStringConverter *self, id<JavaUtilMap> map, jint lengthLimit) {
  (void) ComThoughtworksXstreamConvertersBasicAbstractSingleValueConverter_init(self);
  
#line 53
  self->cache_ = map;
  self->lengthLimit_ = lengthLimit;
}


#line 52
ComThoughtworksXstreamConvertersBasicStringConverter *new_ComThoughtworksXstreamConvertersBasicStringConverter_initWithJavaUtilMap_withInt_(id<JavaUtilMap> map, jint lengthLimit) {
  ComThoughtworksXstreamConvertersBasicStringConverter *self = [ComThoughtworksXstreamConvertersBasicStringConverter alloc];
  ComThoughtworksXstreamConvertersBasicStringConverter_initWithJavaUtilMap_withInt_(self, map, lengthLimit);
  return self;
}


#line 62
void ComThoughtworksXstreamConvertersBasicStringConverter_initWithJavaUtilMap_(ComThoughtworksXstreamConvertersBasicStringConverter *self, id<JavaUtilMap> map) {
  (void) ComThoughtworksXstreamConvertersBasicStringConverter_initWithJavaUtilMap_withInt_(self, map, ComThoughtworksXstreamConvertersBasicStringConverter_LENGTH_LIMIT);
}


#line 62
ComThoughtworksXstreamConvertersBasicStringConverter *new_ComThoughtworksXstreamConvertersBasicStringConverter_initWithJavaUtilMap_(id<JavaUtilMap> map) {
  ComThoughtworksXstreamConvertersBasicStringConverter *self = [ComThoughtworksXstreamConvertersBasicStringConverter alloc];
  ComThoughtworksXstreamConvertersBasicStringConverter_initWithJavaUtilMap_(self, map);
  return self;
}


#line 72
void ComThoughtworksXstreamConvertersBasicStringConverter_initWithInt_(ComThoughtworksXstreamConvertersBasicStringConverter *self, jint lengthLimit) {
  (void) ComThoughtworksXstreamConvertersBasicStringConverter_initWithJavaUtilMap_withInt_(self, JavaUtilCollections_synchronizedMapWithJavaUtilMap_(new_ComThoughtworksXstreamCoreUtilWeakCache_init()), lengthLimit);
}


#line 72
ComThoughtworksXstreamConvertersBasicStringConverter *new_ComThoughtworksXstreamConvertersBasicStringConverter_initWithInt_(jint lengthLimit) {
  ComThoughtworksXstreamConvertersBasicStringConverter *self = [ComThoughtworksXstreamConvertersBasicStringConverter alloc];
  ComThoughtworksXstreamConvertersBasicStringConverter_initWithInt_(self, lengthLimit);
  return self;
}


#line 79
void ComThoughtworksXstreamConvertersBasicStringConverter_init(ComThoughtworksXstreamConvertersBasicStringConverter *self) {
  (void) ComThoughtworksXstreamConvertersBasicStringConverter_initWithInt_(self, ComThoughtworksXstreamConvertersBasicStringConverter_LENGTH_LIMIT);
}


#line 79
ComThoughtworksXstreamConvertersBasicStringConverter *new_ComThoughtworksXstreamConvertersBasicStringConverter_init() {
  ComThoughtworksXstreamConvertersBasicStringConverter *self = [ComThoughtworksXstreamConvertersBasicStringConverter alloc];
  ComThoughtworksXstreamConvertersBasicStringConverter_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamConvertersBasicStringConverter)
