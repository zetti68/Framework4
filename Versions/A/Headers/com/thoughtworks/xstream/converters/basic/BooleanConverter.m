//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/basic/BooleanConverter.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/basic/BooleanConverter.java"

#include "IOSClass.h"
#include "com/thoughtworks/xstream/converters/basic/BooleanConverter.h"
#include "java/lang/Boolean.h"

BOOL ComThoughtworksXstreamConvertersBasicBooleanConverter_initialized = NO;


#line 22
@implementation ComThoughtworksXstreamConvertersBasicBooleanConverter

ComThoughtworksXstreamConvertersBasicBooleanConverter * ComThoughtworksXstreamConvertersBasicBooleanConverter_TRUE_FALSE_;
ComThoughtworksXstreamConvertersBasicBooleanConverter * ComThoughtworksXstreamConvertersBasicBooleanConverter_YES_NO_;
ComThoughtworksXstreamConvertersBasicBooleanConverter * ComThoughtworksXstreamConvertersBasicBooleanConverter_BINARY_;


#line 34
- (instancetype)initComThoughtworksXstreamConvertersBasicBooleanConverterWithNSString:(NSString *)positive
                                                                         withNSString:(NSString *)negative
                                                                          withBoolean:(jboolean)caseSensitive {
  if (self = [super init]) {
    
#line 35
    self->positive_ = positive;
    
#line 36
    self->negative_ = negative;
    
#line 37
    self->caseSensitive_ = caseSensitive;
  }
  return self;
}

- (instancetype)initWithNSString:(NSString *)positive
                    withNSString:(NSString *)negative
                     withBoolean:(jboolean)caseSensitive {
  return [self initComThoughtworksXstreamConvertersBasicBooleanConverterWithNSString:
#line 34
positive withNSString:negative withBoolean:caseSensitive];
}


#line 40
- (instancetype)init {
  return
#line 41
  [self initComThoughtworksXstreamConvertersBasicBooleanConverterWithNSString:@"true" withNSString:@"false" withBoolean:NO];
}


#line 44
- (jboolean)shouldConvertWithIOSClass:(IOSClass *)type
                               withId:(id)value {
  
#line 45
  return YES;
}


#line 48
- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  
#line 49
  return [((IOSClass *) nil_chk(type)) isEqual:[IOSClass booleanClass]] || [type isEqual:[IOSClass classWithClass:[JavaLangBoolean class]]];
}


#line 52
- (id)fromStringWithNSString:(NSString *)str {
  
#line 53
  if (caseSensitive_) {
    return [((NSString *) nil_chk(positive_)) isEqual:str] ? JavaLangBoolean_get_TRUE__() : JavaLangBoolean_get_FALSE__();
  }
  else {
    
#line 56
    return [((NSString *) nil_chk(positive_)) equalsIgnoreCase:str] ? JavaLangBoolean_get_TRUE__() : JavaLangBoolean_get_FALSE__();
  }
}


#line 60
- (NSString *)toStringWithId:(id)obj {
  
#line 61
  JavaLangBoolean *value = (JavaLangBoolean *) check_class_cast(obj, [JavaLangBoolean class]);
  return obj == nil ? nil : [((JavaLangBoolean *) nil_chk(value)) booleanValue] ? positive_ : negative_;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamConvertersBasicBooleanConverter *)other {
  [super copyAllFieldsTo:other];
  other->caseSensitive_ = caseSensitive_;
  other->negative_ = negative_;
  other->positive_ = positive_;
}

+ (void)initialize {
  if (self == [ComThoughtworksXstreamConvertersBasicBooleanConverter class]) {
    ComThoughtworksXstreamConvertersBasicBooleanConverter_TRUE_FALSE_ =
#line 24
    [[ComThoughtworksXstreamConvertersBasicBooleanConverter alloc] initWithNSString:@"true" withNSString:@"false" withBoolean:NO];
    ComThoughtworksXstreamConvertersBasicBooleanConverter_YES_NO_ =
#line 26
    [[ComThoughtworksXstreamConvertersBasicBooleanConverter alloc] initWithNSString:@"yes" withNSString:@"no" withBoolean:NO];
    ComThoughtworksXstreamConvertersBasicBooleanConverter_BINARY_ =
#line 28
    [[ComThoughtworksXstreamConvertersBasicBooleanConverter alloc] initWithNSString:@"1" withNSString:@"0" withBoolean:YES];
    ComThoughtworksXstreamConvertersBasicBooleanConverter_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withBoolean:", "BooleanConverter", NULL, 0x1, NULL },
    { "init", "BooleanConverter", NULL, 0x1, NULL },
    { "shouldConvertWithIOSClass:withId:", "shouldConvert", "Z", 0x1, NULL },
    { "canConvertWithIOSClass:", "canConvert", "Z", 0x1, NULL },
    { "fromStringWithNSString:", "fromString", "Ljava.lang.Object;", 0x1, NULL },
    { "toStringWithId:", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TRUE_FALSE_", NULL, 0x19, "Lcom.thoughtworks.xstream.converters.basic.BooleanConverter;", &ComThoughtworksXstreamConvertersBasicBooleanConverter_TRUE_FALSE_,  },
    { "YES_NO_", NULL, 0x19, "Lcom.thoughtworks.xstream.converters.basic.BooleanConverter;", &ComThoughtworksXstreamConvertersBasicBooleanConverter_YES_NO_,  },
    { "BINARY_", NULL, 0x19, "Lcom.thoughtworks.xstream.converters.basic.BooleanConverter;", &ComThoughtworksXstreamConvertersBasicBooleanConverter_BINARY_,  },
    { "positive_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "negative_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "caseSensitive_", NULL, 0x12, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersBasicBooleanConverter = { "BooleanConverter", "com.thoughtworks.xstream.converters.basic", NULL, 0x1, 6, methods, 6, fields, 0, NULL};
  return &_ComThoughtworksXstreamConvertersBasicBooleanConverter;
}

@end
