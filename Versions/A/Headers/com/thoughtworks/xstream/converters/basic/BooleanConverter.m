//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/converters/basic/BooleanConverter.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/converters/basic/BooleanConverter.java"

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/basic/AbstractSingleValueConverter.h"
#include "com/thoughtworks/xstream/converters/basic/BooleanConverter.h"
#include "java/lang/Boolean.h"

@interface ComThoughtworksXstreamConvertersBasicBooleanConverter () {
 @public
  NSString *positive_;
  NSString *negative_;
  jboolean caseSensitive_;
}

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersBasicBooleanConverter, positive_, NSString *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersBasicBooleanConverter, negative_, NSString *)

J2OBJC_INITIALIZED_DEFN(ComThoughtworksXstreamConvertersBasicBooleanConverter)

ComThoughtworksXstreamConvertersBasicBooleanConverter *ComThoughtworksXstreamConvertersBasicBooleanConverter_TRUE_FALSE_;
ComThoughtworksXstreamConvertersBasicBooleanConverter *ComThoughtworksXstreamConvertersBasicBooleanConverter_YES_NO_;
ComThoughtworksXstreamConvertersBasicBooleanConverter *ComThoughtworksXstreamConvertersBasicBooleanConverter_BINARY_;


#line 22
@implementation ComThoughtworksXstreamConvertersBasicBooleanConverter


#line 34
- (instancetype)initWithNSString:(NSString *)positive
                    withNSString:(NSString *)negative
                     withBoolean:(jboolean)caseSensitive {
  ComThoughtworksXstreamConvertersBasicBooleanConverter_initWithNSString_withNSString_withBoolean_(self, positive, negative, caseSensitive);
  return self;
}


#line 40
- (instancetype)init {
  ComThoughtworksXstreamConvertersBasicBooleanConverter_init(self);
  return self;
}


#line 44
- (jboolean)shouldConvertWithIOSClass:(IOSClass *)type
                               withId:(id)value {
  return YES;
}


#line 48
- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  return [((IOSClass *) nil_chk(type)) isEqual:[IOSClass booleanClass]] || [type isEqual:JavaLangBoolean_class_()];
}

- (id)fromStringWithNSString:(NSString *)str {
  if (caseSensitive_) {
    return [((NSString *) nil_chk(positive_)) isEqual:str] ? JavaLangBoolean_get_TRUE__() : JavaLangBoolean_get_FALSE__();
  }
  else {
    
#line 56
    return [((NSString *) nil_chk(positive_)) equalsIgnoreCase:str] ? JavaLangBoolean_get_TRUE__() : JavaLangBoolean_get_FALSE__();
  }
}


#line 60
- (NSString *)toStringWithId:(id)obj {
  JavaLangBoolean *value = (JavaLangBoolean *) check_class_cast(obj, [JavaLangBoolean class]);
  return obj == nil ? nil : [((JavaLangBoolean *) nil_chk(value)) booleanValue] ? positive_ : negative_;
}

+ (void)initialize {
  if (self == [ComThoughtworksXstreamConvertersBasicBooleanConverter class]) {
    ComThoughtworksXstreamConvertersBasicBooleanConverter_TRUE_FALSE_ = new_ComThoughtworksXstreamConvertersBasicBooleanConverter_initWithNSString_withNSString_withBoolean_(
#line 24
    @"true", @"false", NO);
    ComThoughtworksXstreamConvertersBasicBooleanConverter_YES_NO_ = new_ComThoughtworksXstreamConvertersBasicBooleanConverter_initWithNSString_withNSString_withBoolean_(
#line 26
    @"yes", @"no", NO);
    ComThoughtworksXstreamConvertersBasicBooleanConverter_BINARY_ = new_ComThoughtworksXstreamConvertersBasicBooleanConverter_initWithNSString_withNSString_withBoolean_(
#line 28
    @"1", @"0", YES);
    J2OBJC_SET_INITIALIZED(ComThoughtworksXstreamConvertersBasicBooleanConverter)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withBoolean:", "BooleanConverter", NULL, 0x1, NULL, NULL },
    { "init", "BooleanConverter", NULL, 0x1, NULL, NULL },
    { "shouldConvertWithIOSClass:withId:", "shouldConvert", "Z", 0x1, NULL, NULL },
    { "canConvertWithIOSClass:", "canConvert", "Z", 0x1, NULL, NULL },
    { "fromStringWithNSString:", "fromString", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "toStringWithId:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TRUE_FALSE_", NULL, 0x19, "Lcom.thoughtworks.xstream.converters.basic.BooleanConverter;", &ComThoughtworksXstreamConvertersBasicBooleanConverter_TRUE_FALSE_, NULL,  },
    { "YES_NO_", NULL, 0x19, "Lcom.thoughtworks.xstream.converters.basic.BooleanConverter;", &ComThoughtworksXstreamConvertersBasicBooleanConverter_YES_NO_, NULL,  },
    { "BINARY_", NULL, 0x19, "Lcom.thoughtworks.xstream.converters.basic.BooleanConverter;", &ComThoughtworksXstreamConvertersBasicBooleanConverter_BINARY_, NULL,  },
    { "positive_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "negative_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "caseSensitive_", NULL, 0x12, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersBasicBooleanConverter = { 2, "BooleanConverter", "com.thoughtworks.xstream.converters.basic", NULL, 0x1, 6, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamConvertersBasicBooleanConverter;
}

@end


#line 34
void ComThoughtworksXstreamConvertersBasicBooleanConverter_initWithNSString_withNSString_withBoolean_(ComThoughtworksXstreamConvertersBasicBooleanConverter *self, NSString *positive, NSString *negative, jboolean caseSensitive) {
  (void) ComThoughtworksXstreamConvertersBasicAbstractSingleValueConverter_init(self);
  
#line 35
  self->positive_ = positive;
  self->negative_ = negative;
  self->caseSensitive_ = caseSensitive;
}


#line 34
ComThoughtworksXstreamConvertersBasicBooleanConverter *new_ComThoughtworksXstreamConvertersBasicBooleanConverter_initWithNSString_withNSString_withBoolean_(NSString *positive, NSString *negative, jboolean caseSensitive) {
  ComThoughtworksXstreamConvertersBasicBooleanConverter *self = [ComThoughtworksXstreamConvertersBasicBooleanConverter alloc];
  ComThoughtworksXstreamConvertersBasicBooleanConverter_initWithNSString_withNSString_withBoolean_(self, positive, negative, caseSensitive);
  return self;
}

void ComThoughtworksXstreamConvertersBasicBooleanConverter_init(ComThoughtworksXstreamConvertersBasicBooleanConverter *self) {
  (void) ComThoughtworksXstreamConvertersBasicBooleanConverter_initWithNSString_withNSString_withBoolean_(self, @"true", @"false", NO);
}


#line 40
ComThoughtworksXstreamConvertersBasicBooleanConverter *new_ComThoughtworksXstreamConvertersBasicBooleanConverter_init() {
  ComThoughtworksXstreamConvertersBasicBooleanConverter *self = [ComThoughtworksXstreamConvertersBasicBooleanConverter alloc];
  ComThoughtworksXstreamConvertersBasicBooleanConverter_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamConvertersBasicBooleanConverter)
