//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/basic/DateConverter.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/basic/DateConverter.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/converters/ErrorWriter.h"
#include "com/thoughtworks/xstream/converters/basic/DateConverter.h"
#include "com/thoughtworks/xstream/core/JVM.h"
#include "com/thoughtworks/xstream/core/util/ThreadSafeSimpleDateFormat.h"
#include "java/text/ParseException.h"
#include "java/util/ArrayList.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"

BOOL ComThoughtworksXstreamConvertersBasicDateConverter_initialized = NO;


#line 46
@implementation ComThoughtworksXstreamConvertersBasicDateConverter

IOSObjectArray * ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ACCEPTABLE_FORMATS_;
NSString * ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_PATTERN_;
NSString * ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ERA_PATTERN_;
JavaUtilTimeZone * ComThoughtworksXstreamConvertersBasicDateConverter_UTC_;
jlong ComThoughtworksXstreamConvertersBasicDateConverter_ERA_START_;


#line 91
- (instancetype)init {
  return
#line 92
  [self initComThoughtworksXstreamConvertersBasicDateConverterWithBoolean:NO];
}


#line 102
- (instancetype)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  return
#line 103
  [self initComThoughtworksXstreamConvertersBasicDateConverterWithNSString:ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_PATTERN_ withNSStringArray:ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ACCEPTABLE_FORMATS_ withJavaUtilTimeZone:timeZone];
}


#line 112
- (instancetype)initComThoughtworksXstreamConvertersBasicDateConverterWithBoolean:(jboolean)lenient {
  return
#line 113
  [self initComThoughtworksXstreamConvertersBasicDateConverterWithNSString:ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_PATTERN_ withNSStringArray:ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ACCEPTABLE_FORMATS_ withBoolean:lenient];
}

- (instancetype)initWithBoolean:(jboolean)lenient {
  return [self initComThoughtworksXstreamConvertersBasicDateConverterWithBoolean:
#line 112
lenient];
}


#line 122
- (instancetype)initWithNSString:(NSString *)defaultFormat
               withNSStringArray:(IOSObjectArray *)acceptableFormats {
  return [self initComThoughtworksXstreamConvertersBasicDateConverterWithNSString:defaultFormat withNSStringArray:acceptableFormats withBoolean:NO];
}


#line 133
- (instancetype)initComThoughtworksXstreamConvertersBasicDateConverterWithNSString:(NSString *)defaultFormat
                                                                 withNSStringArray:(IOSObjectArray *)acceptableFormats
                                                              withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  return
#line 134
  [self initComThoughtworksXstreamConvertersBasicDateConverterWithNSString:defaultFormat withNSStringArray:acceptableFormats withJavaUtilTimeZone:timeZone withBoolean:NO];
}

- (instancetype)initWithNSString:(NSString *)defaultFormat
               withNSStringArray:(IOSObjectArray *)acceptableFormats
            withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  return [self initComThoughtworksXstreamConvertersBasicDateConverterWithNSString:
#line 133
defaultFormat withNSStringArray:acceptableFormats withJavaUtilTimeZone:timeZone];
}


#line 145
- (instancetype)initComThoughtworksXstreamConvertersBasicDateConverterWithNSString:(NSString *)defaultFormat
                                                                 withNSStringArray:(IOSObjectArray *)acceptableFormats
                                                                       withBoolean:(jboolean)lenient {
  return
#line 146
  [self initComThoughtworksXstreamConvertersBasicDateConverterWithNSString:defaultFormat withNSStringArray:acceptableFormats withJavaUtilTimeZone:ComThoughtworksXstreamConvertersBasicDateConverter_UTC_ withBoolean:lenient];
}

- (instancetype)initWithNSString:(NSString *)defaultFormat
               withNSStringArray:(IOSObjectArray *)acceptableFormats
                     withBoolean:(jboolean)lenient {
  return [self initComThoughtworksXstreamConvertersBasicDateConverterWithNSString:
#line 145
defaultFormat withNSStringArray:acceptableFormats withBoolean:lenient];
}


#line 158
- (instancetype)initComThoughtworksXstreamConvertersBasicDateConverterWithNSString:(NSString *)defaultFormat
                                                                 withNSStringArray:(IOSObjectArray *)acceptableFormats
                                                              withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                                                                       withBoolean:(jboolean)lenient {
  return [self initComThoughtworksXstreamConvertersBasicDateConverterWithNSString:ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ERA_PATTERN_ withNSString:defaultFormat withNSStringArray:acceptableFormats withJavaUtilLocale:JavaUtilLocale_get_ENGLISH_() withJavaUtilTimeZone:timeZone withBoolean:lenient];
}

- (instancetype)initWithNSString:(NSString *)defaultFormat
               withNSStringArray:(IOSObjectArray *)acceptableFormats
            withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                     withBoolean:(jboolean)lenient {
  return [self initComThoughtworksXstreamConvertersBasicDateConverterWithNSString:
#line 159
defaultFormat withNSStringArray:acceptableFormats withJavaUtilTimeZone:timeZone withBoolean:lenient];
}


#line 175
- (instancetype)initComThoughtworksXstreamConvertersBasicDateConverterWithNSString:(NSString *)defaultEraFormat
                                                                      withNSString:(NSString *)defaultFormat
                                                                 withNSStringArray:(IOSObjectArray *)acceptableFormats
                                                                withJavaUtilLocale:(JavaUtilLocale *)locale
                                                              withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                                                                       withBoolean:(jboolean)lenient {
  if (self = [super init]) {
    
#line 178
    self->locale_ = locale;
    
#line 179
    if (defaultEraFormat != nil) {
      self->defaultEraFormat_ = [[ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat alloc] initWithNSString:
#line 181
      defaultEraFormat withJavaUtilTimeZone:timeZone withJavaUtilLocale:locale withInt:4 withInt:20 withBoolean:lenient];
    }
    else {
      
#line 183
      self->defaultEraFormat_ = nil;
    }
    
#line 185
    self->defaultFormat_ = [[ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat alloc] initWithNSString:
#line 186
    defaultFormat withJavaUtilTimeZone:timeZone withJavaUtilLocale:locale withInt:4 withInt:20 withBoolean:lenient];
    
#line 187
    self->acceptableFormats_ = acceptableFormats != nil ? [IOSObjectArray arrayWithLength:
#line 188
    acceptableFormats->size_ type:[IOSClass classWithClass:[ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat class]]] : [IOSObjectArray arrayWithLength:
#line 189
    0 type:[IOSClass classWithClass:[ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat class]]];
    
#line 190
    for (jint i = 0; i < self->acceptableFormats_->size_; i++) {
      IOSObjectArray_SetAndConsume(self->acceptableFormats_, i, [[ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat alloc] initWithNSString:IOSObjectArray_Get(nil_chk(
#line 192
      acceptableFormats), i) withJavaUtilTimeZone:timeZone withInt:1 withInt:20 withBoolean:lenient]);
    }
  }
  return self;
}

- (instancetype)initWithNSString:(NSString *)defaultEraFormat
                    withNSString:(NSString *)defaultFormat
               withNSStringArray:(IOSObjectArray *)acceptableFormats
              withJavaUtilLocale:(JavaUtilLocale *)locale
            withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                     withBoolean:(jboolean)lenient {
  return [self initComThoughtworksXstreamConvertersBasicDateConverterWithNSString:
#line 176
defaultEraFormat withNSString:defaultFormat withNSStringArray:acceptableFormats withJavaUtilLocale:
#line 177
locale withJavaUtilTimeZone:timeZone withBoolean:lenient];
}


#line 196
- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  
#line 197
  return [((IOSClass *) nil_chk(type)) isEqual:[IOSClass classWithClass:[JavaUtilDate class]]];
}


#line 200
- (id)fromStringWithNSString:(NSString *)str {
  
#line 201
  if (defaultEraFormat_ != nil) {
    @try {
      return [defaultEraFormat_ parseWithNSString:str];
    }
    @catch (
#line 204
    JavaTextParseException *e) {
    }
  }
  
#line 208
  if (defaultEraFormat_ != defaultFormat_) {
    @try {
      return [((ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *) nil_chk(defaultFormat_)) parseWithNSString:str];
    }
    @catch (
#line 211
    JavaTextParseException *e) {
    }
  }
  
#line 215
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(acceptableFormats_))->size_; i++) {
    @try {
      return [((ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *) nil_chk(IOSObjectArray_Get(acceptableFormats_, i))) parseWithNSString:str];
    }
    @catch (
#line 218
    JavaTextParseException *e3) {
    }
  }
  
#line 223
  @throw [[ComThoughtworksXstreamConvertersConversionException alloc] initWithNSString:JreStrcat("$$", @"Cannot parse date ", str)];
}


#line 226
- (NSString *)toStringWithId:(id)obj {
  
#line 227
  JavaUtilDate *date = (JavaUtilDate *) check_class_cast(obj, [JavaUtilDate class]);
  if ([((JavaUtilDate *) nil_chk(date)) getTime] < ComThoughtworksXstreamConvertersBasicDateConverter_ERA_START_ && defaultEraFormat_ != nil) {
    return [defaultEraFormat_ formatWithJavaUtilDate:date];
  }
  else {
    
#line 231
    return [((ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *) nil_chk(defaultFormat_)) formatWithJavaUtilDate:date];
  }
}


#line 235
- (void)appendErrorsWithComThoughtworksXstreamConvertersErrorWriter:(id<ComThoughtworksXstreamConvertersErrorWriter>)errorWriter {
  
#line 236
  [((id<ComThoughtworksXstreamConvertersErrorWriter>) nil_chk(errorWriter)) addWithNSString:@"Default date pattern" withNSString:[((ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *) nil_chk(defaultFormat_)) description]];
  if (defaultEraFormat_ != nil) {
    [errorWriter addWithNSString:@"Default era date pattern" withNSString:[defaultEraFormat_ description]];
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(acceptableFormats_))->size_; i++) {
    [errorWriter addWithNSString:@"Alternative date pattern" withNSString:[((ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *) nil_chk(IOSObjectArray_Get(acceptableFormats_, i))) description]];
  }
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamConvertersBasicDateConverter *)other {
  [super copyAllFieldsTo:other];
  other->acceptableFormats_ = acceptableFormats_;
  other->defaultEraFormat_ = defaultEraFormat_;
  other->defaultFormat_ = defaultFormat_;
  other->locale_ = locale_;
}

+ (void)initialize {
  if (self == [ComThoughtworksXstreamConvertersBasicDateConverter class]) {
    {
      
#line 54
      ComThoughtworksXstreamConvertersBasicDateConverter_UTC_ = [JavaUtilTimeZone getTimeZoneWithNSString:@"UTC"];
      
#line 56
      NSString *defaultPattern = @"yyyy-MM-dd HH:mm:ss.S z";
      NSString *defaultEraPattern = @"yyyy-MM-dd G HH:mm:ss.S z";
      id<JavaUtilList> acceptablePatterns = [[JavaUtilArrayList alloc] init];
      jboolean utcSupported = [ComThoughtworksXstreamCoreJVM canParseUTCDateFormat];
      ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_PATTERN_ = utcSupported ? defaultPattern : @"yyyy-MM-dd HH:mm:ss.S 'UTC'";
      ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ERA_PATTERN_ = utcSupported ? defaultEraPattern : @"yyyy-MM-dd G HH:mm:ss.S 'UTC'";
      [acceptablePatterns addWithId:@"yyyy-MM-dd HH:mm:ss.S z"];
      if (!utcSupported) {
        [acceptablePatterns addWithId:defaultPattern];
      }
      [acceptablePatterns addWithId:@"yyyy-MM-dd HH:mm:ss.S a"];
      
#line 68
      [acceptablePatterns addWithId:@"yyyy-MM-dd HH:mm:ssz"];
      [acceptablePatterns addWithId:@"yyyy-MM-dd HH:mm:ss z"];
      if (!utcSupported) {
        [acceptablePatterns addWithId:@"yyyy-MM-dd HH:mm:ss 'UTC'"];
      }
      
#line 74
      [acceptablePatterns addWithId:@"yyyy-MM-dd HH:mm:ssa"];
      ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ACCEPTABLE_FORMATS_ = (IOSObjectArray *) check_class_cast([acceptablePatterns toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[acceptablePatterns size] type:[IOSClass classWithClass:[NSString class]]]], [IOSObjectArray class]);
      
#line 77
      JavaUtilCalendar *cal = [JavaUtilCalendar getInstance];
      [((JavaUtilCalendar *) nil_chk(cal)) setTimeZoneWithJavaUtilTimeZone:ComThoughtworksXstreamConvertersBasicDateConverter_UTC_];
      [cal clear];
      [cal setWithInt:1 withInt:JavaUtilCalendar_JANUARY withInt:1];
      ComThoughtworksXstreamConvertersBasicDateConverter_ERA_START_ = [((JavaUtilDate *) nil_chk([cal getTime])) getTime];
    }
    ComThoughtworksXstreamConvertersBasicDateConverter_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "DateConverter", NULL, 0x1, NULL },
    { "initWithJavaUtilTimeZone:", "DateConverter", NULL, 0x1, NULL },
    { "initWithBoolean:", "DateConverter", NULL, 0x1, NULL },
    { "initWithNSString:withNSStringArray:", "DateConverter", NULL, 0x1, NULL },
    { "initWithNSString:withNSStringArray:withJavaUtilTimeZone:", "DateConverter", NULL, 0x1, NULL },
    { "initWithNSString:withNSStringArray:withBoolean:", "DateConverter", NULL, 0x1, NULL },
    { "initWithNSString:withNSStringArray:withJavaUtilTimeZone:withBoolean:", "DateConverter", NULL, 0x1, NULL },
    { "initWithNSString:withNSString:withNSStringArray:withJavaUtilLocale:withJavaUtilTimeZone:withBoolean:", "DateConverter", NULL, 0x1, NULL },
    { "canConvertWithIOSClass:", "canConvert", "Z", 0x1, NULL },
    { "fromStringWithNSString:", "fromString", "Ljava.lang.Object;", 0x1, NULL },
    { "toStringWithId:", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "appendErrorsWithComThoughtworksXstreamConvertersErrorWriter:", "appendErrors", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_ACCEPTABLE_FORMATS_", NULL, 0x1a, "[Ljava.lang.String;", &ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ACCEPTABLE_FORMATS_,  },
    { "DEFAULT_PATTERN_", NULL, 0x1a, "Ljava.lang.String;", &ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_PATTERN_,  },
    { "DEFAULT_ERA_PATTERN_", NULL, 0x1a, "Ljava.lang.String;", &ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ERA_PATTERN_,  },
    { "UTC_", NULL, 0x1a, "Ljava.util.TimeZone;", &ComThoughtworksXstreamConvertersBasicDateConverter_UTC_,  },
    { "ERA_START_", NULL, 0x1a, "J", &ComThoughtworksXstreamConvertersBasicDateConverter_ERA_START_,  },
    { "defaultFormat_", NULL, 0x12, "Lcom.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat;", NULL,  },
    { "defaultEraFormat_", NULL, 0x12, "Lcom.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat;", NULL,  },
    { "acceptableFormats_", NULL, 0x12, "[Lcom.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat;", NULL,  },
    { "locale_", NULL, 0x12, "Ljava.util.Locale;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersBasicDateConverter = { "DateConverter", "com.thoughtworks.xstream.converters.basic", NULL, 0x1, 12, methods, 9, fields, 0, NULL};
  return &_ComThoughtworksXstreamConvertersBasicDateConverter;
}

@end
