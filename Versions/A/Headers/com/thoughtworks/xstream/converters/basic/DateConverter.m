//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/converters/basic/DateConverter.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/converters/basic/DateConverter.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/converters/ErrorWriter.h"
#include "com/thoughtworks/xstream/converters/basic/AbstractSingleValueConverter.h"
#include "com/thoughtworks/xstream/converters/basic/DateConverter.h"
#include "com/thoughtworks/xstream/core/JVM.h"
#include "com/thoughtworks/xstream/core/util/ThreadSafeSimpleDateFormat.h"
#include "java/text/ParseException.h"
#include "java/util/ArrayList.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"

@interface ComThoughtworksXstreamConvertersBasicDateConverter () {
 @public
  ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *defaultFormat_;
  ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *defaultEraFormat_;
  IOSObjectArray *acceptableFormats_;
  JavaUtilLocale *locale_;
}

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersBasicDateConverter, defaultFormat_, ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersBasicDateConverter, defaultEraFormat_, ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersBasicDateConverter, acceptableFormats_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersBasicDateConverter, locale_, JavaUtilLocale *)

static IOSObjectArray *ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ACCEPTABLE_FORMATS_;
J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamConvertersBasicDateConverter, DEFAULT_ACCEPTABLE_FORMATS_, IOSObjectArray *)

static NSString *ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_PATTERN_;
J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamConvertersBasicDateConverter, DEFAULT_PATTERN_, NSString *)

static NSString *ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ERA_PATTERN_;
J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamConvertersBasicDateConverter, DEFAULT_ERA_PATTERN_, NSString *)

static JavaUtilTimeZone *ComThoughtworksXstreamConvertersBasicDateConverter_UTC_;
J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamConvertersBasicDateConverter, UTC_, JavaUtilTimeZone *)

static jlong ComThoughtworksXstreamConvertersBasicDateConverter_ERA_START_;
J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamConvertersBasicDateConverter, ERA_START_, jlong)

J2OBJC_INITIALIZED_DEFN(ComThoughtworksXstreamConvertersBasicDateConverter)


#line 46
@implementation ComThoughtworksXstreamConvertersBasicDateConverter


#line 91
- (instancetype)init {
  ComThoughtworksXstreamConvertersBasicDateConverter_init(self);
  return self;
}


#line 102
- (instancetype)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  ComThoughtworksXstreamConvertersBasicDateConverter_initWithJavaUtilTimeZone_(self, timeZone);
  return self;
}


#line 112
- (instancetype)initWithBoolean:(jboolean)lenient {
  ComThoughtworksXstreamConvertersBasicDateConverter_initWithBoolean_(self, lenient);
  return self;
}


#line 122
- (instancetype)initWithNSString:(NSString *)defaultFormat
               withNSStringArray:(IOSObjectArray *)acceptableFormats {
  ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_(self, defaultFormat, acceptableFormats);
  return self;
}


#line 133
- (instancetype)initWithNSString:(NSString *)defaultFormat
               withNSStringArray:(IOSObjectArray *)acceptableFormats
            withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_(self, defaultFormat, acceptableFormats, timeZone);
  return self;
}


#line 145
- (instancetype)initWithNSString:(NSString *)defaultFormat
               withNSStringArray:(IOSObjectArray *)acceptableFormats
                     withBoolean:(jboolean)lenient {
  ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withBoolean_(self, defaultFormat, acceptableFormats, lenient);
  return self;
}


#line 158
- (instancetype)initWithNSString:(NSString *)defaultFormat
               withNSStringArray:(IOSObjectArray *)acceptableFormats
            withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                     withBoolean:(jboolean)lenient {
  ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_withBoolean_(self, defaultFormat, acceptableFormats, timeZone, lenient);
  return self;
}


#line 175
- (instancetype)initWithNSString:(NSString *)defaultEraFormat
                    withNSString:(NSString *)defaultFormat
               withNSStringArray:(IOSObjectArray *)acceptableFormats
              withJavaUtilLocale:(JavaUtilLocale *)locale
            withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                     withBoolean:(jboolean)lenient {
  ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSString_withNSStringArray_withJavaUtilLocale_withJavaUtilTimeZone_withBoolean_(self, defaultEraFormat, defaultFormat, acceptableFormats, locale, timeZone, lenient);
  return self;
}


#line 196
- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  return [((IOSClass *) nil_chk(type)) isEqual:JavaUtilDate_class_()];
}

- (id)fromStringWithNSString:(NSString *)str {
  if (defaultEraFormat_ != nil) {
    @try {
      return [defaultEraFormat_ parseWithNSString:str];
    }
    @catch (
#line 204
    JavaTextParseException *e) {
    }
  }
  
#line 208
  if (defaultEraFormat_ != defaultFormat_) {
    @try {
      return [((ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *) nil_chk(defaultFormat_)) parseWithNSString:str];
    }
    @catch (
#line 211
    JavaTextParseException *e) {
    }
  }
  
#line 215
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(acceptableFormats_))->size_; i++) {
    @try {
      return [((ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *) nil_chk(IOSObjectArray_Get(acceptableFormats_, i))) parseWithNSString:str];
    }
    @catch (
#line 218
    JavaTextParseException *e3) {
    }
  }
  
#line 223
  @throw new_ComThoughtworksXstreamConvertersConversionException_initWithNSString_(JreStrcat("$$", @"Cannot parse date ", str));
}


#line 226
- (NSString *)toStringWithId:(id)obj {
  JavaUtilDate *date = (JavaUtilDate *) check_class_cast(obj, [JavaUtilDate class]);
  if ([((JavaUtilDate *) nil_chk(date)) getTime] < ComThoughtworksXstreamConvertersBasicDateConverter_ERA_START_ && defaultEraFormat_ != nil) {
    return [defaultEraFormat_ formatWithJavaUtilDate:date];
  }
  else {
    
#line 231
    return [((ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *) nil_chk(defaultFormat_)) formatWithJavaUtilDate:date];
  }
}


#line 235
- (void)appendErrorsWithComThoughtworksXstreamConvertersErrorWriter:(id<ComThoughtworksXstreamConvertersErrorWriter>)errorWriter {
  [((id<ComThoughtworksXstreamConvertersErrorWriter>) nil_chk(errorWriter)) addWithNSString:@"Default date pattern" withNSString:[((ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *) nil_chk(defaultFormat_)) description]];
  if (defaultEraFormat_ != nil) {
    [errorWriter addWithNSString:@"Default era date pattern" withNSString:[defaultEraFormat_ description]];
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(acceptableFormats_))->size_; i++) {
    [errorWriter addWithNSString:@"Alternative date pattern" withNSString:[((ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat *) nil_chk(IOSObjectArray_Get(acceptableFormats_, i))) description]];
  }
}

+ (void)initialize {
  if (self == [ComThoughtworksXstreamConvertersBasicDateConverter class]) {
    {
      
#line 54
      ComThoughtworksXstreamConvertersBasicDateConverter_UTC_ = JavaUtilTimeZone_getTimeZoneWithNSString_(@"UTC");
      
#line 56
      NSString *defaultPattern = @"yyyy-MM-dd HH:mm:ss.S z";
      NSString *defaultEraPattern = @"yyyy-MM-dd G HH:mm:ss.S z";
      id<JavaUtilList> acceptablePatterns = new_JavaUtilArrayList_init();
      jboolean utcSupported = ComThoughtworksXstreamCoreJVM_canParseUTCDateFormat();
      ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_PATTERN_ = utcSupported ? defaultPattern : @"yyyy-MM-dd HH:mm:ss.S 'UTC'";
      ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ERA_PATTERN_ = utcSupported ? defaultEraPattern : @"yyyy-MM-dd G HH:mm:ss.S 'UTC'";
      [acceptablePatterns addWithId:@"yyyy-MM-dd HH:mm:ss.S z"];
      if (!utcSupported) {
        [acceptablePatterns addWithId:defaultPattern];
      }
      [acceptablePatterns addWithId:@"yyyy-MM-dd HH:mm:ss.S a"];
      
#line 68
      [acceptablePatterns addWithId:@"yyyy-MM-dd HH:mm:ssz"];
      [acceptablePatterns addWithId:@"yyyy-MM-dd HH:mm:ss z"];
      if (!utcSupported) {
        [acceptablePatterns addWithId:@"yyyy-MM-dd HH:mm:ss 'UTC'"];
      }
      
#line 74
      [acceptablePatterns addWithId:@"yyyy-MM-dd HH:mm:ssa"];
      ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ACCEPTABLE_FORMATS_ = (IOSObjectArray *) check_class_cast([acceptablePatterns toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[acceptablePatterns size] type:NSString_class_()]], [IOSObjectArray class]);
      
#line 77
      JavaUtilCalendar *cal = JavaUtilCalendar_getInstance();
      [((JavaUtilCalendar *) nil_chk(cal)) setTimeZoneWithJavaUtilTimeZone:ComThoughtworksXstreamConvertersBasicDateConverter_UTC_];
      [cal clear];
      [cal setWithInt:1 withInt:JavaUtilCalendar_JANUARY withInt:1];
      ComThoughtworksXstreamConvertersBasicDateConverter_ERA_START_ = [((JavaUtilDate *) nil_chk([cal getTime])) getTime];
    }
    J2OBJC_SET_INITIALIZED(ComThoughtworksXstreamConvertersBasicDateConverter)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "DateConverter", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilTimeZone:", "DateConverter", NULL, 0x1, NULL, NULL },
    { "initWithBoolean:", "DateConverter", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withNSStringArray:", "DateConverter", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withNSStringArray:withJavaUtilTimeZone:", "DateConverter", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withNSStringArray:withBoolean:", "DateConverter", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withNSStringArray:withJavaUtilTimeZone:withBoolean:", "DateConverter", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withNSString:withNSStringArray:withJavaUtilLocale:withJavaUtilTimeZone:withBoolean:", "DateConverter", NULL, 0x1, NULL, NULL },
    { "canConvertWithIOSClass:", "canConvert", "Z", 0x1, NULL, NULL },
    { "fromStringWithNSString:", "fromString", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "toStringWithId:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "appendErrorsWithComThoughtworksXstreamConvertersErrorWriter:", "appendErrors", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_ACCEPTABLE_FORMATS_", NULL, 0x1a, "[Ljava.lang.String;", &ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ACCEPTABLE_FORMATS_, NULL,  },
    { "DEFAULT_PATTERN_", NULL, 0x1a, "Ljava.lang.String;", &ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_PATTERN_, NULL,  },
    { "DEFAULT_ERA_PATTERN_", NULL, 0x1a, "Ljava.lang.String;", &ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ERA_PATTERN_, NULL,  },
    { "UTC_", NULL, 0x1a, "Ljava.util.TimeZone;", &ComThoughtworksXstreamConvertersBasicDateConverter_UTC_, NULL,  },
    { "ERA_START_", NULL, 0x1a, "J", &ComThoughtworksXstreamConvertersBasicDateConverter_ERA_START_, NULL,  },
    { "defaultFormat_", NULL, 0x12, "Lcom.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat;", NULL, NULL,  },
    { "defaultEraFormat_", NULL, 0x12, "Lcom.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat;", NULL, NULL,  },
    { "acceptableFormats_", NULL, 0x12, "[Lcom.thoughtworks.xstream.core.util.ThreadSafeSimpleDateFormat;", NULL, NULL,  },
    { "locale_", NULL, 0x12, "Ljava.util.Locale;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersBasicDateConverter = { 2, "DateConverter", "com.thoughtworks.xstream.converters.basic", NULL, 0x1, 12, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamConvertersBasicDateConverter;
}

@end


#line 91
void ComThoughtworksXstreamConvertersBasicDateConverter_init(ComThoughtworksXstreamConvertersBasicDateConverter *self) {
  (void) ComThoughtworksXstreamConvertersBasicDateConverter_initWithBoolean_(self, NO);
}


#line 91
ComThoughtworksXstreamConvertersBasicDateConverter *new_ComThoughtworksXstreamConvertersBasicDateConverter_init() {
  ComThoughtworksXstreamConvertersBasicDateConverter *self = [ComThoughtworksXstreamConvertersBasicDateConverter alloc];
  ComThoughtworksXstreamConvertersBasicDateConverter_init(self);
  return self;
}


#line 102
void ComThoughtworksXstreamConvertersBasicDateConverter_initWithJavaUtilTimeZone_(ComThoughtworksXstreamConvertersBasicDateConverter *self, JavaUtilTimeZone *timeZone) {
  (void) ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_(self, ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_PATTERN_, ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ACCEPTABLE_FORMATS_, timeZone);
}


#line 102
ComThoughtworksXstreamConvertersBasicDateConverter *new_ComThoughtworksXstreamConvertersBasicDateConverter_initWithJavaUtilTimeZone_(JavaUtilTimeZone *timeZone) {
  ComThoughtworksXstreamConvertersBasicDateConverter *self = [ComThoughtworksXstreamConvertersBasicDateConverter alloc];
  ComThoughtworksXstreamConvertersBasicDateConverter_initWithJavaUtilTimeZone_(self, timeZone);
  return self;
}


#line 112
void ComThoughtworksXstreamConvertersBasicDateConverter_initWithBoolean_(ComThoughtworksXstreamConvertersBasicDateConverter *self, jboolean lenient) {
  (void) ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withBoolean_(self, ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_PATTERN_, ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ACCEPTABLE_FORMATS_, lenient);
}


#line 112
ComThoughtworksXstreamConvertersBasicDateConverter *new_ComThoughtworksXstreamConvertersBasicDateConverter_initWithBoolean_(jboolean lenient) {
  ComThoughtworksXstreamConvertersBasicDateConverter *self = [ComThoughtworksXstreamConvertersBasicDateConverter alloc];
  ComThoughtworksXstreamConvertersBasicDateConverter_initWithBoolean_(self, lenient);
  return self;
}


#line 122
void ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_(ComThoughtworksXstreamConvertersBasicDateConverter *self, NSString *defaultFormat, IOSObjectArray *acceptableFormats) {
  (void) ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withBoolean_(self, defaultFormat, acceptableFormats, NO);
}


#line 122
ComThoughtworksXstreamConvertersBasicDateConverter *new_ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_(NSString *defaultFormat, IOSObjectArray *acceptableFormats) {
  ComThoughtworksXstreamConvertersBasicDateConverter *self = [ComThoughtworksXstreamConvertersBasicDateConverter alloc];
  ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_(self, defaultFormat, acceptableFormats);
  return self;
}


#line 133
void ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_(ComThoughtworksXstreamConvertersBasicDateConverter *self, NSString *defaultFormat, IOSObjectArray *acceptableFormats, JavaUtilTimeZone *timeZone) {
  (void) ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_withBoolean_(self, defaultFormat, acceptableFormats, timeZone, NO);
}


#line 133
ComThoughtworksXstreamConvertersBasicDateConverter *new_ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_(NSString *defaultFormat, IOSObjectArray *acceptableFormats, JavaUtilTimeZone *timeZone) {
  ComThoughtworksXstreamConvertersBasicDateConverter *self = [ComThoughtworksXstreamConvertersBasicDateConverter alloc];
  ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_(self, defaultFormat, acceptableFormats, timeZone);
  return self;
}


#line 145
void ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withBoolean_(ComThoughtworksXstreamConvertersBasicDateConverter *self, NSString *defaultFormat, IOSObjectArray *acceptableFormats, jboolean lenient) {
  (void) ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_withBoolean_(self, defaultFormat, acceptableFormats, ComThoughtworksXstreamConvertersBasicDateConverter_UTC_, lenient);
}


#line 145
ComThoughtworksXstreamConvertersBasicDateConverter *new_ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withBoolean_(NSString *defaultFormat, IOSObjectArray *acceptableFormats, jboolean lenient) {
  ComThoughtworksXstreamConvertersBasicDateConverter *self = [ComThoughtworksXstreamConvertersBasicDateConverter alloc];
  ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withBoolean_(self, defaultFormat, acceptableFormats, lenient);
  return self;
}


#line 158
void ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_withBoolean_(ComThoughtworksXstreamConvertersBasicDateConverter *self, NSString *defaultFormat, IOSObjectArray *acceptableFormats, JavaUtilTimeZone *timeZone, jboolean lenient) {
  (void) ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSString_withNSStringArray_withJavaUtilLocale_withJavaUtilTimeZone_withBoolean_(self, ComThoughtworksXstreamConvertersBasicDateConverter_DEFAULT_ERA_PATTERN_,
#line 160
  defaultFormat, acceptableFormats, JavaUtilLocale_get_ENGLISH_(), timeZone, lenient);
}


#line 158
ComThoughtworksXstreamConvertersBasicDateConverter *new_ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_withBoolean_(NSString *defaultFormat, IOSObjectArray *acceptableFormats, JavaUtilTimeZone *timeZone, jboolean lenient) {
  ComThoughtworksXstreamConvertersBasicDateConverter *self = [ComThoughtworksXstreamConvertersBasicDateConverter alloc];
  ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSStringArray_withJavaUtilTimeZone_withBoolean_(self, defaultFormat, acceptableFormats, timeZone, lenient);
  return self;
}


#line 175
void ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSString_withNSStringArray_withJavaUtilLocale_withJavaUtilTimeZone_withBoolean_(ComThoughtworksXstreamConvertersBasicDateConverter *self, NSString *defaultEraFormat, NSString *defaultFormat, IOSObjectArray *acceptableFormats, JavaUtilLocale *locale, JavaUtilTimeZone *timeZone, jboolean lenient) {
  (void) ComThoughtworksXstreamConvertersBasicAbstractSingleValueConverter_init(self);
  
#line 178
  self->locale_ = locale;
  if (defaultEraFormat != nil) {
    self->defaultEraFormat_ = new_ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_withInt_withInt_withBoolean_(
#line 181
    defaultEraFormat, timeZone, locale, 4, 20, lenient);
  }
  else {
    
#line 183
    self->defaultEraFormat_ = nil;
  }
  self->defaultFormat_ = new_ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_withInt_withInt_withBoolean_(
#line 186
  defaultFormat, timeZone, locale, 4, 20, lenient);
  self->acceptableFormats_ = acceptableFormats != nil ? [IOSObjectArray newArrayWithLength:
#line 188
  acceptableFormats->size_ type:ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat_class_()] : [IOSObjectArray newArrayWithLength:
#line 189
  0 type:ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat_class_()];
  for (jint i = 0; i < self->acceptableFormats_->size_; i++) {
    (void) IOSObjectArray_Set(self->acceptableFormats_, i, new_ComThoughtworksXstreamCoreUtilThreadSafeSimpleDateFormat_initWithNSString_withJavaUtilTimeZone_withInt_withInt_withBoolean_(IOSObjectArray_Get(nil_chk(
#line 192
    acceptableFormats), i), timeZone, 1, 20, lenient));
  }
}


#line 175
ComThoughtworksXstreamConvertersBasicDateConverter *new_ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSString_withNSStringArray_withJavaUtilLocale_withJavaUtilTimeZone_withBoolean_(NSString *defaultEraFormat, NSString *defaultFormat, IOSObjectArray *acceptableFormats, JavaUtilLocale *locale, JavaUtilTimeZone *timeZone, jboolean lenient) {
  ComThoughtworksXstreamConvertersBasicDateConverter *self = [ComThoughtworksXstreamConvertersBasicDateConverter alloc];
  ComThoughtworksXstreamConvertersBasicDateConverter_initWithNSString_withNSString_withNSStringArray_withJavaUtilLocale_withJavaUtilTimeZone_withBoolean_(self, defaultEraFormat, defaultFormat, acceptableFormats, locale, timeZone, lenient);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamConvertersBasicDateConverter)
