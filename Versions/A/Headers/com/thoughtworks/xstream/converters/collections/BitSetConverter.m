//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/collections/BitSetConverter.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/collections/BitSetConverter.java"

#include "IOSClass.h"
#include "com/thoughtworks/xstream/converters/MarshallingContext.h"
#include "com/thoughtworks/xstream/converters/UnmarshallingContext.h"
#include "com/thoughtworks/xstream/converters/collections/BitSetConverter.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamWriter.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/util/BitSet.h"
#include "java/util/StringTokenizer.h"


#line 29
@implementation ComThoughtworksXstreamConvertersCollectionsBitSetConverter

- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  
#line 32
  return [((IOSClass *) nil_chk(type)) isEqual:[IOSClass classWithClass:[JavaUtilBitSet class]]];
}


#line 35
- (void)marshalWithId:(id)source
withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer
withComThoughtworksXstreamConvertersMarshallingContext:(id<ComThoughtworksXstreamConvertersMarshallingContext>)context {
  
#line 36
  JavaUtilBitSet *bitSet = (JavaUtilBitSet *) check_class_cast(source, [JavaUtilBitSet class]);
  JavaLangStringBuffer *buffer = [[JavaLangStringBuffer alloc] init];
  jboolean seenFirst = NO;
  for (jint i = 0; i < [((JavaUtilBitSet *) nil_chk(bitSet)) length]; i++) {
    if ([bitSet getWithInt:i]) {
      if (seenFirst) {
        (void) [buffer appendWithChar:','];
      }
      else {
        
#line 44
        seenFirst = YES;
      }
      (void) [buffer appendWithInt:i];
    }
  }
  [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) setValueWithNSString:[buffer description]];
}


#line 52
- (id)unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
           withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context {
  
#line 53
  JavaUtilBitSet *result = [[JavaUtilBitSet alloc] init];
  JavaUtilStringTokenizer *tokenizer = [[JavaUtilStringTokenizer alloc] initWithNSString:[((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader)) getValue] withNSString:@"," withBoolean:NO];
  while ([tokenizer hasMoreTokens]) {
    jint index = [JavaLangInteger parseIntWithNSString:[tokenizer nextToken]];
    [result setWithInt:index];
  }
  return result;
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "canConvertWithIOSClass:", "canConvert", "Z", 0x1, NULL },
    { "marshalWithId:withComThoughtworksXstreamIoHierarchicalStreamWriter:withComThoughtworksXstreamConvertersMarshallingContext:", "marshal", "V", 0x1, NULL },
    { "unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:", "unmarshal", "Ljava.lang.Object;", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersCollectionsBitSetConverter = { "BitSetConverter", "com.thoughtworks.xstream.converters.collections", NULL, 0x1, 4, methods, 0, NULL, 0, NULL};
  return &_ComThoughtworksXstreamConvertersCollectionsBitSetConverter;
}

@end
