//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/converters/collections/MapConverter.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/converters/collections/MapConverter.java"

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/MarshallingContext.h"
#include "com/thoughtworks/xstream/converters/UnmarshallingContext.h"
#include "com/thoughtworks/xstream/converters/collections/AbstractCollectionConverter.h"
#include "com/thoughtworks/xstream/converters/collections/MapConverter.h"
#include "com/thoughtworks/xstream/io/ExtendedHierarchicalStreamWriterHelper.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamWriter.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/HashMap.h"
#include "java/util/Hashtable.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface ComThoughtworksXstreamConvertersCollectionsMapConverter () {
 @public
  IOSClass *type_;
}

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersCollectionsMapConverter, type_, IOSClass *)


#line 37
@implementation ComThoughtworksXstreamConvertersCollectionsMapConverter


#line 41
- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper {
  ComThoughtworksXstreamConvertersCollectionsMapConverter_initWithComThoughtworksXstreamMapperMapper_(self, mapper);
  return self;
}


#line 51
- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper
                                              withIOSClass:(IOSClass *)type {
  ComThoughtworksXstreamConvertersCollectionsMapConverter_initWithComThoughtworksXstreamMapperMapper_withIOSClass_(self, mapper, type);
  return self;
}


#line 59
- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  if (self->type_ != nil) {
    return [((IOSClass *) nil_chk(type)) isEqual:self->type_];
  }
  return [((IOSClass *) nil_chk(type)) isEqual:JavaUtilHashMap_class_()] ||
#line 64
  [type isEqual:JavaUtilHashtable_class_()] ||
#line 65
  [((NSString *) nil_chk([type getName])) isEqual:@"java.util.LinkedHashMap"] ||
#line 66
  [((NSString *) nil_chk([type getName])) isEqual:@"java.util.concurrent.ConcurrentHashMap"] ||
#line 67
  [((NSString *) nil_chk([type getName])) isEqual:@"sun.font.AttributeMap"];
}


#line 71
- (void)marshalWithId:(id)source
withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer
withComThoughtworksXstreamConvertersMarshallingContext:(id<ComThoughtworksXstreamConvertersMarshallingContext>)context {
  id<JavaUtilMap> map = (id<JavaUtilMap>) check_protocol_cast(source, @protocol(JavaUtilMap));
  NSString *entryName = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk([self mapper])) serializedClassWithIOSClass:JavaUtilMap_Entry_class_()];
  for (id<JavaUtilIterator> iterator = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(map)) entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) check_protocol_cast([iterator next], @protocol(JavaUtilMap_Entry));
    ComThoughtworksXstreamIoExtendedHierarchicalStreamWriterHelper_startNodeWithComThoughtworksXstreamIoHierarchicalStreamWriter_withNSString_withIOSClass_(writer, entryName, [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getClass]);
    
#line 78
    [self writeItemWithId:[entry_ getKey] withComThoughtworksXstreamConvertersMarshallingContext:context withComThoughtworksXstreamIoHierarchicalStreamWriter:writer];
    [self writeItemWithId:[entry_ getValue] withComThoughtworksXstreamConvertersMarshallingContext:context withComThoughtworksXstreamIoHierarchicalStreamWriter:writer];
    
#line 81
    [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) endNode];
  }
}


#line 85
- (id)unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
           withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context {
  id<JavaUtilMap> map = (id<JavaUtilMap>) check_protocol_cast([self createCollectionWithIOSClass:[((id<ComThoughtworksXstreamConvertersUnmarshallingContext>) nil_chk(context)) getRequiredType]], @protocol(JavaUtilMap));
  [self populateMapWithComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamConvertersUnmarshallingContext:context withJavaUtilMap:map];
  return map;
}


#line 91
- (void)populateMapWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
               withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context
                                                        withJavaUtilMap:(id<JavaUtilMap>)map {
  [self populateMapWithComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamConvertersUnmarshallingContext:context withJavaUtilMap:map withJavaUtilMap:map];
}


#line 95
- (void)populateMapWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
               withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context
                                                        withJavaUtilMap:(id<JavaUtilMap>)map
                                                        withJavaUtilMap:(id<JavaUtilMap>)target {
  while ([((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader)) hasMoreChildren]) {
    [reader moveDown];
    [self putCurrentEntryIntoMapWithComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamConvertersUnmarshallingContext:context withJavaUtilMap:map withJavaUtilMap:target];
    [reader moveUp];
  }
}


#line 103
- (void)putCurrentEntryIntoMapWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
                          withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context
                                                                   withJavaUtilMap:(id<JavaUtilMap>)map
                                                                   withJavaUtilMap:(id<JavaUtilMap>)target {
  
#line 105
  [((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader)) moveDown];
  id key = [self readItemWithComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamConvertersUnmarshallingContext:context withId:map];
  [reader moveUp];
  
#line 109
  [reader moveDown];
  id value = [self readItemWithComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamConvertersUnmarshallingContext:context withId:map];
  [reader moveUp];
  
#line 113
  (void) [((id<JavaUtilMap>) nil_chk(target)) putWithId:key withId:value];
}


#line 116
- (id)createCollectionWithIOSClass:(IOSClass *)type {
  return [super createCollectionWithIOSClass:self->type_ != nil ? self->type_ : type];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamMapperMapper:", "MapConverter", NULL, 0x1, NULL, NULL },
    { "initWithComThoughtworksXstreamMapperMapper:withIOSClass:", "MapConverter", NULL, 0x1, NULL, NULL },
    { "canConvertWithIOSClass:", "canConvert", "Z", 0x1, NULL, NULL },
    { "marshalWithId:withComThoughtworksXstreamIoHierarchicalStreamWriter:withComThoughtworksXstreamConvertersMarshallingContext:", "marshal", "V", 0x1, NULL, NULL },
    { "unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:", "unmarshal", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "populateMapWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:withJavaUtilMap:", "populateMap", "V", 0x4, NULL, NULL },
    { "populateMapWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:withJavaUtilMap:withJavaUtilMap:", "populateMap", "V", 0x4, NULL, NULL },
    { "putCurrentEntryIntoMapWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:withJavaUtilMap:withJavaUtilMap:", "putCurrentEntryIntoMap", "V", 0x4, NULL, NULL },
    { "createCollectionWithIOSClass:", "createCollection", "Ljava.lang.Object;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "type_", NULL, 0x12, "Ljava.lang.Class;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersCollectionsMapConverter = { 2, "MapConverter", "com.thoughtworks.xstream.converters.collections", NULL, 0x1, 9, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamConvertersCollectionsMapConverter;
}

@end


#line 41
void ComThoughtworksXstreamConvertersCollectionsMapConverter_initWithComThoughtworksXstreamMapperMapper_(ComThoughtworksXstreamConvertersCollectionsMapConverter *self, id<ComThoughtworksXstreamMapperMapper> mapper) {
  (void) ComThoughtworksXstreamConvertersCollectionsMapConverter_initWithComThoughtworksXstreamMapperMapper_withIOSClass_(self, mapper, nil);
}


#line 41
ComThoughtworksXstreamConvertersCollectionsMapConverter *new_ComThoughtworksXstreamConvertersCollectionsMapConverter_initWithComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamMapperMapper> mapper) {
  ComThoughtworksXstreamConvertersCollectionsMapConverter *self = [ComThoughtworksXstreamConvertersCollectionsMapConverter alloc];
  ComThoughtworksXstreamConvertersCollectionsMapConverter_initWithComThoughtworksXstreamMapperMapper_(self, mapper);
  return self;
}


#line 51
void ComThoughtworksXstreamConvertersCollectionsMapConverter_initWithComThoughtworksXstreamMapperMapper_withIOSClass_(ComThoughtworksXstreamConvertersCollectionsMapConverter *self, id<ComThoughtworksXstreamMapperMapper> mapper, IOSClass *type) {
  (void) ComThoughtworksXstreamConvertersCollectionsAbstractCollectionConverter_initWithComThoughtworksXstreamMapperMapper_(self, mapper);
  self->type_ = type;
  if (type != nil && ![JavaUtilMap_class_() isAssignableFrom:type]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("@$@", type, @" not of type ", JavaUtilMap_class_()));
  }
}


#line 51
ComThoughtworksXstreamConvertersCollectionsMapConverter *new_ComThoughtworksXstreamConvertersCollectionsMapConverter_initWithComThoughtworksXstreamMapperMapper_withIOSClass_(id<ComThoughtworksXstreamMapperMapper> mapper, IOSClass *type) {
  ComThoughtworksXstreamConvertersCollectionsMapConverter *self = [ComThoughtworksXstreamConvertersCollectionsMapConverter alloc];
  ComThoughtworksXstreamConvertersCollectionsMapConverter_initWithComThoughtworksXstreamMapperMapper_withIOSClass_(self, mapper, type);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamConvertersCollectionsMapConverter)
