//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/reflection/FieldDictionary.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/reflection/FieldDictionary.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/thoughtworks/xstream/converters/reflection/FieldDictionary.h"
#include "com/thoughtworks/xstream/converters/reflection/FieldKey.h"
#include "com/thoughtworks/xstream/converters/reflection/FieldKeySorter.h"
#include "com/thoughtworks/xstream/converters/reflection/ImmutableFieldKeySorter.h"
#include "com/thoughtworks/xstream/converters/reflection/MissingFieldException.h"
#include "com/thoughtworks/xstream/core/Caching.h"
#include "com/thoughtworks/xstream/core/JVM.h"
#include "com/thoughtworks/xstream/core/util/OrderRetainingMap.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"


#line 36
@implementation ComThoughtworksXstreamConvertersReflectionFieldDictionary


#line 42
- (instancetype)init {
  return
#line 43
  [self initComThoughtworksXstreamConvertersReflectionFieldDictionaryWithComThoughtworksXstreamConvertersReflectionFieldKeySorter:[[ComThoughtworksXstreamConvertersReflectionImmutableFieldKeySorter alloc] init]];
}


#line 46
- (instancetype)initComThoughtworksXstreamConvertersReflectionFieldDictionaryWithComThoughtworksXstreamConvertersReflectionFieldKeySorter:(id<ComThoughtworksXstreamConvertersReflectionFieldKeySorter>)sorter {
  if (self = [super init]) {
    self->sorter_ = sorter;
    
#line 48
    [self init__];
  }
  return self;
}

- (instancetype)initWithComThoughtworksXstreamConvertersReflectionFieldKeySorter:(id<ComThoughtworksXstreamConvertersReflectionFieldKeySorter>)sorter {
  return [self initComThoughtworksXstreamConvertersReflectionFieldDictionaryWithComThoughtworksXstreamConvertersReflectionFieldKeySorter:
#line 46
sorter];
}


#line 51
- (void)init__ {
  
#line 52
  keyedByFieldNameCache_ = [[JavaUtilHashMap alloc] init];
  keyedByFieldKeyCache_ = [[JavaUtilHashMap alloc] init];
  (void) [keyedByFieldNameCache_ putWithId:[IOSClass classWithClass:[NSObject class]] withId:JavaUtilCollections_get_EMPTY_MAP_()];
  (void) [keyedByFieldKeyCache_ putWithId:[IOSClass classWithClass:[NSObject class]] withId:JavaUtilCollections_get_EMPTY_MAP_()];
}


#line 65
- (id<JavaUtilIterator>)serializableFieldsForWithIOSClass:(IOSClass *)cls {
  
#line 66
  return [self fieldsForWithIOSClass:cls];
}


#line 75
- (id<JavaUtilIterator>)fieldsForWithIOSClass:(IOSClass *)cls {
  
#line 76
  return [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk([self buildMapWithIOSClass:cls withBoolean:YES])) values])) iterator];
}


#line 91
- (JavaLangReflectField *)fieldWithIOSClass:(IOSClass *)cls
                               withNSString:(NSString *)name
                               withIOSClass:(IOSClass *)definedIn {
  
#line 92
  JavaLangReflectField *field = [self fieldOrNullWithIOSClass:cls withNSString:name withIOSClass:definedIn];
  if (field == nil) {
    @throw [[ComThoughtworksXstreamConvertersReflectionMissingFieldException alloc] initWithNSString:[((IOSClass *) nil_chk(cls)) getName] withNSString:name];
  }
  else {
    
#line 96
    return field;
  }
}


#line 112
- (JavaLangReflectField *)fieldOrNullWithIOSClass:(IOSClass *)cls
                                     withNSString:(NSString *)name
                                     withIOSClass:(IOSClass *)definedIn {
  
#line 113
  id<JavaUtilMap> fields = [self buildMapWithIOSClass:cls withBoolean:definedIn != nil];
  JavaLangReflectField *field = (JavaLangReflectField *) check_class_cast([((id<JavaUtilMap>) nil_chk(fields)) getWithId:definedIn != nil ?
#line 115
  (id) check_class_cast([[ComThoughtworksXstreamConvertersReflectionFieldKey alloc] initWithNSString:name withIOSClass:definedIn withInt:-1], [NSObject class]) :
#line 116
  (id) check_class_cast(name, [NSObject class])], [JavaLangReflectField class]);
  return field;
}


#line 120
- (id<JavaUtilMap>)buildMapWithIOSClass:(IOSClass *)type
                            withBoolean:(jboolean)tupleKeyed {
  
#line 121
  IOSClass *cls = type;
  @synchronized(self) {
    if (![((id<JavaUtilMap>) nil_chk(keyedByFieldNameCache_)) containsKeyWithId:type]) {
      id<JavaUtilList> superClasses = [[JavaUtilArrayList alloc] init];
      while (![[IOSClass classWithClass:[NSObject class]] isEqual:cls] && cls != nil) {
        [superClasses addWithInt:0 withId:cls];
        cls = [((IOSClass *) nil_chk(cls)) getSuperclass];
      }
      id<JavaUtilMap> lastKeyedByFieldName = JavaUtilCollections_get_EMPTY_MAP_();
      id<JavaUtilMap> lastKeyedByFieldKey = JavaUtilCollections_get_EMPTY_MAP_();
      for (id<JavaUtilIterator> iter = [superClasses iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
        cls = (IOSClass *) check_class_cast([iter next], [IOSClass class]);
        if (![keyedByFieldNameCache_ containsKeyWithId:cls]) {
          id<JavaUtilMap> keyedByFieldName = [[JavaUtilHashMap alloc] initWithJavaUtilMap:lastKeyedByFieldName];
          id<JavaUtilMap> keyedByFieldKey = [[ComThoughtworksXstreamCoreUtilOrderRetainingMap alloc] initWithJavaUtilMap:lastKeyedByFieldKey];
          IOSObjectArray *fields = [((IOSClass *) nil_chk(cls)) getDeclaredFields];
          if ([ComThoughtworksXstreamCoreJVM reverseFieldDefinition]) {
            for (jint i = RShift32(((IOSObjectArray *) nil_chk(fields))->size_, 1); i-- > 0; ) {
              jint idx = fields->size_ - i - 1;
              JavaLangReflectField *field = IOSObjectArray_Get(fields, i);
              IOSObjectArray_Set(fields, i, IOSObjectArray_Get(fields, idx));
              IOSObjectArray_Set(fields, idx, field);
            }
          }
          for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fields))->size_; i++) {
            JavaLangReflectField *field = IOSObjectArray_Get(fields, i);
            if (![((JavaLangReflectField *) nil_chk(field)) isAccessible]) {
              [field setAccessibleWithBoolean:YES];
            }
            ComThoughtworksXstreamConvertersReflectionFieldKey *fieldKey = [[ComThoughtworksXstreamConvertersReflectionFieldKey alloc] initWithNSString:
#line 151
            [field getName] withIOSClass:[field getDeclaringClass] withInt:i];
            JavaLangReflectField *existent = (JavaLangReflectField *) check_class_cast([keyedByFieldName getWithId:[field getName]], [JavaLangReflectField class]);
            if (existent == nil ||
#line 155
            (([existent getModifiers] & JavaLangReflectModifier_STATIC) != 0) ||
#line 157
            (existent != nil && (([field getModifiers] & JavaLangReflectModifier_STATIC) == 0))) {
              (void) [keyedByFieldName putWithId:[field getName] withId:field];
            }
            (void) [keyedByFieldKey putWithId:fieldKey withId:field];
          }
          id<JavaUtilMap> sortedFieldKeys = [((id<ComThoughtworksXstreamConvertersReflectionFieldKeySorter>) nil_chk(sorter_)) sortWithIOSClass:cls withJavaUtilMap:keyedByFieldKey];
          (void) [keyedByFieldNameCache_ putWithId:cls withId:keyedByFieldName];
          (void) [((id<JavaUtilMap>) nil_chk(keyedByFieldKeyCache_)) putWithId:cls withId:sortedFieldKeys];
          lastKeyedByFieldName = keyedByFieldName;
          lastKeyedByFieldKey = sortedFieldKeys;
        }
        else {
          
#line 168
          lastKeyedByFieldName = (id<JavaUtilMap>) check_protocol_cast([keyedByFieldNameCache_ getWithId:cls], @protocol(JavaUtilMap));
          lastKeyedByFieldKey = (id<JavaUtilMap>) check_protocol_cast([((id<JavaUtilMap>) nil_chk(keyedByFieldKeyCache_)) getWithId:cls], @protocol(JavaUtilMap));
        }
      }
      return tupleKeyed ? lastKeyedByFieldKey : lastKeyedByFieldName;
    }
  }
  return (id<JavaUtilMap>) check_protocol_cast((tupleKeyed ?
#line 176
  [((id<JavaUtilMap>) nil_chk(keyedByFieldKeyCache_)) getWithId:type] :
#line 177
  [keyedByFieldNameCache_ getWithId:type]), @protocol(JavaUtilMap));
}


#line 180
- (void)flushCache {
  @synchronized(self) {
    
#line 181
    id<JavaUtilSet> objectTypeSet = [JavaUtilCollections singletonWithId:[IOSClass classWithClass:[NSObject class]]];
    [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(keyedByFieldNameCache_)) keySet])) retainAllWithJavaUtilCollection:objectTypeSet];
    [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(keyedByFieldKeyCache_)) keySet])) retainAllWithJavaUtilCollection:objectTypeSet];
    if ([(id) sorter_ conformsToProtocol: @protocol(ComThoughtworksXstreamCoreCaching)]) {
      [((id<ComThoughtworksXstreamCoreCaching>) nil_chk(((id<ComThoughtworksXstreamCoreCaching>) check_protocol_cast(sorter_, @protocol(ComThoughtworksXstreamCoreCaching))))) flushCache];
    }
  }
}


#line 189
- (id)readResolve {
  
#line 190
  [self init__];
  return self;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamConvertersReflectionFieldDictionary *)other {
  [super copyAllFieldsTo:other];
  other->keyedByFieldKeyCache_ = keyedByFieldKeyCache_;
  other->keyedByFieldNameCache_ = keyedByFieldNameCache_;
  other->sorter_ = sorter_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "FieldDictionary", NULL, 0x1, NULL },
    { "initWithComThoughtworksXstreamConvertersReflectionFieldKeySorter:", "FieldDictionary", NULL, 0x1, NULL },
    { "init__", "init", "V", 0x2, NULL },
    { "serializableFieldsForWithIOSClass:", "serializableFieldsFor", "Ljava.util.Iterator;", 0x1, NULL },
    { "fieldsForWithIOSClass:", "fieldsFor", "Ljava.util.Iterator;", 0x1, NULL },
    { "fieldWithIOSClass:withNSString:withIOSClass:", "field", "Ljava.lang.reflect.Field;", 0x1, NULL },
    { "fieldOrNullWithIOSClass:withNSString:withIOSClass:", "fieldOrNull", "Ljava.lang.reflect.Field;", 0x1, NULL },
    { "buildMapWithIOSClass:withBoolean:", "buildMap", "Ljava.util.Map;", 0x2, NULL },
    { "flushCache", NULL, "V", 0x21, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "keyedByFieldNameCache_", NULL, 0x82, "Ljava.util.Map;", NULL,  },
    { "keyedByFieldKeyCache_", NULL, 0x82, "Ljava.util.Map;", NULL,  },
    { "sorter_", NULL, 0x12, "Lcom.thoughtworks.xstream.converters.reflection.FieldKeySorter;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersReflectionFieldDictionary = { "FieldDictionary", "com.thoughtworks.xstream.converters.reflection", NULL, 0x1, 10, methods, 3, fields, 0, NULL};
  return &_ComThoughtworksXstreamConvertersReflectionFieldDictionary;
}

@end
