//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/converters/reflection/SerializationMethodInvoker.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/converters/reflection/SerializationMethodInvoker.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/converters/reflection/ObjectAccessException.h"
#include "com/thoughtworks/xstream/converters/reflection/SerializationMethodInvoker.h"
#include "com/thoughtworks/xstream/core/util/FastField.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker () {
 @public
  id<JavaUtilMap> cache_;
}

- (JavaLangReflectMethod *)getMethodWithIOSClass:(IOSClass *)type
                                    withNSString:(NSString *)name
                               withIOSClassArray:(IOSObjectArray *)parameterTypes
                                     withBoolean:(jboolean)includeBaseclasses;

- (JavaLangReflectMethod *)getMethodWithIOSClass:(IOSClass *)type
                                    withNSString:(NSString *)name
                               withIOSClassArray:(IOSObjectArray *)parameterTypes;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker, cache_, id<JavaUtilMap>)

static JavaLangReflectMethod *ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_NO_METHOD_;
J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker, NO_METHOD_, JavaLangReflectMethod *)

static IOSObjectArray *ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_EMPTY_ARGS_;
J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker, EMPTY_ARGS_, IOSObjectArray *)

static IOSObjectArray *ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_OBJECT_TYPE_FIELDS_;
J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker, OBJECT_TYPE_FIELDS_, IOSObjectArray *)

__attribute__((unused)) static JavaLangReflectMethod *ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_getMethodWithIOSClass_withNSString_withIOSClassArray_withBoolean_(ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker *self, IOSClass *type, NSString *name, IOSObjectArray *parameterTypes, jboolean includeBaseclasses);

__attribute__((unused)) static JavaLangReflectMethod *ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_getMethodWithIOSClass_withNSString_withIOSClassArray_(ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker *self, IOSClass *type, NSString *name, IOSObjectArray *parameterTypes);

@interface ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_$1 : NSObject

- (void)noMethod;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_$1)

__attribute__((unused)) static void ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_$1_init(ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_$1 *self);

__attribute__((unused)) static ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_$1 *new_ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_$1)

J2OBJC_INITIALIZED_DEFN(ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker)


#line 35
@implementation ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker


#line 58
- (id)callReadResolveWithId:(id)result {
  if (result == nil) {
    return nil;
  }
  else {
    
#line 62
    JavaLangReflectMethod *readResolveMethod = ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_getMethodWithIOSClass_withNSString_withIOSClassArray_withBoolean_(self, [result getClass], @"readResolve", nil, YES);
    if (readResolveMethod != nil) {
      @try {
        return [readResolveMethod invokeWithId:result withNSObjectArray:ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_EMPTY_ARGS_];
      }
      @catch (
#line 66
      JavaLangIllegalAccessException *e) {
        @throw new_ComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$", @"Could not call ",
#line 68
        [[result getClass] getName], @".readResolve()"),
#line 69
        e);
      }
      @catch (
#line 70
      JavaLangReflectInvocationTargetException *e) {
        @throw new_ComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$", @"Could not call ",
#line 72
        [[result getClass] getName], @".readResolve()"),
#line 73
        [((JavaLangReflectInvocationTargetException *) nil_chk(e)) getTargetException]);
      }
    }
    else {
      
#line 76
      return result;
    }
  }
}


#line 81
- (id)callWriteReplaceWithId:(id)object {
  if (object == nil) {
    return nil;
  }
  else {
    
#line 85
    JavaLangReflectMethod *writeReplaceMethod = ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_getMethodWithIOSClass_withNSString_withIOSClassArray_withBoolean_(self, [object getClass], @"writeReplace", nil, YES);
    if (writeReplaceMethod != nil) {
      @try {
        return [writeReplaceMethod invokeWithId:object withNSObjectArray:ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_EMPTY_ARGS_];
      }
      @catch (
#line 89
      JavaLangIllegalAccessException *e) {
        @throw new_ComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$", @"Could not call ",
#line 91
        [[object getClass] getName], @".writeReplace()"),
#line 92
        e);
      }
      @catch (
#line 93
      JavaLangReflectInvocationTargetException *e) {
        @throw new_ComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$", @"Could not call ",
#line 95
        [[object getClass] getName], @".writeReplace()"),
#line 96
        [((JavaLangReflectInvocationTargetException *) nil_chk(e)) getTargetException]);
      }
    }
    else {
      
#line 99
      return object;
    }
  }
}


#line 104
- (jboolean)supportsReadObjectWithIOSClass:(IOSClass *)type
                               withBoolean:(jboolean)includeBaseClasses {
  return ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_getMethodWithIOSClass_withNSString_withIOSClassArray_withBoolean_(self,
#line 106
  type, @"readObject", [IOSObjectArray newArrayWithObjects:(id[]){ JavaIoObjectInputStream_class_() } count:1 type:IOSClass_class_()], includeBaseClasses) != nil;
}


#line 109
- (void)callReadObjectWithIOSClass:(IOSClass *)type
                            withId:(id)object
       withJavaIoObjectInputStream:(JavaIoObjectInputStream *)stream {
  @try {
    JavaLangReflectMethod *readObjectMethod = ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_getMethodWithIOSClass_withNSString_withIOSClassArray_withBoolean_(self,
#line 112
    type, @"readObject", [IOSObjectArray newArrayWithObjects:(id[]){ JavaIoObjectInputStream_class_() } count:1 type:IOSClass_class_()], NO);
    (void) [((JavaLangReflectMethod *) nil_chk(readObjectMethod)) invokeWithId:object withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ stream } count:1 type:NSObject_class_()]];
  }
  @catch (
#line 114
  JavaLangIllegalAccessException *e) {
    @throw new_ComThoughtworksXstreamConvertersConversionException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$", @"Could not call ",
#line 116
    [[nil_chk(object) getClass] getName], @".readObject()"),
#line 117
    e);
  }
  @catch (
#line 118
  JavaLangReflectInvocationTargetException *e) {
    @throw new_ComThoughtworksXstreamConvertersConversionException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$", @"Could not call ",
#line 120
    [[nil_chk(object) getClass] getName], @".readObject()"),
#line 121
    [((JavaLangReflectInvocationTargetException *) nil_chk(e)) getTargetException]);
  }
}


#line 125
- (jboolean)supportsWriteObjectWithIOSClass:(IOSClass *)type
                                withBoolean:(jboolean)includeBaseClasses {
  return ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_getMethodWithIOSClass_withNSString_withIOSClassArray_withBoolean_(self,
#line 127
  type, @"writeObject", [IOSObjectArray newArrayWithObjects:(id[]){ JavaIoObjectOutputStream_class_() } count:1 type:IOSClass_class_()], includeBaseClasses) != nil;
}


#line 130
- (void)callWriteObjectWithIOSClass:(IOSClass *)type
                             withId:(id)instance
       withJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)stream {
  @try {
    JavaLangReflectMethod *readObjectMethod = ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_getMethodWithIOSClass_withNSString_withIOSClassArray_withBoolean_(self,
#line 133
    type, @"writeObject", [IOSObjectArray newArrayWithObjects:(id[]){ JavaIoObjectOutputStream_class_() } count:1 type:IOSClass_class_()], NO);
    (void) [((JavaLangReflectMethod *) nil_chk(readObjectMethod)) invokeWithId:instance withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ stream } count:1 type:NSObject_class_()]];
  }
  @catch (
#line 135
  JavaLangIllegalAccessException *e) {
    @throw new_ComThoughtworksXstreamConvertersConversionException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$", @"Could not call ",
#line 137
    [[nil_chk(instance) getClass] getName], @".writeObject()"),
#line 138
    e);
  }
  @catch (
#line 139
  JavaLangReflectInvocationTargetException *e) {
    @throw new_ComThoughtworksXstreamConvertersConversionException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$", @"Could not call ",
#line 141
    [[nil_chk(instance) getClass] getName], @".writeObject()"),
#line 142
    [((JavaLangReflectInvocationTargetException *) nil_chk(e)) getTargetException]);
  }
}


#line 146
- (JavaLangReflectMethod *)getMethodWithIOSClass:(IOSClass *)type
                                    withNSString:(NSString *)name
                               withIOSClassArray:(IOSObjectArray *)parameterTypes
                                     withBoolean:(jboolean)includeBaseclasses {
  return ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_getMethodWithIOSClass_withNSString_withIOSClassArray_withBoolean_(self, type, name, parameterTypes, includeBaseclasses);
}


#line 155
- (JavaLangReflectMethod *)getMethodWithIOSClass:(IOSClass *)type
                                    withNSString:(NSString *)name
                               withIOSClassArray:(IOSObjectArray *)parameterTypes {
  return ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_getMethodWithIOSClass_withNSString_withIOSClassArray_(self, type, name, parameterTypes);
}


#line 176
- (void)flushCache {
  [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(cache_)) keySet])) retainAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_(ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_OBJECT_TYPE_FIELDS_)];
}

- (instancetype)init {
  ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_init(self);
  return self;
}

+ (void)initialize {
  if (self == [ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker class]) {
    ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_NO_METHOD_ = IOSObjectArray_Get(nil_chk(
#line 37
    [[(new_ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_$1_init()) getClass] getDeclaredMethods]),
#line 40
    0);
    ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_EMPTY_ARGS_ = [IOSObjectArray newArrayWithLength:
#line 41
    0 type:NSObject_class_()];
    ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_OBJECT_TYPE_FIELDS_ = [IOSObjectArray newArrayWithObjects:(id[]){ new_ComThoughtworksXstreamCoreUtilFastField_initWithIOSClass_withNSString_(
#line 43
    NSObject_class_(), @"readResolve"), new_ComThoughtworksXstreamCoreUtilFastField_initWithIOSClass_withNSString_(
#line 44
    NSObject_class_(), @"writeReplace"), new_ComThoughtworksXstreamCoreUtilFastField_initWithIOSClass_withNSString_(
#line 45
    NSObject_class_(), @"readObject"), new_ComThoughtworksXstreamCoreUtilFastField_initWithIOSClass_withNSString_(
#line 46
    NSObject_class_(), @"writeObject") } count:4 type:ComThoughtworksXstreamCoreUtilFastField_class_()];
    J2OBJC_SET_INITIALIZED(ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "callReadResolveWithId:", "callReadResolve", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "callWriteReplaceWithId:", "callWriteReplace", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "supportsReadObjectWithIOSClass:withBoolean:", "supportsReadObject", "Z", 0x1, NULL, NULL },
    { "callReadObjectWithIOSClass:withId:withJavaIoObjectInputStream:", "callReadObject", "V", 0x1, NULL, NULL },
    { "supportsWriteObjectWithIOSClass:withBoolean:", "supportsWriteObject", "Z", 0x1, NULL, NULL },
    { "callWriteObjectWithIOSClass:withId:withJavaIoObjectOutputStream:", "callWriteObject", "V", 0x1, NULL, NULL },
    { "getMethodWithIOSClass:withNSString:withIOSClassArray:withBoolean:", "getMethod", "Ljava.lang.reflect.Method;", 0x2, NULL, NULL },
    { "getMethodWithIOSClass:withNSString:withIOSClassArray:", "getMethod", "Ljava.lang.reflect.Method;", 0x2, NULL, NULL },
    { "flushCache", NULL, "V", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "NO_METHOD_", NULL, 0x1a, "Ljava.lang.reflect.Method;", &ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_NO_METHOD_, NULL,  },
    { "EMPTY_ARGS_", NULL, 0x1a, "[Ljava.lang.Object;", &ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_EMPTY_ARGS_, NULL,  },
    { "OBJECT_TYPE_FIELDS_", NULL, 0x1a, "[Lcom.thoughtworks.xstream.core.util.FastField;", &ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_OBJECT_TYPE_FIELDS_, NULL,  },
    { "cache_", NULL, 0x2, "Ljava.util.Map;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker = { 2, "SerializationMethodInvoker", "com.thoughtworks.xstream.converters.reflection", NULL, 0x1, 10, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker;
}

@end


#line 146
JavaLangReflectMethod *ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_getMethodWithIOSClass_withNSString_withIOSClassArray_withBoolean_(ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker *self, IOSClass *type, NSString *name, IOSObjectArray *parameterTypes, jboolean includeBaseclasses) {
  
#line 148
  JavaLangReflectMethod *method = ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_getMethodWithIOSClass_withNSString_withIOSClassArray_(self, type, name, parameterTypes);
  return method == ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_NO_METHOD_ ||
#line 150
  (!includeBaseclasses && ![((IOSClass *) nil_chk([((JavaLangReflectMethod *) nil_chk(method)) getDeclaringClass])) isEqual:type]) ?
#line 151
  nil :
#line 152
  method;
}


#line 155
JavaLangReflectMethod *ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_getMethodWithIOSClass_withNSString_withIOSClassArray_(ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker *self, IOSClass *type, NSString *name, IOSObjectArray *parameterTypes) {
  if (type == nil) {
    return nil;
  }
  ComThoughtworksXstreamCoreUtilFastField *method = new_ComThoughtworksXstreamCoreUtilFastField_initWithIOSClass_withNSString_(type, name);
  JavaLangReflectMethod *result = (JavaLangReflectMethod *) check_class_cast([((id<JavaUtilMap>) nil_chk(self->cache_)) getWithId:method], [JavaLangReflectMethod class]);
  
#line 162
  if (result == nil) {
    @try {
      result = [((IOSClass *) nil_chk(type)) getDeclaredMethod:name parameterTypes:parameterTypes];
      if (![((JavaLangReflectMethod *) nil_chk(result)) isAccessible]) {
        [result setAccessibleWithBoolean:YES];
      }
    }
    @catch (
#line 168
    JavaLangNoSuchMethodException *e) {
      result = ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_getMethodWithIOSClass_withNSString_withIOSClassArray_(self, [((IOSClass *) nil_chk(type)) getSuperclass], name, parameterTypes);
    }
    (void) [self->cache_ putWithId:method withId:result];
  }
  return result;
}

void ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_init(ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker *self) {
  (void) NSObject_init(self);
  self->cache_ = JavaUtilCollections_synchronizedMapWithJavaUtilMap_(new_JavaUtilHashMap_init());
  {
    
#line 50
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_OBJECT_TYPE_FIELDS_))->size_; ++i) {
      (void) [((id<JavaUtilMap>) nil_chk(self->cache_)) putWithId:IOSObjectArray_Get(ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_OBJECT_TYPE_FIELDS_, i) withId:ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_NO_METHOD_];
    }
  }
}

ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker *new_ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_init() {
  ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker *self = [ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker alloc];
  ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker)

@implementation ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_$1


#line 38
- (void)noMethod {
}

- (instancetype)init {
  ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "noMethod", NULL, "V", 0x2, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_$1 = { 2, "", "com.thoughtworks.xstream.converters.reflection", "SerializationMethodInvoker", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_$1;
}

@end

void ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_$1_init(ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_$1 *self) {
  (void) NSObject_init(self);
}

ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_$1 *new_ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_$1_init() {
  ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_$1 *self = [ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_$1 alloc];
  ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker_$1)
