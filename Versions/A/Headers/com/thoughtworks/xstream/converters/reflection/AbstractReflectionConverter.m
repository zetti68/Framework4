//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/reflection/AbstractReflectionConverter.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/reflection/AbstractReflectionConverter.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/converters/Converter.h"
#include "com/thoughtworks/xstream/converters/MarshallingContext.h"
#include "com/thoughtworks/xstream/converters/SingleValueConverter.h"
#include "com/thoughtworks/xstream/converters/UnmarshallingContext.h"
#include "com/thoughtworks/xstream/converters/reflection/AbstractReflectionConverter.h"
#include "com/thoughtworks/xstream/converters/reflection/ObjectAccessException.h"
#include "com/thoughtworks/xstream/converters/reflection/PureJavaReflectionProvider.h"
#include "com/thoughtworks/xstream/converters/reflection/ReflectionProvider.h"
#include "com/thoughtworks/xstream/converters/reflection/SerializationMethodInvoker.h"
#include "com/thoughtworks/xstream/core/ReferencingMarshallingContext.h"
#include "com/thoughtworks/xstream/core/util/ArrayIterator.h"
#include "com/thoughtworks/xstream/core/util/FastField.h"
#include "com/thoughtworks/xstream/core/util/HierarchicalStreams.h"
#include "com/thoughtworks/xstream/core/util/Primitives.h"
#include "com/thoughtworks/xstream/io/ExtendedHierarchicalStreamWriterHelper.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamWriter.h"
#include "com/thoughtworks/xstream/mapper/CannotResolveClassException.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/lang/Error.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/reflect/Array.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

#pragma clang diagnostic ignored "-Wprotocol"


#line 45
@implementation ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter


#line 52
- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper
withComThoughtworksXstreamConvertersReflectionReflectionProvider:(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)reflectionProvider {
  if (self = [super init]) {
    
#line 53
    self->mapper_ = mapper;
    
#line 54
    self->reflectionProvider_ = reflectionProvider;
    
#line 55
    serializationMethodInvoker_ = [[ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker alloc] init];
  }
  return self;
}


#line 58
- (jboolean)canAccessWithIOSClass:(IOSClass *)type {
  
#line 59
  @try {
    (void) [((id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(reflectionProvider_)) getFieldOrNullWithIOSClass:type withNSString:@"%"];
    return YES;
  }
  @catch (
#line 62
  JavaLangError *e) {
  }
  
#line 65
  return NO;
}


#line 69
- (void)marshalWithId:(id)original
withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer
withComThoughtworksXstreamConvertersMarshallingContext:(id<ComThoughtworksXstreamConvertersMarshallingContext>)context {
  
#line 71
  id source = [((ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker *) nil_chk(serializationMethodInvoker_)) callWriteReplaceWithId:original];
  
#line 73
  if (source != original && [(id) context conformsToProtocol: @protocol(ComThoughtworksXstreamCoreReferencingMarshallingContext)]) {
    [((id<ComThoughtworksXstreamCoreReferencingMarshallingContext>) nil_chk(((id<ComThoughtworksXstreamCoreReferencingMarshallingContext>) check_protocol_cast(context, @protocol(ComThoughtworksXstreamCoreReferencingMarshallingContext))))) replaceWithId:original withId:source];
  }
  if ([nil_chk(source) getClass] != [nil_chk(original) getClass]) {
    NSString *attributeName = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper_)) aliasForSystemAttributeWithNSString:@"resolves-to"];
    if (attributeName != nil) {
      [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) addAttributeWithNSString:attributeName withNSString:[mapper_ serializedClassWithIOSClass:[source getClass]]];
    }
    [((id<ComThoughtworksXstreamConvertersMarshallingContext>) nil_chk(context)) convertAnotherWithId:source];
  }
  else {
    
#line 83
    [self doMarshalWithId:source withComThoughtworksXstreamIoHierarchicalStreamWriter:writer withComThoughtworksXstreamConvertersMarshallingContext:context];
  }
}


#line 87
- (void)doMarshalWithId:(id)source
withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer
withComThoughtworksXstreamConvertersMarshallingContext:(id<ComThoughtworksXstreamConvertersMarshallingContext>)context {
  
#line 89
  id<JavaUtilList> fields = [[JavaUtilArrayList alloc] init];
  id<JavaUtilMap> defaultFieldDefinition = [[JavaUtilHashMap alloc] init];
  
#line 93
  [((id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(reflectionProvider_)) visitSerializableFieldsWithId:source withComThoughtworksXstreamConvertersReflectionReflectionProvider_Visitor:[[ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_$1 alloc] initWithComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter:self withJavaUtilMap:defaultFieldDefinition withId:source withComThoughtworksXstreamIoHierarchicalStreamWriter:writer withJavaUtilList:fields]];
  
#line 133
  (void) [[ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_$2 alloc] initWithComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter:self withJavaUtilList:fields withId:source withComThoughtworksXstreamConvertersMarshallingContext:context withComThoughtworksXstreamIoHierarchicalStreamWriter:writer withJavaUtilMap:defaultFieldDefinition];
}


#line 243
- (void)marshallFieldWithComThoughtworksXstreamConvertersMarshallingContext:(id<ComThoughtworksXstreamConvertersMarshallingContext>)context
                                                                     withId:(id)newObj
                                                   withJavaLangReflectField:(JavaLangReflectField *)field {
  
#line 244
  [((id<ComThoughtworksXstreamConvertersMarshallingContext>) nil_chk(context)) convertAnotherWithId:newObj withComThoughtworksXstreamConvertersConverter:
#line 245
  [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper_)) getLocalConverterWithIOSClass:[((JavaLangReflectField *) nil_chk(field)) getDeclaringClass] withNSString:[field getName]]];
}


#line 249
- (id)unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
           withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context {
  
#line 250
  id result = [self instantiateNewInstanceWithComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamConvertersUnmarshallingContext:context];
  result = [self doUnmarshalWithId:result withComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamConvertersUnmarshallingContext:context];
  return [((ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker *) nil_chk(serializationMethodInvoker_)) callReadResolveWithId:result];
}


#line 255
- (id)doUnmarshalWithId:(id)result
withComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context {
  
#line 257
  IOSClass *resultType = [nil_chk(result) getClass];
  id<JavaUtilSet> seenFields = [[ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_$3 alloc] init];
  
#line 269
  id<JavaUtilIterator> it = [((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader)) getAttributeNames];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *attrAlias = (NSString *) check_class_cast([it next], [NSString class]);
    
#line 273
    NSString *attrName = [mapper_ realMemberWithIOSClass:resultType withNSString:[((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper_)) attributeForAliasWithNSString:attrAlias]];
    JavaLangReflectField *field = [((id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(reflectionProvider_)) getFieldOrNullWithIOSClass:resultType withNSString:attrName];
    if (field != nil && [self shouldUnmarshalFieldWithJavaLangReflectField:field]) {
      IOSClass *classDefiningField = [field getDeclaringClass];
      if (![mapper_ shouldSerializeMemberWithIOSClass:classDefiningField withNSString:attrName]) {
        continue;
      }
      
#line 282
      id<ComThoughtworksXstreamConvertersSingleValueConverter> converter = [mapper_ getConverterFromAttributeWithIOSClass:classDefiningField withNSString:
#line 283
      attrName withIOSClass:[field getType]];
      IOSClass *type = [field getType];
      if (converter != nil) {
        id value = [converter fromStringWithNSString:[reader getAttributeWithNSString:attrAlias]];
        if ([((IOSClass *) nil_chk(type)) isPrimitive]) {
          type = [ComThoughtworksXstreamCoreUtilPrimitives boxWithIOSClass:type];
        }
        if (value != nil && ![((IOSClass *) nil_chk(type)) isAssignableFrom:[value getClass]]) {
          @throw [[ComThoughtworksXstreamConvertersConversionException alloc] initWithNSString:JreStrcat("$$$$", @"Cannot convert type ", [[value getClass] getName], @" to type ",
#line 292
          [type getName])];
        }
        [seenFields addWithId:[[ComThoughtworksXstreamCoreUtilFastField alloc] initWithIOSClass:classDefiningField withNSString:attrName]];
        [reflectionProvider_ writeFieldWithId:result withNSString:attrName withId:value withIOSClass:classDefiningField];
      }
    }
  }
  
#line 300
  id<JavaUtilMap> implicitCollectionsForCurrentObject = nil;
  while ([reader hasMoreChildren]) {
    [reader moveDown];
    
#line 304
    NSString *originalNodeName = [reader getNodeName];
    IOSClass *explicitDeclaringClass = [self readDeclaringClassWithComThoughtworksXstreamIoHierarchicalStreamReader:reader];
    IOSClass *fieldDeclaringClass = explicitDeclaringClass == nil ? resultType :
#line 307
    explicitDeclaringClass;
    NSString *fieldName = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper_)) realMemberWithIOSClass:fieldDeclaringClass withNSString:originalNodeName];
    id<ComThoughtworksXstreamMapperMapper_ImplicitCollectionMapping> implicitCollectionMapping = [mapper_ getImplicitCollectionDefForFieldNameWithIOSClass:
#line 310
    fieldDeclaringClass withNSString:fieldName];
    id value;
    NSString *implicitFieldName = nil;
    JavaLangReflectField *field = nil;
    IOSClass *type = nil;
    if (implicitCollectionMapping == nil) {
      
#line 318
      field = [((id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(reflectionProvider_)) getFieldOrNullWithIOSClass:fieldDeclaringClass withNSString:fieldName];
      if (field == nil) {
        
#line 321
        IOSClass *itemType = [mapper_ getItemTypeForItemFieldNameWithIOSClass:resultType withNSString:fieldName];
        if (itemType != nil) {
          NSString *classAttribute = [ComThoughtworksXstreamCoreUtilHierarchicalStreams readClassAttributeWithComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamMapperMapper:mapper_];
          if (classAttribute != nil) {
            type = [mapper_ realClassWithNSString:classAttribute];
          }
          else {
            
#line 327
            type = itemType;
          }
        }
        else {
          
#line 332
          @try {
            type = [mapper_ realClassWithNSString:originalNodeName];
            implicitFieldName = [mapper_ getFieldNameForItemTypeAndNameWithIOSClass:[((id<ComThoughtworksXstreamConvertersUnmarshallingContext>) nil_chk(context)) getRequiredType] withIOSClass:
#line 335
            type withNSString:originalNodeName];
          }
          @catch (
#line 336
          ComThoughtworksXstreamMapperCannotResolveClassException *e) {
          }
          
#line 339
          if (type == nil || (type != nil && implicitFieldName == nil)) {
            
#line 342
            [self handleUnknownFieldWithIOSClass:explicitDeclaringClass withNSString:fieldName withIOSClass:resultType withNSString:originalNodeName];
            
#line 345
            type = nil;
          }
        }
        if (type == nil) {
          
#line 350
          value = nil;
        }
        else {
          
#line 352
          if ([[IOSClass classWithProtocol:@protocol(JavaUtilMap_Entry)] isEqual:type]) {
            
#line 355
            [reader moveDown];
            id key = [((id<ComThoughtworksXstreamConvertersUnmarshallingContext>) nil_chk(context)) convertAnotherWithId:result withIOSClass:
#line 357
            [ComThoughtworksXstreamCoreUtilHierarchicalStreams readClassTypeWithComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamMapperMapper:mapper_]];
            [reader moveUp];
            [reader moveDown];
            id v = [context convertAnotherWithId:result withIOSClass:
#line 361
            [ComThoughtworksXstreamCoreUtilHierarchicalStreams readClassTypeWithComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamMapperMapper:mapper_]];
            [reader moveUp];
            value = [((id<JavaUtilIterator>) nil_chk([((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk([JavaUtilCollections singletonMapWithId:key withId:v])) entrySet])) iterator])) next];
          }
          else {
            value = [((id<ComThoughtworksXstreamConvertersUnmarshallingContext>) nil_chk(context)) convertAnotherWithId:result withIOSClass:type];
          }
        }
      }
      else {
        
#line 370
        jboolean fieldAlreadyChecked = NO;
        
#line 373
        if (explicitDeclaringClass == nil) {
          while (field != nil &&
#line 375
          !(fieldAlreadyChecked = ([self shouldUnmarshalFieldWithJavaLangReflectField:field] &&
#line 376
          [mapper_ shouldSerializeMemberWithIOSClass:[field getDeclaringClass] withNSString:fieldName]))) {
            field = [reflectionProvider_ getFieldOrNullWithIOSClass:[((IOSClass *) nil_chk([field getDeclaringClass])) getSuperclass] withNSString:
#line 378
            fieldName];
          }
        }
        if (field != nil &&
#line 382
        (fieldAlreadyChecked || ([self shouldUnmarshalFieldWithJavaLangReflectField:field] && [mapper_ shouldSerializeMemberWithIOSClass:
#line 383
        [field getDeclaringClass] withNSString:fieldName]))) {
          
#line 385
          NSString *classAttribute = [ComThoughtworksXstreamCoreUtilHierarchicalStreams readClassAttributeWithComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamMapperMapper:mapper_];
          if (classAttribute != nil) {
            type = [mapper_ realClassWithNSString:classAttribute];
          }
          else {
            
#line 389
            type = [mapper_ defaultImplementationOfWithIOSClass:[field getType]];
          }
          
#line 393
          value = [self unmarshallFieldWithComThoughtworksXstreamConvertersUnmarshallingContext:context withId:result withIOSClass:type withJavaLangReflectField:field];
          IOSClass *definedType = [field getType];
          if (![((IOSClass *) nil_chk(definedType)) isPrimitive]) {
            type = definedType;
          }
        }
        else {
          
#line 399
          value = nil;
        }
      }
    }
    else {
      implicitFieldName = [implicitCollectionMapping getFieldName];
      type = [implicitCollectionMapping getItemType];
      if (type == nil) {
        NSString *classAttribute = [ComThoughtworksXstreamCoreUtilHierarchicalStreams readClassAttributeWithComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamMapperMapper:mapper_];
        type = [mapper_ realClassWithNSString:classAttribute != nil ? classAttribute : originalNodeName];
      }
      value = [((id<ComThoughtworksXstreamConvertersUnmarshallingContext>) nil_chk(context)) convertAnotherWithId:result withIOSClass:type];
    }
    
#line 413
    if (value != nil && ![((IOSClass *) nil_chk(type)) isAssignableFrom:[value getClass]]) {
      @throw [[ComThoughtworksXstreamConvertersConversionException alloc] initWithNSString:JreStrcat("$$$$", @"Cannot convert type ", [[value getClass] getName], @" to type ",
#line 415
      [type getName])];
    }
    
#line 418
    if (field != nil) {
      [((id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(reflectionProvider_)) writeFieldWithId:result withNSString:fieldName withId:value withIOSClass:[field getDeclaringClass]];
      [seenFields addWithId:[[ComThoughtworksXstreamCoreUtilFastField alloc] initWithIOSClass:[field getDeclaringClass] withNSString:fieldName]];
    }
    else
#line 421
    if (type != nil) {
      if (implicitFieldName == nil) {
        
#line 424
        implicitFieldName = [mapper_ getFieldNameForItemTypeAndNameWithIOSClass:[((id<ComThoughtworksXstreamConvertersUnmarshallingContext>) nil_chk(context)) getRequiredType] withIOSClass:
#line 425
        value != nil ? [value getClass] : [IOSClass classWithClass:[ComThoughtworksXstreamMapperMapper_Null class]] withNSString:originalNodeName];
      }
      if (implicitCollectionsForCurrentObject == nil) {
        implicitCollectionsForCurrentObject = [[JavaUtilHashMap alloc] init];
      }
      [self writeValueToImplicitCollectionWithId:value withJavaUtilMap:implicitCollectionsForCurrentObject withId:result withNSString:
#line 431
      implicitFieldName];
    }
    
#line 434
    [reader moveUp];
  }
  
#line 437
  if (implicitCollectionsForCurrentObject != nil) {
    for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([implicitCollectionsForCurrentObject entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      
#line 440
      id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) check_protocol_cast([iter next], @protocol(JavaUtilMap_Entry));
      id value = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
      if ([value isKindOfClass:[ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_ArraysList class]]) {
        id array = [((ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_ArraysList *) nil_chk(((ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_ArraysList *) check_class_cast(value, [ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_ArraysList class])))) toPhysicalArray];
        [((id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(reflectionProvider_)) writeFieldWithId:result withNSString:(NSString *) check_class_cast([entry_ getKey], [NSString class]) withId:array withIOSClass:nil];
      }
    }
  }
  
#line 449
  return result;
}


#line 452
- (id)unmarshallFieldWithComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context
                                                                       withId:(id)result
                                                                 withIOSClass:(IOSClass *)type
                                                     withJavaLangReflectField:(JavaLangReflectField *)field {
  
#line 454
  return [((id<ComThoughtworksXstreamConvertersUnmarshallingContext>) nil_chk(context)) convertAnotherWithId:result withIOSClass:type withComThoughtworksXstreamConvertersConverter:
#line 455
  [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper_)) getLocalConverterWithIOSClass:[((JavaLangReflectField *) nil_chk(field)) getDeclaringClass] withNSString:[field getName]]];
}


#line 458
- (jboolean)shouldUnmarshalTransientFields {
  
#line 459
  return NO;
}


#line 462
- (jboolean)shouldUnmarshalFieldWithJavaLangReflectField:(JavaLangReflectField *)field {
  
#line 463
  return !([JavaLangReflectModifier isTransientWithInt:[((JavaLangReflectField *) nil_chk(field)) getModifiers]] && ![self shouldUnmarshalTransientFields]);
}


#line 466
- (void)handleUnknownFieldWithIOSClass:(IOSClass *)classDefiningField
                          withNSString:(NSString *)fieldName
                          withIOSClass:(IOSClass *)resultType
                          withNSString:(NSString *)originalNodeName {
  if (classDefiningField == nil) {
    for (IOSClass *cls = resultType; cls != nil; cls = [((IOSClass *) nil_chk(cls)) getSuperclass]) {
      if (![((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper_)) shouldSerializeMemberWithIOSClass:cls withNSString:originalNodeName]) {
        return;
      }
    }
  }
  @throw [[ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_UnknownFieldException alloc] initWithNSString:[((IOSClass *) nil_chk(resultType)) getName] withNSString:fieldName];
}


#line 478
- (void)writeValueToImplicitCollectionWithId:(id)value
                             withJavaUtilMap:(id<JavaUtilMap>)implicitCollections
                                      withId:(id)result
                                withNSString:(NSString *)implicitFieldName {
  id<JavaUtilCollection> collection = (id<JavaUtilCollection>) check_protocol_cast([((id<JavaUtilMap>) nil_chk(implicitCollections)) getWithId:implicitFieldName], @protocol(JavaUtilCollection));
  if (collection == nil) {
    IOSClass *physicalFieldType = [((id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(reflectionProvider_)) getFieldTypeWithId:result withNSString:implicitFieldName withIOSClass:nil];
    if ([((IOSClass *) nil_chk(physicalFieldType)) isArray]) {
      collection = [[ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_ArraysList alloc] initWithIOSClass:physicalFieldType];
    }
    else {
      
#line 486
      IOSClass *fieldType = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper_)) defaultImplementationOfWithIOSClass:physicalFieldType];
      if (!([[IOSClass classWithProtocol:@protocol(JavaUtilCollection)] isAssignableFrom:fieldType] || [[IOSClass classWithProtocol:@protocol(JavaUtilMap)] isAssignableFrom:fieldType])) {
        @throw [[ComThoughtworksXstreamConvertersReflectionObjectAccessException alloc] initWithNSString:JreStrcat("$$$$$$", @"Field ", implicitFieldName, @" of ",
#line 489
        [[nil_chk(result) getClass] getName], @" is configured for an implicit Collection or Map, but field is of type ",
#line 491
        [((IOSClass *) nil_chk(fieldType)) getName])];
      }
      if (pureJavaReflectionProvider_ == nil) {
        pureJavaReflectionProvider_ = [[ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider alloc] init];
      }
      id instance = [((id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(pureJavaReflectionProvider_)) newInstanceWithIOSClass:fieldType];
      if ([instance conformsToProtocol: @protocol(JavaUtilCollection)]) {
        collection = (id<JavaUtilCollection>) check_protocol_cast(instance, @protocol(JavaUtilCollection));
      }
      else {
        
#line 500
        id<ComThoughtworksXstreamMapperMapper_ImplicitCollectionMapping> implicitCollectionMapping = [mapper_ getImplicitCollectionDefForFieldNameWithIOSClass:
#line 501
        [nil_chk(result) getClass] withNSString:implicitFieldName];
        collection = [[ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_MappingList alloc] initWithComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter:self withJavaUtilMap:(id<JavaUtilMap>) check_protocol_cast(instance, @protocol(JavaUtilMap)) withNSString:[((id<ComThoughtworksXstreamMapperMapper_ImplicitCollectionMapping>) nil_chk(implicitCollectionMapping)) getKeyFieldName]];
      }
      [reflectionProvider_ writeFieldWithId:result withNSString:implicitFieldName withId:instance withIOSClass:nil];
    }
    (void) [implicitCollections putWithId:implicitFieldName withId:collection];
  }
  [((id<JavaUtilCollection>) nil_chk(collection)) addWithId:value];
}


#line 511
- (IOSClass *)readDeclaringClassWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader {
  
#line 512
  NSString *attributeName = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper_)) aliasForSystemAttributeWithNSString:@"defined-in"];
  NSString *definedIn = attributeName == nil ? nil : [((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader)) getAttributeWithNSString:attributeName];
  return definedIn == nil ? nil : [mapper_ realClassWithNSString:definedIn];
}


#line 517
- (id)instantiateNewInstanceWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
                        withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context {
  NSString *attributeName = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper_)) aliasForSystemAttributeWithNSString:@"resolves-to"];
  NSString *readResolveValue = attributeName == nil ? nil : [((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader)) getAttributeWithNSString:attributeName];
  id currentObject = [((id<ComThoughtworksXstreamConvertersUnmarshallingContext>) nil_chk(context)) currentObject];
  if (currentObject != nil) {
    return currentObject;
  }
  else
#line 524
  if (readResolveValue != nil) {
    return [((id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(reflectionProvider_)) newInstanceWithIOSClass:[mapper_ realClassWithNSString:readResolveValue]];
  }
  else {
    
#line 527
    return [((id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(reflectionProvider_)) newInstanceWithIOSClass:[context getRequiredType]];
  }
}


#line 532
- (void)flushCache {
  
#line 533
  [((ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker *) nil_chk(serializationMethodInvoker_)) flushCache];
}


#line 536
- (id)readResolve {
  
#line 537
  serializationMethodInvoker_ = [[ComThoughtworksXstreamConvertersReflectionSerializationMethodInvoker alloc] init];
  return self;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter *)other {
  [super copyAllFieldsTo:other];
  other->mapper_ = mapper_;
  other->pureJavaReflectionProvider_ = pureJavaReflectionProvider_;
  other->reflectionProvider_ = reflectionProvider_;
  other->serializationMethodInvoker_ = serializationMethodInvoker_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamMapperMapper:withComThoughtworksXstreamConvertersReflectionReflectionProvider:", "AbstractReflectionConverter", NULL, 0x1, NULL },
    { "canAccessWithIOSClass:", "canAccess", "Z", 0x4, NULL },
    { "marshalWithId:withComThoughtworksXstreamIoHierarchicalStreamWriter:withComThoughtworksXstreamConvertersMarshallingContext:", "marshal", "V", 0x1, NULL },
    { "doMarshalWithId:withComThoughtworksXstreamIoHierarchicalStreamWriter:withComThoughtworksXstreamConvertersMarshallingContext:", "doMarshal", "V", 0x4, NULL },
    { "marshallFieldWithComThoughtworksXstreamConvertersMarshallingContext:withId:withJavaLangReflectField:", "marshallField", "V", 0x4, NULL },
    { "unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:", "unmarshal", "Ljava.lang.Object;", 0x1, NULL },
    { "doUnmarshalWithId:withComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:", "doUnmarshal", "Ljava.lang.Object;", 0x1, NULL },
    { "unmarshallFieldWithComThoughtworksXstreamConvertersUnmarshallingContext:withId:withIOSClass:withJavaLangReflectField:", "unmarshallField", "Ljava.lang.Object;", 0x4, NULL },
    { "shouldUnmarshalTransientFields", NULL, "Z", 0x4, NULL },
    { "shouldUnmarshalFieldWithJavaLangReflectField:", "shouldUnmarshalField", "Z", 0x4, NULL },
    { "handleUnknownFieldWithIOSClass:withNSString:withIOSClass:withNSString:", "handleUnknownField", "V", 0x2, NULL },
    { "writeValueToImplicitCollectionWithId:withJavaUtilMap:withId:withNSString:", "writeValueToImplicitCollection", "V", 0x2, NULL },
    { "readDeclaringClassWithComThoughtworksXstreamIoHierarchicalStreamReader:", "readDeclaringClass", "Ljava.lang.Class;", 0x2, NULL },
    { "instantiateNewInstanceWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:", "instantiateNewInstance", "Ljava.lang.Object;", 0x4, NULL },
    { "flushCache", NULL, "V", 0x1, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "reflectionProvider_", NULL, 0x14, "Lcom.thoughtworks.xstream.converters.reflection.ReflectionProvider;", NULL,  },
    { "mapper_", NULL, 0x14, "Lcom.thoughtworks.xstream.mapper.Mapper;", NULL,  },
    { "serializationMethodInvoker_", NULL, 0x84, "Lcom.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker;", NULL,  },
    { "pureJavaReflectionProvider_", NULL, 0x82, "Lcom.thoughtworks.xstream.converters.reflection.ReflectionProvider;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter = { "AbstractReflectionConverter", "com.thoughtworks.xstream.converters.reflection", NULL, 0x401, 16, methods, 4, fields, 0, NULL};
  return &_ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter;
}

@end


#line 541
@implementation ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_DuplicateFieldException


#line 542
- (instancetype)initWithNSString:(NSString *)msg {
  if (self =
#line 543
  [super initWithNSString:JreStrcat("$$", @"Duplicate field ", msg)]) {
    
#line 544
    [self addWithNSString:@"field" withNSString:msg];
  }
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "DuplicateFieldException", NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_DuplicateFieldException = { "DuplicateFieldException", "com.thoughtworks.xstream.converters.reflection", "AbstractReflectionConverter", 0x9, 1, methods, 0, NULL, 0, NULL};
  return &_ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_DuplicateFieldException;
}

@end


#line 548
@implementation ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_UnknownFieldException


#line 549
- (instancetype)initWithNSString:(NSString *)type
                    withNSString:(NSString *)field {
  if (self =
#line 550
  [super initWithNSString:JreStrcat("$$C$", @"No such field ", type, '.', field)]) {
    
#line 551
    [self addWithNSString:@"field" withNSString:field];
  }
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:", "UnknownFieldException", NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_UnknownFieldException = { "UnknownFieldException", "com.thoughtworks.xstream.converters.reflection", "AbstractReflectionConverter", 0x9, 1, methods, 0, NULL, 0, NULL};
  return &_ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_UnknownFieldException;
}

@end


#line 555
@implementation ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_FieldInfo


#line 561
- (instancetype)initWithNSString:(NSString *)fieldName
                    withIOSClass:(IOSClass *)type
                    withIOSClass:(IOSClass *)definedIn
                          withId:(id)value {
  if (self = [super init]) {
    
#line 562
    self->fieldName_ = fieldName;
    
#line 563
    self->type_ = type;
    
#line 564
    self->definedIn_ = definedIn;
    
#line 565
    self->value_ = value;
  }
  return self;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_FieldInfo *)other {
  [super copyAllFieldsTo:other];
  other->definedIn_ = definedIn_;
  other->fieldName_ = fieldName_;
  other->type_ = type_;
  other->value_ = value_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withIOSClass:withIOSClass:withId:", "FieldInfo", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fieldName_", NULL, 0x10, "Ljava.lang.String;", NULL,  },
    { "type_", NULL, 0x10, "Ljava.lang.Class;", NULL,  },
    { "definedIn_", NULL, 0x10, "Ljava.lang.Class;", NULL,  },
    { "value_", NULL, 0x10, "Ljava.lang.Object;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_FieldInfo = { "FieldInfo", "com.thoughtworks.xstream.converters.reflection", "AbstractReflectionConverter", 0xa, 1, methods, 4, fields, 0, NULL};
  return &_ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_FieldInfo;
}

@end


#line 569
@implementation ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_ArraysList


#line 572
- (instancetype)initWithIOSClass:(IOSClass *)physicalFieldType {
  if (self = [super init]) {
    
#line 573
    self->physicalFieldType_ = physicalFieldType;
  }
  return self;
}


#line 576
- (id)toPhysicalArray {
  
#line 577
  IOSObjectArray *objects = [self toArray];
  id array = [JavaLangReflectArray newInstanceWithIOSClass:[((IOSClass *) nil_chk(physicalFieldType_)) getComponentType] withInt:((IOSObjectArray *) nil_chk(objects))->size_];
  if ([((IOSClass *) nil_chk([physicalFieldType_ getComponentType])) isPrimitive]) {
    for (jint i = 0; i < objects->size_; ++i) {
      [JavaLangReflectArray setWithId:array withInt:i withId:[JavaLangReflectArray getWithId:objects withInt:i]];
    }
  }
  else {
    
#line 584
    [JavaLangSystem arraycopyWithId:objects withInt:0 withId:array withInt:0 withInt:objects->size_];
  }
  return array;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_ArraysList *)other {
  [super copyAllFieldsTo:other];
  other->physicalFieldType_ = physicalFieldType_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithIOSClass:", "ArraysList", NULL, 0x0, NULL },
    { "toPhysicalArray", NULL, "Ljava.lang.Object;", 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "physicalFieldType_", NULL, 0x10, "Ljava.lang.Class;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_ArraysList = { "ArraysList", "com.thoughtworks.xstream.converters.reflection", "AbstractReflectionConverter", 0xa, 2, methods, 1, fields, 0, NULL};
  return &_ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_ArraysList;
}

@end


#line 590
@implementation ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_MappingList


#line 596
- (instancetype)initWithComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter:(ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter *)outer$
                                                                              withJavaUtilMap:(id<JavaUtilMap>)map
                                                                                 withNSString:(NSString *)keyFieldName {
  this$0_ = outer$;
  if (self = [super init]) {
    fieldCache_ =
#line 594
    [[JavaUtilHashMap alloc] init];
    
#line 597
    self->map_ = map;
    
#line 598
    self->keyFieldName_ = keyFieldName;
  }
  return self;
}


#line 602
- (jboolean)addWithId:(id)object {
  
#line 603
  if (object == nil) {
    jboolean containsNull = ![((id<JavaUtilMap>) nil_chk(map_)) containsKeyWithId:nil];
    (void) [map_ putWithId:nil withId:nil];
    return containsNull;
  }
  IOSClass *itemType = [nil_chk(object) getClass];
  
#line 610
  if (keyFieldName_ != nil) {
    JavaLangReflectField *field = (JavaLangReflectField *) check_class_cast([((id<JavaUtilMap>) nil_chk(fieldCache_)) getWithId:itemType], [JavaLangReflectField class]);
    if (field == nil) {
      field = [((id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(this$0_->reflectionProvider_)) getFieldWithIOSClass:itemType withNSString:keyFieldName_];
      (void) [fieldCache_ putWithId:itemType withId:field];
    }
    if (field != nil) {
      @try {
        id key = [field getWithId:object];
        return [((id<JavaUtilMap>) nil_chk(map_)) putWithId:key withId:object] == nil;
      }
      @catch (
#line 620
      JavaLangIllegalArgumentException *e) {
        @throw [[ComThoughtworksXstreamConvertersReflectionObjectAccessException alloc] initWithNSString:JreStrcat("$@C$", @"Could not get field ", [field getClass], '.',
#line 622
        [field getName]) withJavaLangThrowable:e];
      }
      @catch (
#line 623
      JavaLangIllegalAccessException *e) {
        @throw [[ComThoughtworksXstreamConvertersReflectionObjectAccessException alloc] initWithNSString:JreStrcat("$@C$", @"Could not get field ", [field getClass], '.',
#line 625
        [field getName]) withJavaLangThrowable:e];
      }
    }
  }
  else
#line 628
  if ([object conformsToProtocol: @protocol(JavaUtilMap_Entry)]) {
    id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) check_protocol_cast(object, @protocol(JavaUtilMap_Entry));
    return [((id<JavaUtilMap>) nil_chk(map_)) putWithId:[entry_ getKey] withId:[entry_ getValue]] == nil;
  }
  
#line 633
  @throw [[ComThoughtworksXstreamConvertersConversionException alloc] initWithNSString:JreStrcat("$$$$", @"Element of type ", [[object getClass] getName], @" is not defined as entry for map of type ",
#line 634
  [[((id<JavaUtilMap>) nil_chk(map_)) getClass] getName])];
}


#line 638
- (id)getWithInt:(jint)index {
  
#line 639
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}


#line 643
- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(map_)) size];
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_MappingList *)other {
  [super copyAllFieldsTo:other];
  other->fieldCache_ = fieldCache_;
  other->keyFieldName_ = keyFieldName_;
  other->map_ = map_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter:withJavaUtilMap:withNSString:", "MappingList", NULL, 0x1, NULL },
    { "addWithId:", "add", "Z", 0x1, NULL },
    { "getWithInt:", "get", "Ljava.lang.Object;", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter;", NULL,  },
    { "map_", NULL, 0x12, "Ljava.util.Map;", NULL,  },
    { "keyFieldName_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "fieldCache_", NULL, 0x12, "Ljava.util.Map;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_MappingList = { "MappingList", "com.thoughtworks.xstream.converters.reflection", "AbstractReflectionConverter", 0x2, 4, methods, 4, fields, 0, NULL};
  return &_ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_MappingList;
}

@end

@implementation ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_$1


#line 97
- (void)visitWithNSString:(NSString *)fieldName
             withIOSClass:(IOSClass *)type
             withIOSClass:(IOSClass *)definedIn
                   withId:(id)value {
  
#line 98
  if (![((id<ComThoughtworksXstreamMapperMapper>) nil_chk(this$0_->mapper_)) shouldSerializeMemberWithIOSClass:definedIn withNSString:fieldName]) {
    return;
  }
  if (![((id<JavaUtilMap>) nil_chk(val$defaultFieldDefinition_)) containsKeyWithId:fieldName]) {
    IOSClass *lookupType = [nil_chk(val$source_) getClass];
    
#line 104
    if (definedIn != [val$source_ getClass] &&
#line 105
    ![this$0_->mapper_ shouldSerializeMemberWithIOSClass:lookupType withNSString:fieldName]) {
      lookupType = definedIn;
    }
    (void) [val$defaultFieldDefinition_ putWithId:fieldName withId:[((id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(this$0_->reflectionProvider_)) getFieldWithIOSClass:lookupType withNSString:fieldName]];
  }
  
#line 111
  id<ComThoughtworksXstreamConvertersSingleValueConverter> converter = [this$0_->mapper_ getConverterFromItemTypeWithNSString:
#line 112
  fieldName withIOSClass:type withIOSClass:definedIn];
  if (converter != nil) {
    NSString *attribute = [this$0_->mapper_ aliasForAttributeWithNSString:[this$0_->mapper_ serializedMemberWithIOSClass:definedIn withNSString:
#line 115
    fieldName]];
    if (value != nil) {
      if ([((id<JavaUtilSet>) nil_chk(writtenAttributes_)) containsWithId:fieldName]) {
        @throw [[ComThoughtworksXstreamConvertersConversionException alloc] initWithNSString:JreStrcat("$$$$", @"Cannot write field with name '", fieldName, @"' twice as attribute for object of type ",
#line 119
        [[nil_chk(val$source_) getClass] getName])];
      }
      NSString *str = [converter toStringWithId:value];
      if (str != nil) {
        [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(val$writer_)) addAttributeWithNSString:attribute withNSString:str];
      }
    }
    [((id<JavaUtilSet>) nil_chk(writtenAttributes_)) addWithId:fieldName];
  }
  else {
    
#line 128
    [((id<JavaUtilList>) nil_chk(val$fields_)) addWithId:[[ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_FieldInfo alloc] initWithNSString:fieldName withIOSClass:type withIOSClass:definedIn withId:value]];
  }
}

- (instancetype)initWithComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter:(ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter *)outer$
                                                                              withJavaUtilMap:(id<JavaUtilMap>)capture$0
                                                                                       withId:(id)capture$1
                                         withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)capture$2
                                                                             withJavaUtilList:(id<JavaUtilList>)capture$3 {
  this$0_ = outer$;
  val$defaultFieldDefinition_ = capture$0;
  val$source_ = capture$1;
  val$writer_ = capture$2;
  val$fields_ = capture$3;
  if (self = [super init]) {
    writtenAttributes_ =
#line 94
    [[JavaUtilHashSet alloc] init];
  }
  return self;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_$1 *)other {
  [super copyAllFieldsTo:other];
  other->writtenAttributes_ = writtenAttributes_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "visitWithNSString:withIOSClass:withIOSClass:withId:", "visit", "V", 0x1, NULL },
    { "initWithComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter:withJavaUtilMap:withId:withComThoughtworksXstreamIoHierarchicalStreamWriter:withJavaUtilList:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter;", NULL,  },
    { "writtenAttributes_", NULL, 0x10, "Ljava.util.Set;", NULL,  },
    { "val$defaultFieldDefinition_", NULL, 0x1012, "Ljava.util.Map;", NULL,  },
    { "val$source_", NULL, 0x1012, "Ljava.lang.Object;", NULL,  },
    { "val$writer_", NULL, 0x1012, "Lcom.thoughtworks.xstream.io.HierarchicalStreamWriter;", NULL,  },
    { "val$fields_", NULL, 0x1012, "Ljava.util.List;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_$1 = { "$1", "com.thoughtworks.xstream.converters.reflection", "AbstractReflectionConverter", 0x8000, 2, methods, 6, fields, 0, NULL};
  return &_ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_$1;
}

@end

@implementation ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_$2


#line 196
- (void)writeFieldWithNSString:(NSString *)fieldName
                  withNSString:(NSString *)aliasName
                  withIOSClass:(IOSClass *)fieldType
                  withIOSClass:(IOSClass *)definedIn
                        withId:(id)newObj {
  
#line 198
  IOSClass *actualType = newObj != nil ? [newObj getClass] : fieldType;
  [ComThoughtworksXstreamIoExtendedHierarchicalStreamWriterHelper startNodeWithComThoughtworksXstreamIoHierarchicalStreamWriter:val$writer_ withNSString:aliasName != nil ? aliasName :
#line 200
  [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(this$0_->mapper_)) serializedMemberWithIOSClass:[nil_chk(val$source_) getClass] withNSString:fieldName] withIOSClass:actualType];
  
#line 202
  if (newObj != nil) {
    IOSClass *defaultType = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(this$0_->mapper_)) defaultImplementationOfWithIOSClass:fieldType];
    if (![actualType isEqual:defaultType]) {
      NSString *serializedClassName = [this$0_->mapper_ serializedClassWithIOSClass:actualType];
      if (![((NSString *) nil_chk(serializedClassName)) isEqual:[this$0_->mapper_ serializedClassWithIOSClass:defaultType]]) {
        NSString *attributeName = [this$0_->mapper_ aliasForSystemAttributeWithNSString:@"class"];
        if (attributeName != nil) {
          [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(val$writer_)) addAttributeWithNSString:attributeName withNSString:serializedClassName];
        }
      }
    }
    
#line 214
    JavaLangReflectField *defaultField = (JavaLangReflectField *) check_class_cast([((id<JavaUtilMap>) nil_chk(val$defaultFieldDefinition_)) getWithId:fieldName], [JavaLangReflectField class]);
    if ([((JavaLangReflectField *) nil_chk(defaultField)) getDeclaringClass] != definedIn) {
      NSString *attributeName = [this$0_->mapper_ aliasForSystemAttributeWithNSString:@"defined-in"];
      if (attributeName != nil) {
        [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(val$writer_)) addAttributeWithNSString:attributeName withNSString:[this$0_->mapper_ serializedClassWithIOSClass:definedIn]];
      }
    }
    
#line 222
    JavaLangReflectField *field = [((id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(this$0_->reflectionProvider_)) getFieldWithIOSClass:definedIn withNSString:fieldName];
    [this$0_ marshallFieldWithComThoughtworksXstreamConvertersMarshallingContext:val$context_ withId:newObj withJavaLangReflectField:field];
  }
  [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(val$writer_)) endNode];
}


#line 228
- (void)writeItemWithId:(id)item
withComThoughtworksXstreamConvertersMarshallingContext:(id<ComThoughtworksXstreamConvertersMarshallingContext>)context
withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer {
  
#line 229
  if (item == nil) {
    NSString *name = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(this$0_->mapper_)) serializedClassWithIOSClass:nil];
    [ComThoughtworksXstreamIoExtendedHierarchicalStreamWriterHelper startNodeWithComThoughtworksXstreamIoHierarchicalStreamWriter:writer withNSString:name withIOSClass:[IOSClass classWithClass:[ComThoughtworksXstreamMapperMapper_Null class]]];
    [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) endNode];
  }
  else {
    
#line 234
    NSString *name = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(this$0_->mapper_)) serializedClassWithIOSClass:[item getClass]];
    [ComThoughtworksXstreamIoExtendedHierarchicalStreamWriterHelper startNodeWithComThoughtworksXstreamIoHierarchicalStreamWriter:writer withNSString:name withIOSClass:[item getClass]];
    [((id<ComThoughtworksXstreamConvertersMarshallingContext>) nil_chk(context)) convertAnotherWithId:item];
    [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) endNode];
  }
}

- (instancetype)initWithComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter:(ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter *)outer$
                                                                             withJavaUtilList:(id<JavaUtilList>)capture$0
                                                                                       withId:(id)capture$1
                                       withComThoughtworksXstreamConvertersMarshallingContext:(id<ComThoughtworksXstreamConvertersMarshallingContext>)capture$2
                                         withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)capture$3
                                                                              withJavaUtilMap:(id<JavaUtilMap>)capture$4 {
  this$0_ = outer$;
  val$fields_ = capture$0;
  val$source_ = capture$1;
  val$context_ = capture$2;
  val$writer_ = capture$3;
  val$defaultFieldDefinition_ = capture$4;
  if (self = [super init]) {
    {
      
#line 135
      for (id<JavaUtilIterator> fieldIter = [((id<JavaUtilList>) nil_chk(val$fields_)) iterator]; [((id<JavaUtilIterator>) nil_chk(fieldIter)) hasNext]; ) {
        ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_FieldInfo *info = (ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_FieldInfo *) check_class_cast([fieldIter next], [ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_FieldInfo class]);
        if (((ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_FieldInfo *) nil_chk(info))->value_ != nil) {
          id<ComThoughtworksXstreamMapperMapper_ImplicitCollectionMapping> mapping = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(outer$->mapper_)) getImplicitCollectionDefForFieldNameWithIOSClass:
#line 139
          [nil_chk(val$source_) getClass] withNSString:info->fieldName_];
          if (mapping != nil) {
            if ([(id) val$context_ conformsToProtocol: @protocol(ComThoughtworksXstreamCoreReferencingMarshallingContext)]) {
              if (info->value_ != JavaUtilCollections_get_EMPTY_LIST_() && info->value_ != JavaUtilCollections_get_EMPTY_SET_() &&
#line 143
              info->value_ != JavaUtilCollections_get_EMPTY_MAP_()) {
                id<ComThoughtworksXstreamCoreReferencingMarshallingContext> refContext = (id<ComThoughtworksXstreamCoreReferencingMarshallingContext>) check_protocol_cast(val$context_, @protocol(ComThoughtworksXstreamCoreReferencingMarshallingContext));
                [((id<ComThoughtworksXstreamCoreReferencingMarshallingContext>) nil_chk(refContext)) registerImplicitWithId:info->value_];
              }
            }
            jboolean isCollection = [info->value_ conformsToProtocol: @protocol(JavaUtilCollection)];
            jboolean isMap = [info->value_ conformsToProtocol: @protocol(JavaUtilMap)];
            jboolean isEntry = isMap && [mapping getKeyFieldName] == nil;
            jboolean isArray = [[info->value_ getClass] isArray];
            
#line 153
            id<JavaUtilIterator> iter = nil;
            if (isArray) {
              iter = [[ComThoughtworksXstreamCoreUtilArrayIterator alloc] initWithId:info->value_];
            }
            else
#line 156
            if (isCollection) {
              iter = [((id<JavaUtilCollection>) check_protocol_cast(info->value_, @protocol(JavaUtilCollection))) iterator];
            }
            else
#line 158
            if (isEntry) {
              iter = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) check_protocol_cast(info->value_, @protocol(JavaUtilMap))) entrySet])) iterator];
            }
            else {
              
#line 161
              iter = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) check_protocol_cast(info->value_, @protocol(JavaUtilMap))) values])) iterator];
            }
            for (id obj = [((id<JavaUtilIterator>) nil_chk(iter)) next]; [iter hasNext]; ) {
              NSString *itemName;
              IOSClass *itemType;
              if (obj == nil) {
                itemType = [IOSClass classWithClass:[NSObject class]];
                itemName = [outer$->mapper_ serializedClassWithIOSClass:nil];
              }
              else
#line 169
              if (isEntry) {
                NSString *entryName = [mapping getItemFieldName] != nil ? [mapping getItemFieldName] :
#line 171
                [outer$->mapper_ serializedClassWithIOSClass:[IOSClass classWithProtocol:@protocol(JavaUtilMap_Entry)]];
                id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) check_protocol_cast(obj, @protocol(JavaUtilMap_Entry));
                [ComThoughtworksXstreamIoExtendedHierarchicalStreamWriterHelper startNodeWithComThoughtworksXstreamIoHierarchicalStreamWriter:val$writer_ withNSString:entryName withIOSClass:
#line 174
                [entry_ getClass]];
                [self writeItemWithId:[entry_ getKey] withComThoughtworksXstreamConvertersMarshallingContext:val$context_ withComThoughtworksXstreamIoHierarchicalStreamWriter:val$writer_];
                [self writeItemWithId:[entry_ getValue] withComThoughtworksXstreamConvertersMarshallingContext:val$context_ withComThoughtworksXstreamIoHierarchicalStreamWriter:val$writer_];
                [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(val$writer_)) endNode];
                continue;
              }
              else
#line 179
              if ([mapping getItemFieldName] != nil) {
                itemType = [mapping getItemType];
                itemName = [mapping getItemFieldName];
              }
              else {
                
#line 183
                itemType = [obj getClass];
                itemName = [outer$->mapper_ serializedClassWithIOSClass:itemType];
              }
              [self writeFieldWithNSString:info->fieldName_ withNSString:itemName withIOSClass:itemType withIOSClass:info->definedIn_ withId:obj];
            }
          }
          else {
            
#line 189
            [self writeFieldWithNSString:info->fieldName_ withNSString:nil withIOSClass:info->type_ withIOSClass:info->definedIn_ withId:info->value_];
          }
        }
      }
    }
  }
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "writeFieldWithNSString:withNSString:withIOSClass:withIOSClass:withId:", "writeField", "V", 0x0, NULL },
    { "writeItemWithId:withComThoughtworksXstreamConvertersMarshallingContext:withComThoughtworksXstreamIoHierarchicalStreamWriter:", "writeItem", "V", 0x0, NULL },
    { "initWithComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter:withJavaUtilList:withId:withComThoughtworksXstreamConvertersMarshallingContext:withComThoughtworksXstreamIoHierarchicalStreamWriter:withJavaUtilMap:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter;", NULL,  },
    { "val$fields_", NULL, 0x1012, "Ljava.util.List;", NULL,  },
    { "val$source_", NULL, 0x1012, "Ljava.lang.Object;", NULL,  },
    { "val$context_", NULL, 0x1012, "Lcom.thoughtworks.xstream.converters.MarshallingContext;", NULL,  },
    { "val$writer_", NULL, 0x1012, "Lcom.thoughtworks.xstream.io.HierarchicalStreamWriter;", NULL,  },
    { "val$defaultFieldDefinition_", NULL, 0x1012, "Ljava.util.Map;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_$2 = { "$2", "com.thoughtworks.xstream.converters.reflection", "AbstractReflectionConverter", 0x8000, 3, methods, 6, fields, 0, NULL};
  return &_ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_$2;
}

@end

@implementation ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_$3


#line 260
- (jboolean)addWithId:(id)e {
  
#line 261
  if (![super addWithId:e]) {
    @throw [[ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_DuplicateFieldException alloc] initWithNSString:[((ComThoughtworksXstreamCoreUtilFastField *) nil_chk(((ComThoughtworksXstreamCoreUtilFastField *) check_class_cast(e, [ComThoughtworksXstreamCoreUtilFastField class])))) getName]];
  }
  return YES;
}

- (instancetype)init {
  return [super init];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "addWithId:", "add", "Z", 0x1, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_$3 = { "$3", "com.thoughtworks.xstream.converters.reflection", "AbstractReflectionConverter", 0x8000, 2, methods, 0, NULL, 0, NULL};
  return &_ComThoughtworksXstreamConvertersReflectionAbstractReflectionConverter_$3;
}

@end
