//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/converters/reflection/FieldKey.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/converters/reflection/FieldKey.java"

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/reflection/FieldKey.h"
#include "java/lang/IllegalArgumentException.h"

@interface ComThoughtworksXstreamConvertersReflectionFieldKey () {
 @public
  NSString *fieldName_;
  IOSClass *declaringClass_;
  jint depth_;
  jint order_;
}

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersReflectionFieldKey, fieldName_, NSString *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamConvertersReflectionFieldKey, declaringClass_, IOSClass *)


#line 19
@implementation ComThoughtworksXstreamConvertersReflectionFieldKey


#line 25
- (instancetype)initWithNSString:(NSString *)fieldName
                    withIOSClass:(IOSClass *)declaringClass
                         withInt:(jint)order {
  ComThoughtworksXstreamConvertersReflectionFieldKey_initWithNSString_withIOSClass_withInt_(self, fieldName, declaringClass, order);
  return self;
}


#line 41
- (NSString *)getFieldName {
  return self->fieldName_;
}

- (IOSClass *)getDeclaringClass {
  return self->declaringClass_;
}

- (jint)getDepth {
  return self->depth_;
}

- (jint)getOrder {
  return self->order_;
}

- (jboolean)isEqual:(id)o {
  if (self == o) return YES;
  if (!([o isKindOfClass:[ComThoughtworksXstreamConvertersReflectionFieldKey class]])) return NO;
  
#line 61
  ComThoughtworksXstreamConvertersReflectionFieldKey *fieldKey = (ComThoughtworksXstreamConvertersReflectionFieldKey *) check_class_cast(o, [ComThoughtworksXstreamConvertersReflectionFieldKey class]);
  
#line 63
  if (![((IOSClass *) nil_chk(declaringClass_)) isEqual:((ComThoughtworksXstreamConvertersReflectionFieldKey *) nil_chk(fieldKey))->declaringClass_])
#line 64
  return NO;
  if (![((NSString *) nil_chk(fieldName_)) isEqual:fieldKey->fieldName_])
#line 66
  return NO;
  
#line 68
  return YES;
}


#line 71
- (NSUInteger)hash {
  jint result;
  result = ((jint) [((NSString *) nil_chk(fieldName_)) hash]);
  result = 29 * result + ((jint) [((IOSClass *) nil_chk(declaringClass_)) hash]);
  return result;
}

- (NSString *)description {
  return JreStrcat("$I$I$@$$$", @"FieldKey{order=",
#line 81
  order_, @", writer=",
#line 83
  depth_, @", declaringClass=",
#line 85
  declaringClass_, @", fieldName='",
#line 87
  fieldName_, @"'}");
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withIOSClass:withInt:", "FieldKey", NULL, 0x1, NULL, NULL },
    { "getFieldName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDeclaringClass", NULL, "Ljava.lang.Class;", 0x1, NULL, NULL },
    { "getDepth", NULL, "I", 0x1, NULL, NULL },
    { "getOrder", NULL, "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fieldName_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "declaringClass_", NULL, 0x12, "Ljava.lang.Class;", NULL, NULL,  },
    { "depth_", NULL, 0x12, "I", NULL, NULL,  },
    { "order_", NULL, 0x12, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersReflectionFieldKey = { 2, "FieldKey", "com.thoughtworks.xstream.converters.reflection", NULL, 0x1, 8, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamConvertersReflectionFieldKey;
}

@end


#line 25
void ComThoughtworksXstreamConvertersReflectionFieldKey_initWithNSString_withIOSClass_withInt_(ComThoughtworksXstreamConvertersReflectionFieldKey *self, NSString *fieldName, IOSClass *declaringClass, jint order) {
  (void) NSObject_init(self);
  
#line 26
  if (fieldName == nil || declaringClass == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"fieldName or declaringClass is null");
  }
  self->fieldName_ = fieldName;
  self->declaringClass_ = declaringClass;
  self->order_ = order;
  IOSClass *c = declaringClass;
  jint i = 0;
  while ([((IOSClass *) nil_chk(c)) getSuperclass] != nil) {
    i++;
    c = [c getSuperclass];
  }
  self->depth_ = i;
}


#line 25
ComThoughtworksXstreamConvertersReflectionFieldKey *new_ComThoughtworksXstreamConvertersReflectionFieldKey_initWithNSString_withIOSClass_withInt_(NSString *fieldName, IOSClass *declaringClass, jint order) {
  ComThoughtworksXstreamConvertersReflectionFieldKey *self = [ComThoughtworksXstreamConvertersReflectionFieldKey alloc];
  ComThoughtworksXstreamConvertersReflectionFieldKey_initWithNSString_withIOSClass_withInt_(self, fieldName, declaringClass, order);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamConvertersReflectionFieldKey)
