//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/reflection/FieldKey.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/reflection/FieldKey.java"

#include "IOSClass.h"
#include "com/thoughtworks/xstream/converters/reflection/FieldKey.h"
#include "java/lang/IllegalArgumentException.h"


#line 19
@implementation ComThoughtworksXstreamConvertersReflectionFieldKey


#line 25
- (instancetype)initWithNSString:(NSString *)fieldName
                    withIOSClass:(IOSClass *)declaringClass
                         withInt:(jint)order {
  if (self = [super init]) {
    
#line 26
    if (fieldName == nil || declaringClass == nil) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"fieldName or declaringClass is null"];
    }
    
#line 29
    self->fieldName_ = fieldName;
    
#line 30
    self->declaringClass_ = declaringClass;
    
#line 31
    self->order_ = order;
    
#line 32
    IOSClass *c = declaringClass;
    
#line 33
    jint i = 0;
    
#line 34
    while ([((IOSClass *) nil_chk(c)) getSuperclass] != nil) {
      i++;
      c = [c getSuperclass];
    }
    
#line 38
    depth_ = i;
  }
  return self;
}


#line 41
- (NSString *)getFieldName {
  
#line 42
  return self->fieldName_;
}


#line 45
- (IOSClass *)getDeclaringClass {
  
#line 46
  return self->declaringClass_;
}


#line 49
- (jint)getDepth {
  
#line 50
  return self->depth_;
}


#line 53
- (jint)getOrder {
  
#line 54
  return self->order_;
}

- (jboolean)isEqual:(id)o {
  
#line 58
  if (self == o) return YES;
  if (!([o isKindOfClass:[ComThoughtworksXstreamConvertersReflectionFieldKey class]])) return NO;
  
#line 61
  ComThoughtworksXstreamConvertersReflectionFieldKey *fieldKey = (ComThoughtworksXstreamConvertersReflectionFieldKey *) check_class_cast(o, [ComThoughtworksXstreamConvertersReflectionFieldKey class]);
  
#line 63
  if (![((IOSClass *) nil_chk(declaringClass_)) isEqual:((ComThoughtworksXstreamConvertersReflectionFieldKey *) nil_chk(fieldKey))->declaringClass_])
#line 64
  return NO;
  if (![((NSString *) nil_chk(fieldName_)) isEqual:fieldKey->fieldName_])
#line 66
  return NO;
  
#line 68
  return YES;
}

- (NSUInteger)hash {
  
#line 72
  jint result;
  result = ((jint) [((NSString *) nil_chk(fieldName_)) hash]);
  result = 29 * result + ((jint) [((IOSClass *) nil_chk(declaringClass_)) hash]);
  return result;
}

- (NSString *)description {
  
#line 79
  return JreStrcat("$I$I$@$$$", @"FieldKey{order=",
#line 81
  order_, @", writer=",
#line 83
  depth_, @", declaringClass=",
#line 85
  declaringClass_, @", fieldName='",
#line 87
  fieldName_, @"'}");
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamConvertersReflectionFieldKey *)other {
  [super copyAllFieldsTo:other];
  other->declaringClass_ = declaringClass_;
  other->depth_ = depth_;
  other->fieldName_ = fieldName_;
  other->order_ = order_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withIOSClass:withInt:", "FieldKey", NULL, 0x1, NULL },
    { "getFieldName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getDeclaringClass", NULL, "Ljava.lang.Class;", 0x1, NULL },
    { "getDepth", NULL, "I", 0x1, NULL },
    { "getOrder", NULL, "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fieldName_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "declaringClass_", NULL, 0x12, "Ljava.lang.Class;", NULL,  },
    { "depth_", NULL, 0x12, "I", NULL,  },
    { "order_", NULL, 0x12, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersReflectionFieldKey = { "FieldKey", "com.thoughtworks.xstream.converters.reflection", NULL, 0x1, 8, methods, 4, fields, 0, NULL};
  return &_ComThoughtworksXstreamConvertersReflectionFieldKey;
}

@end
