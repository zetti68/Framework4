//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/reflection/ExternalizableConverter.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/reflection/ExternalizableConverter.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/converters/MarshallingContext.h"
#include "com/thoughtworks/xstream/converters/UnmarshallingContext.h"
#include "com/thoughtworks/xstream/converters/reflection/ExternalizableConverter.h"
#include "com/thoughtworks/xstream/core/ClassLoaderReference.h"
#include "com/thoughtworks/xstream/core/JVM.h"
#include "com/thoughtworks/xstream/core/util/CustomObjectInputStream.h"
#include "com/thoughtworks/xstream/core/util/CustomObjectOutputStream.h"
#include "com/thoughtworks/xstream/core/util/HierarchicalStreams.h"
#include "com/thoughtworks/xstream/io/ExtendedHierarchicalStreamWriterHelper.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamWriter.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/io/Externalizable.h"
#include "java/io/IOException.h"
#include "java/io/NotActiveException.h"
#include "java/io/ObjectInputValidation.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/util/Map.h"


#line 42
@implementation ComThoughtworksXstreamConvertersReflectionExternalizableConverter


#line 53
- (instancetype)initComThoughtworksXstreamConvertersReflectionExternalizableConverterWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper
                                                                         withComThoughtworksXstreamCoreClassLoaderReference:(ComThoughtworksXstreamCoreClassLoaderReference *)classLoaderReference {
  if (self = [super init]) {
    
#line 54
    self->mapper_ = mapper;
    
#line 55
    self->classLoaderReference_ = classLoaderReference;
  }
  return self;
}

- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper
        withComThoughtworksXstreamCoreClassLoaderReference:(ComThoughtworksXstreamCoreClassLoaderReference *)classLoaderReference {
  return [self initComThoughtworksXstreamConvertersReflectionExternalizableConverterWithComThoughtworksXstreamMapperMapper:
#line 53
mapper withComThoughtworksXstreamCoreClassLoaderReference:classLoaderReference];
}


#line 61
- (instancetype)initComThoughtworksXstreamConvertersReflectionExternalizableConverterWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper
                                                                                                    withJavaLangClassLoader:(JavaLangClassLoader *)classLoader {
  return
#line 62
  [self initComThoughtworksXstreamConvertersReflectionExternalizableConverterWithComThoughtworksXstreamMapperMapper:mapper withComThoughtworksXstreamCoreClassLoaderReference:[[ComThoughtworksXstreamCoreClassLoaderReference alloc] initWithJavaLangClassLoader:classLoader]];
}

- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper
                                   withJavaLangClassLoader:(JavaLangClassLoader *)classLoader {
  return [self initComThoughtworksXstreamConvertersReflectionExternalizableConverterWithComThoughtworksXstreamMapperMapper:
#line 61
mapper withJavaLangClassLoader:classLoader];
}


#line 68
- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper {
  return
#line 69
  [self initComThoughtworksXstreamConvertersReflectionExternalizableConverterWithComThoughtworksXstreamMapperMapper:mapper withJavaLangClassLoader:[[IOSClass classWithClass:[ComThoughtworksXstreamConvertersReflectionExternalizableConverter class]] getClassLoader]];
}


#line 72
- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  
#line 73
  return [ComThoughtworksXstreamCoreJVM canCreateDerivedObjectOutputStream] && [[IOSClass classWithProtocol:@protocol(JavaIoExternalizable)] isAssignableFrom:type];
}


#line 76
- (void)marshalWithId:(id)source
withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer
withComThoughtworksXstreamConvertersMarshallingContext:(id<ComThoughtworksXstreamConvertersMarshallingContext>)context {
  
#line 77
  @try {
    id<JavaIoExternalizable> externalizable = (id<JavaIoExternalizable>) check_protocol_cast(source, @protocol(JavaIoExternalizable));
    id<ComThoughtworksXstreamCoreUtilCustomObjectOutputStream_StreamCallback> callback = [[ComThoughtworksXstreamConvertersReflectionExternalizableConverter_$1 alloc] initWithComThoughtworksXstreamConvertersReflectionExternalizableConverter:self withComThoughtworksXstreamIoHierarchicalStreamWriter:writer withComThoughtworksXstreamConvertersMarshallingContext:context];
    
#line 107
    ComThoughtworksXstreamCoreUtilCustomObjectOutputStream *objectOutput = [ComThoughtworksXstreamCoreUtilCustomObjectOutputStream getInstanceWithComThoughtworksXstreamConvertersDataHolder:context withComThoughtworksXstreamCoreUtilCustomObjectOutputStream_StreamCallback:callback];
    [((id<JavaIoExternalizable>) nil_chk(externalizable)) writeExternalWithJavaIoObjectOutput:objectOutput];
    (void) [((ComThoughtworksXstreamCoreUtilCustomObjectOutputStream *) nil_chk(objectOutput)) popCallback];
  }
  @catch (
#line 110
  JavaIoIOException *e) {
    @throw [[ComThoughtworksXstreamConvertersConversionException alloc] initWithNSString:JreStrcat("$$$", @"Cannot serialize ", [[nil_chk(source) getClass] getName], @" using Externalization") withJavaLangThrowable:e];
  }
}


#line 115
- (id)unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
           withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context {
  
#line 116
  IOSClass *type = [((id<ComThoughtworksXstreamConvertersUnmarshallingContext>) nil_chk(context)) getRequiredType];
  JavaLangReflectConstructor *defaultConstructor;
  @try {
    defaultConstructor = [((IOSClass *) nil_chk(type)) getDeclaredConstructor:(IOSObjectArray *) check_class_cast(nil, [IOSObjectArray class])];
    if (![((JavaLangReflectConstructor *) nil_chk(defaultConstructor)) isAccessible]) {
      [defaultConstructor setAccessibleWithBoolean:YES];
    }
    id<JavaIoExternalizable> externalizable = (id<JavaIoExternalizable>) check_protocol_cast([defaultConstructor newInstanceWithNSObjectArray:(IOSObjectArray *) check_class_cast(nil, [IOSObjectArray class])], @protocol(JavaIoExternalizable));
    id<ComThoughtworksXstreamCoreUtilCustomObjectInputStream_StreamCallback> callback = [[ComThoughtworksXstreamConvertersReflectionExternalizableConverter_$2 alloc] initWithComThoughtworksXstreamConvertersReflectionExternalizableConverter:self withComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamConvertersUnmarshallingContext:context withJavaIoExternalizable:externalizable];
    
#line 149
    ComThoughtworksXstreamCoreUtilCustomObjectInputStream *objectInput = [ComThoughtworksXstreamCoreUtilCustomObjectInputStream getInstanceWithComThoughtworksXstreamConvertersDataHolder:context withComThoughtworksXstreamCoreUtilCustomObjectInputStream_StreamCallback:callback withComThoughtworksXstreamCoreClassLoaderReference:classLoaderReference_];
    [((id<JavaIoExternalizable>) nil_chk(externalizable)) readExternalWithJavaIoObjectInput:objectInput];
    (void) [((ComThoughtworksXstreamCoreUtilCustomObjectInputStream *) nil_chk(objectInput)) popCallback];
    return externalizable;
  }
  @catch (
#line 153
  JavaLangNoSuchMethodException *e) {
    @throw [[ComThoughtworksXstreamConvertersConversionException alloc] initWithNSString:JreStrcat("$@$", @"Cannot construct ", [((IOSClass *) nil_chk(type)) getClass], @", missing default constructor") withJavaLangThrowable:e];
  }
  @catch (
#line 155
  JavaLangReflectInvocationTargetException *e) {
    @throw [[ComThoughtworksXstreamConvertersConversionException alloc] initWithNSString:JreStrcat("$@", @"Cannot construct ", [((IOSClass *) nil_chk(type)) getClass]) withJavaLangThrowable:e];
  }
  @catch (
#line 157
  JavaLangInstantiationException *e) {
    @throw [[ComThoughtworksXstreamConvertersConversionException alloc] initWithNSString:JreStrcat("$@", @"Cannot construct ", [((IOSClass *) nil_chk(type)) getClass]) withJavaLangThrowable:e];
  }
  @catch (
#line 159
  JavaLangIllegalAccessException *e) {
    @throw [[ComThoughtworksXstreamConvertersConversionException alloc] initWithNSString:JreStrcat("$@", @"Cannot construct ", [((IOSClass *) nil_chk(type)) getClass]) withJavaLangThrowable:e];
  }
  @catch (
#line 161
  JavaIoIOException *e) {
    @throw [[ComThoughtworksXstreamConvertersConversionException alloc] initWithNSString:JreStrcat("$@", @"Cannot externalize ", [((IOSClass *) nil_chk(type)) getClass]) withJavaLangThrowable:e];
  }
  @catch (
#line 163
  JavaLangClassNotFoundException *e) {
    @throw [[ComThoughtworksXstreamConvertersConversionException alloc] initWithNSString:JreStrcat("$@", @"Cannot externalize ", [((IOSClass *) nil_chk(type)) getClass]) withJavaLangThrowable:e];
  }
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamConvertersReflectionExternalizableConverter *)other {
  [super copyAllFieldsTo:other];
  other->classLoaderReference_ = classLoaderReference_;
  other->mapper_ = mapper_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamMapperMapper:withComThoughtworksXstreamCoreClassLoaderReference:", "ExternalizableConverter", NULL, 0x1, NULL },
    { "initWithComThoughtworksXstreamMapperMapper:withJavaLangClassLoader:", "ExternalizableConverter", NULL, 0x1, NULL },
    { "initWithComThoughtworksXstreamMapperMapper:", "ExternalizableConverter", NULL, 0x1, NULL },
    { "canConvertWithIOSClass:", "canConvert", "Z", 0x1, NULL },
    { "marshalWithId:withComThoughtworksXstreamIoHierarchicalStreamWriter:withComThoughtworksXstreamConvertersMarshallingContext:", "marshal", "V", 0x1, NULL },
    { "unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:", "unmarshal", "Ljava.lang.Object;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mapper_", NULL, 0x2, "Lcom.thoughtworks.xstream.mapper.Mapper;", NULL,  },
    { "classLoaderReference_", NULL, 0x12, "Lcom.thoughtworks.xstream.core.ClassLoaderReference;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersReflectionExternalizableConverter = { "ExternalizableConverter", "com.thoughtworks.xstream.converters.reflection", NULL, 0x1, 6, methods, 2, fields, 0, NULL};
  return &_ComThoughtworksXstreamConvertersReflectionExternalizableConverter;
}

@end

@implementation ComThoughtworksXstreamConvertersReflectionExternalizableConverter_$1


#line 80
- (void)writeToStreamWithId:(id)object {
  
#line 81
  if (object == nil) {
    [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(val$writer_)) startNodeWithNSString:@"null"];
    [val$writer_ endNode];
  }
  else {
    
#line 85
    [ComThoughtworksXstreamIoExtendedHierarchicalStreamWriterHelper startNodeWithComThoughtworksXstreamIoHierarchicalStreamWriter:val$writer_ withNSString:[((id<ComThoughtworksXstreamMapperMapper>) nil_chk(this$0_->mapper_)) serializedClassWithIOSClass:[object getClass]] withIOSClass:[object getClass]];
    [((id<ComThoughtworksXstreamConvertersMarshallingContext>) nil_chk(val$context_)) convertAnotherWithId:object];
    [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(val$writer_)) endNode];
  }
}


#line 91
- (void)writeFieldsToStreamWithJavaUtilMap:(id<JavaUtilMap>)fields {
  
#line 92
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}


#line 95
- (void)defaultWriteObject {
  
#line 96
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}


#line 99
- (void)flush {
  
#line 100
  [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(val$writer_)) flush];
}


#line 103
- (void)close {
  
#line 104
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Objects are not allowed to call ObjectOutput.close() from writeExternal()"];
}

- (instancetype)initWithComThoughtworksXstreamConvertersReflectionExternalizableConverter:(ComThoughtworksXstreamConvertersReflectionExternalizableConverter *)outer$
                                     withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)capture$0
                                   withComThoughtworksXstreamConvertersMarshallingContext:(id<ComThoughtworksXstreamConvertersMarshallingContext>)capture$1 {
  this$0_ = outer$;
  val$writer_ = capture$0;
  val$context_ = capture$1;
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "writeToStreamWithId:", "writeToStream", "V", 0x1, NULL },
    { "writeFieldsToStreamWithJavaUtilMap:", "writeFieldsToStream", "V", 0x1, NULL },
    { "defaultWriteObject", NULL, "V", 0x1, NULL },
    { "flush", NULL, "V", 0x1, NULL },
    { "close", NULL, "V", 0x1, NULL },
    { "initWithComThoughtworksXstreamConvertersReflectionExternalizableConverter:withComThoughtworksXstreamIoHierarchicalStreamWriter:withComThoughtworksXstreamConvertersMarshallingContext:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.thoughtworks.xstream.converters.reflection.ExternalizableConverter;", NULL,  },
    { "val$writer_", NULL, 0x1012, "Lcom.thoughtworks.xstream.io.HierarchicalStreamWriter;", NULL,  },
    { "val$context_", NULL, 0x1012, "Lcom.thoughtworks.xstream.converters.MarshallingContext;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersReflectionExternalizableConverter_$1 = { "$1", "com.thoughtworks.xstream.converters.reflection", "ExternalizableConverter", 0x8000, 6, methods, 3, fields, 0, NULL};
  return &_ComThoughtworksXstreamConvertersReflectionExternalizableConverter_$1;
}

@end

@implementation ComThoughtworksXstreamConvertersReflectionExternalizableConverter_$2


#line 125
- (id)readFromStream {
  
#line 126
  [((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(val$reader_)) moveDown];
  IOSClass *type = [ComThoughtworksXstreamCoreUtilHierarchicalStreams readClassTypeWithComThoughtworksXstreamIoHierarchicalStreamReader:val$reader_ withComThoughtworksXstreamMapperMapper:this$0_->mapper_];
  id streamItem = [((id<ComThoughtworksXstreamConvertersUnmarshallingContext>) nil_chk(val$context_)) convertAnotherWithId:val$externalizable_ withIOSClass:type];
  [val$reader_ moveUp];
  return streamItem;
}


#line 133
- (id<JavaUtilMap>)readFieldsFromStream {
  
#line 134
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}


#line 137
- (void)defaultReadObject {
  
#line 138
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}


#line 141
- (void)registerValidationWithJavaIoObjectInputValidation:(id<JavaIoObjectInputValidation>)validation
                                                  withInt:(jint)priority {
  
#line 142
  @throw [[JavaIoNotActiveException alloc] initWithNSString:@"stream inactive"];
}


#line 145
- (void)close {
  
#line 146
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Objects are not allowed to call ObjectInput.close() from readExternal()"];
}

- (instancetype)initWithComThoughtworksXstreamConvertersReflectionExternalizableConverter:(ComThoughtworksXstreamConvertersReflectionExternalizableConverter *)outer$
                                     withComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)capture$0
                                 withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)capture$1
                                                                 withJavaIoExternalizable:(id<JavaIoExternalizable>)capture$2 {
  this$0_ = outer$;
  val$reader_ = capture$0;
  val$context_ = capture$1;
  val$externalizable_ = capture$2;
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "readFromStream", NULL, "Ljava.lang.Object;", 0x1, NULL },
    { "readFieldsFromStream", NULL, "Ljava.util.Map;", 0x1, NULL },
    { "defaultReadObject", NULL, "V", 0x1, NULL },
    { "registerValidationWithJavaIoObjectInputValidation:withInt:", "registerValidation", "V", 0x1, "Ljava.io.NotActiveException;" },
    { "close", NULL, "V", 0x1, NULL },
    { "initWithComThoughtworksXstreamConvertersReflectionExternalizableConverter:withComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:withJavaIoExternalizable:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.thoughtworks.xstream.converters.reflection.ExternalizableConverter;", NULL,  },
    { "val$reader_", NULL, 0x1012, "Lcom.thoughtworks.xstream.io.HierarchicalStreamReader;", NULL,  },
    { "val$context_", NULL, 0x1012, "Lcom.thoughtworks.xstream.converters.UnmarshallingContext;", NULL,  },
    { "val$externalizable_", NULL, 0x1012, "Ljava.io.Externalizable;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersReflectionExternalizableConverter_$2 = { "$2", "com.thoughtworks.xstream.converters.reflection", "ExternalizableConverter", 0x8000, 6, methods, 4, fields, 0, NULL};
  return &_ComThoughtworksXstreamConvertersReflectionExternalizableConverter_$2;
}

@end
