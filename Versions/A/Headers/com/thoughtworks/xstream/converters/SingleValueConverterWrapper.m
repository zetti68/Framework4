//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/SingleValueConverterWrapper.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/converters/SingleValueConverterWrapper.java"

#include "IOSClass.h"
#include "com/thoughtworks/xstream/converters/ErrorReporter.h"
#include "com/thoughtworks/xstream/converters/ErrorWriter.h"
#include "com/thoughtworks/xstream/converters/MarshallingContext.h"
#include "com/thoughtworks/xstream/converters/SingleValueConverter.h"
#include "com/thoughtworks/xstream/converters/SingleValueConverterWrapper.h"
#include "com/thoughtworks/xstream/converters/UnmarshallingContext.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamWriter.h"


#line 24
@implementation ComThoughtworksXstreamConvertersSingleValueConverterWrapper


#line 28
- (instancetype)initWithComThoughtworksXstreamConvertersSingleValueConverter:(id<ComThoughtworksXstreamConvertersSingleValueConverter>)wrapped {
  if (self = [super init]) {
    
#line 29
    self->wrapped_ = wrapped;
  }
  return self;
}


#line 32
- (jboolean)canConvertWithIOSClass:(IOSClass *)type {
  
#line 33
  return [((id<ComThoughtworksXstreamConvertersSingleValueConverter>) nil_chk(wrapped_)) canConvertWithIOSClass:type];
}


#line 36
- (NSString *)toStringWithId:(id)obj {
  
#line 37
  return [((id<ComThoughtworksXstreamConvertersSingleValueConverter>) nil_chk(wrapped_)) toStringWithId:obj];
}


#line 40
- (id)fromStringWithNSString:(NSString *)str {
  
#line 41
  return [((id<ComThoughtworksXstreamConvertersSingleValueConverter>) nil_chk(wrapped_)) fromStringWithNSString:str];
}


#line 44
- (void)marshalWithId:(id)source
withComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer
withComThoughtworksXstreamConvertersMarshallingContext:(id<ComThoughtworksXstreamConvertersMarshallingContext>)context {
  
#line 45
  [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer)) setValueWithNSString:[self toStringWithId:source]];
}


#line 48
- (id)unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
           withComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context {
  
#line 49
  return [self fromStringWithNSString:[((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader)) getValue]];
}


#line 52
- (void)appendErrorsWithComThoughtworksXstreamConvertersErrorWriter:(id<ComThoughtworksXstreamConvertersErrorWriter>)errorWriter {
  
#line 53
  [((id<ComThoughtworksXstreamConvertersErrorWriter>) nil_chk(errorWriter)) addWithNSString:@"wrapped-converter" withNSString:wrapped_ == nil ? @"(null)" : [[wrapped_ getClass] getName]];
  if ([(id) wrapped_ conformsToProtocol: @protocol(ComThoughtworksXstreamConvertersErrorReporter)]) {
    [((id<ComThoughtworksXstreamConvertersErrorReporter>) nil_chk(((id<ComThoughtworksXstreamConvertersErrorReporter>) check_protocol_cast(wrapped_, @protocol(ComThoughtworksXstreamConvertersErrorReporter))))) appendErrorsWithComThoughtworksXstreamConvertersErrorWriter:errorWriter];
  }
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamConvertersSingleValueConverterWrapper *)other {
  [super copyAllFieldsTo:other];
  other->wrapped_ = wrapped_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamConvertersSingleValueConverter:", "SingleValueConverterWrapper", NULL, 0x1, NULL },
    { "canConvertWithIOSClass:", "canConvert", "Z", 0x1, NULL },
    { "toStringWithId:", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "fromStringWithNSString:", "fromString", "Ljava.lang.Object;", 0x1, NULL },
    { "marshalWithId:withComThoughtworksXstreamIoHierarchicalStreamWriter:withComThoughtworksXstreamConvertersMarshallingContext:", "marshal", "V", 0x1, NULL },
    { "unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersUnmarshallingContext:", "unmarshal", "Ljava.lang.Object;", 0x1, NULL },
    { "appendErrorsWithComThoughtworksXstreamConvertersErrorWriter:", "appendErrors", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "wrapped_", NULL, 0x12, "Lcom.thoughtworks.xstream.converters.SingleValueConverter;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamConvertersSingleValueConverterWrapper = { "SingleValueConverterWrapper", "com.thoughtworks.xstream.converters", NULL, 0x1, 7, methods, 1, fields, 0, NULL};
  return &_ComThoughtworksXstreamConvertersSingleValueConverterWrapper;
}

@end
