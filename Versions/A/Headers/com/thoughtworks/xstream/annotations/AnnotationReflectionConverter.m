//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/annotations/AnnotationReflectionConverter.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/annotations/AnnotationReflectionConverter.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/thoughtworks/xstream/annotations/AnnotationProvider.h"
#include "com/thoughtworks/xstream/annotations/AnnotationReflectionConverter.h"
#include "com/thoughtworks/xstream/annotations/XStreamConverter.h"
#include "com/thoughtworks/xstream/converters/Converter.h"
#include "com/thoughtworks/xstream/converters/ConverterMatcher.h"
#include "com/thoughtworks/xstream/converters/MarshallingContext.h"
#include "com/thoughtworks/xstream/converters/SingleValueConverter.h"
#include "com/thoughtworks/xstream/converters/SingleValueConverterWrapper.h"
#include "com/thoughtworks/xstream/converters/UnmarshallingContext.h"
#include "com/thoughtworks/xstream/converters/reflection/ObjectAccessException.h"
#include "com/thoughtworks/xstream/converters/reflection/ReflectionProvider.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"


#line 39
@implementation ComThoughtworksXstreamAnnotationsAnnotationReflectionConverter


#line 46
- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper
withComThoughtworksXstreamConvertersReflectionReflectionProvider:(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)reflectionProvider
   withComThoughtworksXstreamAnnotationsAnnotationProvider:(ComThoughtworksXstreamAnnotationsAnnotationProvider *)annotationProvider {
  if (self =
#line 49
  [super initWithComThoughtworksXstreamMapperMapper:mapper withComThoughtworksXstreamConvertersReflectionReflectionProvider:reflectionProvider]) {
    
#line 50
    self->annotationProvider_ = annotationProvider;
    
#line 51
    self->cachedConverters_ = [[JavaUtilHashMap alloc] init];
  }
  return self;
}


#line 54
- (void)marshallFieldWithComThoughtworksXstreamConvertersMarshallingContext:(id<ComThoughtworksXstreamConvertersMarshallingContext>)context
                                                                     withId:(id)newObj
                                                   withJavaLangReflectField:(JavaLangReflectField *)field {
  
#line 55
  id<ComThoughtworksXstreamAnnotationsXStreamConverter> annotation = [((ComThoughtworksXstreamAnnotationsAnnotationProvider *) nil_chk(annotationProvider_)) getAnnotationWithJavaLangReflectField:
#line 56
  field withIOSClass:[IOSClass classWithProtocol:@protocol(ComThoughtworksXstreamAnnotationsXStreamConverter)]];
  if (annotation != nil) {
    IOSClass *type = [annotation value];
    [self ensureCacheWithIOSClass:type];
    [((id<ComThoughtworksXstreamConvertersMarshallingContext>) nil_chk(context)) convertAnotherWithId:newObj withComThoughtworksXstreamConvertersConverter:[((id<JavaUtilMap>) nil_chk(cachedConverters_)) getWithId:type]];
  }
  else {
    
#line 62
    [((id<ComThoughtworksXstreamConvertersMarshallingContext>) nil_chk(context)) convertAnotherWithId:newObj];
  }
}


#line 66
- (void)ensureCacheWithIOSClass:(IOSClass *)type {
  
#line 67
  if (![((id<JavaUtilMap>) nil_chk(self->cachedConverters_)) containsKeyWithId:type]) {
    (void) [cachedConverters_ putWithId:type withId:[self newInstanceWithIOSClass:type]];
  }
}


#line 72
- (id)unmarshallFieldWithComThoughtworksXstreamConvertersUnmarshallingContext:(id<ComThoughtworksXstreamConvertersUnmarshallingContext>)context
                                                                       withId:(id)result
                                                                 withIOSClass:(IOSClass *)type
                                                     withJavaLangReflectField:(JavaLangReflectField *)field {
  
#line 75
  id<ComThoughtworksXstreamAnnotationsXStreamConverter> annotation = [((ComThoughtworksXstreamAnnotationsAnnotationProvider *) nil_chk(annotationProvider_)) getAnnotationWithJavaLangReflectField:
#line 76
  field withIOSClass:[IOSClass classWithProtocol:@protocol(ComThoughtworksXstreamAnnotationsXStreamConverter)]];
  if (annotation != nil) {
    IOSClass *converterType = (IOSClass *) check_class_cast([annotation value], [IOSClass class]);
    [self ensureCacheWithIOSClass:converterType];
    return [((id<ComThoughtworksXstreamConvertersUnmarshallingContext>) nil_chk(context)) convertAnotherWithId:result withIOSClass:type withComThoughtworksXstreamConvertersConverter:[((id<JavaUtilMap>) nil_chk(cachedConverters_)) getWithId:converterType]];
  }
  else {
    
#line 82
    return [((id<ComThoughtworksXstreamConvertersUnmarshallingContext>) nil_chk(context)) convertAnotherWithId:result withIOSClass:type];
  }
}


#line 92
- (id<ComThoughtworksXstreamConvertersConverter>)newInstanceWithIOSClass:(IOSClass *)type {
  id<ComThoughtworksXstreamConvertersConverter> converter;
  
#line 95
  @try {
    if ([[IOSClass classWithProtocol:@protocol(ComThoughtworksXstreamConvertersSingleValueConverter)] isAssignableFrom:type]) {
      id<ComThoughtworksXstreamConvertersSingleValueConverter> svc = (id<ComThoughtworksXstreamConvertersSingleValueConverter>) check_protocol_cast([((JavaLangReflectConstructor *) nil_chk([((IOSClass *) nil_chk(type)) getConstructor:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[IOSClass class]]]])) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]], @protocol(ComThoughtworksXstreamConvertersSingleValueConverter));
      converter = [[ComThoughtworksXstreamConvertersSingleValueConverterWrapper alloc] initWithComThoughtworksXstreamConvertersSingleValueConverter:svc];
    }
    else {
      
#line 100
      converter = (id<ComThoughtworksXstreamConvertersConverter>) check_protocol_cast([((JavaLangReflectConstructor *) nil_chk([((IOSClass *) nil_chk(type)) getConstructor:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[IOSClass class]]]])) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]], @protocol(ComThoughtworksXstreamConvertersConverter));
    }
  }
  @catch (
#line 102
  JavaLangReflectInvocationTargetException *e) {
    @throw [[ComThoughtworksXstreamConvertersReflectionObjectAccessException alloc] initWithNSString:JreStrcat("$$", @"Cannot construct ", [((IOSClass *) nil_chk(type)) getName]) withJavaLangThrowable:[((JavaLangReflectInvocationTargetException *) nil_chk(e)) getCause]];
  }
  @catch (JavaLangInstantiationException *e) {
    @throw [[ComThoughtworksXstreamConvertersReflectionObjectAccessException alloc] initWithNSString:JreStrcat("$$", @"Cannot construct ", [((IOSClass *) nil_chk(type)) getName]) withJavaLangThrowable:e];
  }
  @catch (
#line 107
  JavaLangIllegalAccessException *e) {
    @throw [[ComThoughtworksXstreamConvertersReflectionObjectAccessException alloc] initWithNSString:JreStrcat("$$", @"Cannot construct ", [((IOSClass *) nil_chk(type)) getName]) withJavaLangThrowable:e];
  }
  @catch (
#line 109
  JavaLangNoSuchMethodException *e) {
    @throw [[ComThoughtworksXstreamConvertersReflectionObjectAccessException alloc] initWithNSString:JreStrcat("$$", @"Cannot construct ", [((IOSClass *) nil_chk(type)) getName]) withJavaLangThrowable:e];
  }
  return converter;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamAnnotationsAnnotationReflectionConverter *)other {
  [super copyAllFieldsTo:other];
  other->annotationProvider_ = annotationProvider_;
  other->cachedConverters_ = cachedConverters_;
}

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_ComThoughtworksXstreamAnnotationsAnnotationReflectionConverterWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamAnnotationsAnnotationProvider_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamMapperMapper:withComThoughtworksXstreamConvertersReflectionReflectionProvider:withComThoughtworksXstreamAnnotationsAnnotationProvider:", "AnnotationReflectionConverter", NULL, 0x1, NULL },
    { "marshallFieldWithComThoughtworksXstreamConvertersMarshallingContext:withId:withJavaLangReflectField:", "marshallField", "V", 0x4, NULL },
    { "ensureCacheWithIOSClass:", "ensureCache", "V", 0x2, NULL },
    { "unmarshallFieldWithComThoughtworksXstreamConvertersUnmarshallingContext:withId:withIOSClass:withJavaLangReflectField:", "unmarshallField", "Ljava.lang.Object;", 0x4, NULL },
    { "newInstanceWithIOSClass:", "newInstance", "Lcom.thoughtworks.xstream.converters.Converter;", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "annotationProvider_", NULL, 0x12, "Lcom.thoughtworks.xstream.annotations.AnnotationProvider;", NULL,  },
    { "cachedConverters_", NULL, 0x12, "Ljava.util.Map;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamAnnotationsAnnotationReflectionConverter = { "AnnotationReflectionConverter", "com.thoughtworks.xstream.annotations", NULL, 0x1, 5, methods, 2, fields, 0, NULL};
  return &_ComThoughtworksXstreamAnnotationsAnnotationReflectionConverter;
}

@end
