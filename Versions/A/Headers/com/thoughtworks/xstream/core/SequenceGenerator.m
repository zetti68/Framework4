//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/core/SequenceGenerator.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/core/SequenceGenerator.java"

#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/core/SequenceGenerator.h"

@interface ComThoughtworksXstreamCoreSequenceGenerator () {
 @public
  jint counter_;
}

@end


#line 14
@implementation ComThoughtworksXstreamCoreSequenceGenerator


#line 18
- (instancetype)initWithInt:(jint)startsAt {
  ComThoughtworksXstreamCoreSequenceGenerator_initWithInt_(self, startsAt);
  return self;
}


#line 22
- (NSString *)nextWithId:(id)item {
  return NSString_valueOfInt_(counter_++);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "SequenceGenerator", NULL, 0x1, NULL, NULL },
    { "nextWithId:", "next", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "counter_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreSequenceGenerator = { 2, "SequenceGenerator", "com.thoughtworks.xstream.core", NULL, 0x1, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamCoreSequenceGenerator;
}

@end


#line 18
void ComThoughtworksXstreamCoreSequenceGenerator_initWithInt_(ComThoughtworksXstreamCoreSequenceGenerator *self, jint startsAt) {
  (void) NSObject_init(self);
  
#line 19
  self->counter_ = startsAt;
}


#line 18
ComThoughtworksXstreamCoreSequenceGenerator *new_ComThoughtworksXstreamCoreSequenceGenerator_initWithInt_(jint startsAt) {
  ComThoughtworksXstreamCoreSequenceGenerator *self = [ComThoughtworksXstreamCoreSequenceGenerator alloc];
  ComThoughtworksXstreamCoreSequenceGenerator_initWithInt_(self, startsAt);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamCoreSequenceGenerator)
