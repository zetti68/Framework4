//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/JVM.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/JVM.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/thoughtworks/xstream/converters/reflection/FieldDictionary.h"
#include "com/thoughtworks/xstream/converters/reflection/ObjectAccessException.h"
#include "com/thoughtworks/xstream/converters/reflection/PureJavaReflectionProvider.h"
#include "com/thoughtworks/xstream/converters/reflection/ReflectionProvider.h"
#include "com/thoughtworks/xstream/core/JVM.h"
#include "com/thoughtworks/xstream/core/util/CustomObjectOutputStream.h"
#include "com/thoughtworks/xstream/core/util/DependencyInjectionFactory.h"
#include "com/thoughtworks/xstream/core/util/PresortedMap.h"
#include "com/thoughtworks/xstream/core/util/PresortedSet.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Double.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IncompatibleClassChangeError.h"
#include "java/lang/Integer.h"
#include "java/lang/LinkageError.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Short.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Method.h"
#include "java/text/AttributedString.h"
#include "java/text/ParseException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Comparator.h"
#include "java/util/Date.h"
#include "java/util/Set.h"
#include "java/util/SortedMap.h"
#include "java/util/SortedSet.h"
#include "java/util/TreeMap.h"
#include "java/util/TreeSet.h"

BOOL ComThoughtworksXstreamCoreJVM_initialized = NO;


#line 35
@implementation ComThoughtworksXstreamCoreJVM

jboolean ComThoughtworksXstreamCoreJVM_isAWTAvailable__;
jboolean ComThoughtworksXstreamCoreJVM_isSwingAvailable__;
jboolean ComThoughtworksXstreamCoreJVM_isSQLAvailable__;
jboolean ComThoughtworksXstreamCoreJVM_canAllocateWithUnsafe_;
jboolean ComThoughtworksXstreamCoreJVM_canWriteWithUnsafe_;
jboolean ComThoughtworksXstreamCoreJVM_optimizedTreeSetAddAll_;
jboolean ComThoughtworksXstreamCoreJVM_optimizedTreeMapPutAll_;
jboolean ComThoughtworksXstreamCoreJVM_canParseUTCDateFormat__;
jboolean ComThoughtworksXstreamCoreJVM_canCreateDerivedObjectOutputStream__;
NSString * ComThoughtworksXstreamCoreJVM_vendor_;
jfloat ComThoughtworksXstreamCoreJVM_majorJavaVersion_;
IOSClass * ComThoughtworksXstreamCoreJVM_reflectionProviderType_;


#line 169
- (instancetype)init {
  return [super init];
}


#line 178
+ (jfloat)getMajorJavaVersion {
  
#line 179
  @try {
    return [ComThoughtworksXstreamCoreJVM isAndroid] ? 1.5f : [JavaLangFloat parseFloatWithNSString:[JavaLangSystem getPropertyWithNSString:@"java.specification.version"]];
  }
  @catch (
#line 181
  JavaLangNumberFormatException *e) {
    
#line 183
    return ComThoughtworksXstreamCoreJVM_DEFAULT_JAVA_VERSION;
  }
}


#line 190
+ (jboolean)is14 {
  
#line 191
  return ComThoughtworksXstreamCoreJVM_majorJavaVersion_ >= 1.4f;
}


#line 197
+ (jboolean)is15 {
  
#line 198
  return ComThoughtworksXstreamCoreJVM_majorJavaVersion_ >= 1.5f;
}


#line 204
+ (jboolean)is16 {
  
#line 205
  return ComThoughtworksXstreamCoreJVM_majorJavaVersion_ >= 1.6f;
}


#line 211
+ (jboolean)is17 {
  
#line 212
  return ComThoughtworksXstreamCoreJVM_majorJavaVersion_ >= 1.7f;
}


#line 218
+ (jboolean)is18 {
  
#line 219
  return ComThoughtworksXstreamCoreJVM_majorJavaVersion_ >= 1.8f;
}


#line 222
+ (jboolean)isIBM {
  
#line 223
  return [((NSString *) nil_chk(ComThoughtworksXstreamCoreJVM_vendor_)) indexOfString:@"IBM"] != -1;
}


#line 229
+ (jboolean)isAndroid {
  
#line 230
  return [((NSString *) nil_chk(ComThoughtworksXstreamCoreJVM_vendor_)) indexOfString:@"Android"] != -1;
}


#line 241
+ (IOSClass *)loadClassForNameWithNSString:(NSString *)name {
  
#line 242
  return [ComThoughtworksXstreamCoreJVM loadClassForNameWithNSString:name withBoolean:YES];
}


#line 248
- (IOSClass *)loadClassWithNSString:(NSString *)name {
  
#line 249
  return [ComThoughtworksXstreamCoreJVM loadClassForNameWithNSString:name withBoolean:YES];
}


#line 260
+ (IOSClass *)loadClassForNameWithNSString:(NSString *)name
                               withBoolean:(jboolean)initialize_ {
  
#line 261
  @try {
    IOSClass *clazz = [IOSClass forName:name initialize:initialize_ classLoader:[[IOSClass classWithClass:[ComThoughtworksXstreamCoreJVM class]] getClassLoader]];
    return clazz;
  }
  @catch (
#line 264
  JavaLangLinkageError *e) {
    return nil;
  }
  @catch (
#line 266
  JavaLangClassNotFoundException *e) {
    return nil;
  }
}


#line 275
- (IOSClass *)loadClassWithNSString:(NSString *)name
                        withBoolean:(jboolean)initialize_ {
  
#line 276
  return [ComThoughtworksXstreamCoreJVM loadClassForNameWithNSString:name withBoolean:initialize_];
}


#line 285
+ (id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)newReflectionProvider {
  
#line 286
  return (id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) check_protocol_cast([ComThoughtworksXstreamCoreUtilDependencyInjectionFactory newInstanceWithIOSClass:ComThoughtworksXstreamCoreJVM_reflectionProviderType_ withNSObjectArray:nil], @protocol(ComThoughtworksXstreamConvertersReflectionReflectionProvider));
}


#line 296
+ (id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)newReflectionProviderWithComThoughtworksXstreamConvertersReflectionFieldDictionary:(ComThoughtworksXstreamConvertersReflectionFieldDictionary *)dictionary {
  
#line 297
  return (id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) check_protocol_cast([ComThoughtworksXstreamCoreUtilDependencyInjectionFactory newInstanceWithIOSClass:ComThoughtworksXstreamCoreJVM_reflectionProviderType_ withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ dictionary } count:1 type:[IOSClass classWithClass:[NSObject class]]]], @protocol(ComThoughtworksXstreamConvertersReflectionReflectionProvider));
}


#line 314
+ (IOSClass *)getStaxInputFactory {
  
#line 315
  if ([ComThoughtworksXstreamCoreJVM is16]) {
    if ([ComThoughtworksXstreamCoreJVM isIBM]) {
      return [IOSClass forName:@"com.ibm.xml.xlxp.api.stax.XMLInputFactoryImpl"];
    }
    else {
      
#line 319
      return [IOSClass forName:@"com.sun.xml.internal.stream.XMLInputFactoryImpl"];
    }
  }
  return nil;
}


#line 339
+ (IOSClass *)getStaxOutputFactory {
  
#line 340
  if ([ComThoughtworksXstreamCoreJVM is16]) {
    if ([ComThoughtworksXstreamCoreJVM isIBM]) {
      return [IOSClass forName:@"com.ibm.xml.xlxp.api.stax.XMLOutputFactoryImpl"];
    }
    else {
      
#line 344
      return [IOSClass forName:@"com.sun.xml.internal.stream.XMLOutputFactoryImpl"];
    }
  }
  return nil;
}


#line 353
- (id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)bestReflectionProvider {
  @synchronized(self) {
    
#line 354
    if (reflectionProvider_ == nil) {
      reflectionProvider_ = [ComThoughtworksXstreamCoreJVM newReflectionProvider];
    }
    return reflectionProvider_;
  }
}


#line 360
+ (jboolean)canUseSunUnsafeReflectionProvider {
  
#line 361
  return ComThoughtworksXstreamCoreJVM_canAllocateWithUnsafe_ && [ComThoughtworksXstreamCoreJVM is14];
}


#line 364
+ (jboolean)canUseSunLimitedUnsafeReflectionProvider {
  
#line 365
  return ComThoughtworksXstreamCoreJVM_canWriteWithUnsafe_;
}


#line 371
+ (jboolean)reverseFieldDefinition {
  
#line 372
  return ComThoughtworksXstreamCoreJVM_reverseFieldOrder;
}


#line 379
+ (jboolean)isAWTAvailable {
  
#line 380
  return ComThoughtworksXstreamCoreJVM_isAWTAvailable__;
}


#line 387
- (jboolean)supportsAWT {
  
#line 388
  return ComThoughtworksXstreamCoreJVM_isAWTAvailable__;
}


#line 395
+ (jboolean)isSwingAvailable {
  
#line 396
  return ComThoughtworksXstreamCoreJVM_isSwingAvailable__;
}


#line 403
- (jboolean)supportsSwing {
  
#line 404
  return ComThoughtworksXstreamCoreJVM_isSwingAvailable__;
}


#line 411
+ (jboolean)isSQLAvailable {
  
#line 412
  return ComThoughtworksXstreamCoreJVM_isSQLAvailable__;
}


#line 419
- (jboolean)supportsSQL {
  
#line 420
  return ComThoughtworksXstreamCoreJVM_isSQLAvailable__;
}


#line 428
+ (jboolean)hasOptimizedTreeSetAddAll {
  
#line 429
  return ComThoughtworksXstreamCoreJVM_optimizedTreeSetAddAll_;
}


#line 437
+ (jboolean)hasOptimizedTreeMapPutAll {
  
#line 438
  return ComThoughtworksXstreamCoreJVM_optimizedTreeMapPutAll_;
}


#line 441
+ (jboolean)canParseUTCDateFormat {
  
#line 442
  return ComThoughtworksXstreamCoreJVM_canParseUTCDateFormat__;
}


#line 448
+ (jboolean)canCreateDerivedObjectOutputStream {
  
#line 449
  return ComThoughtworksXstreamCoreJVM_canCreateDerivedObjectOutputStream__;
}


#line 455
- (void)flushCache {
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  
#line 459
  jboolean reverseJDK = NO;
  IOSObjectArray *fields = [[IOSClass classWithClass:[JavaTextAttributedString class]] getDeclaredFields];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fields))->size_; i++) {
    if ([((NSString *) nil_chk([((JavaLangReflectField *) nil_chk(IOSObjectArray_Get(fields, i))) getName])) isEqual:@"text"]) {
      reverseJDK = (i > 3);
      break;
    }
  }
  
#line 468
  jboolean reverseLocal = NO;
  fields = [[IOSClass classWithClass:[ComThoughtworksXstreamCoreJVM_Test class]] getDeclaredFields];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fields))->size_; i++) {
    if ([((NSString *) nil_chk([((JavaLangReflectField *) nil_chk(IOSObjectArray_Get(fields, i))) getName])) isEqual:@"o"]) {
      reverseLocal = (i > 3);
      break;
    }
  }
  
#line 477
  NSString *staxInputFactory = nil;
  @try {
    staxInputFactory = [((IOSClass *) nil_chk([ComThoughtworksXstreamCoreJVM getStaxInputFactory])) getName];
  }
  @catch (
#line 480
  JavaLangClassNotFoundException *e) {
    staxInputFactory = [((JavaLangClassNotFoundException *) nil_chk(e)) getMessage];
  }
  @catch (
#line 482
  JavaLangNullPointerException *e) {
  }
  
#line 485
  NSString *staxOutputFactory = nil;
  @try {
    staxOutputFactory = [((IOSClass *) nil_chk([ComThoughtworksXstreamCoreJVM getStaxOutputFactory])) getName];
  }
  @catch (
#line 488
  JavaLangClassNotFoundException *e) {
    staxOutputFactory = [((JavaLangClassNotFoundException *) nil_chk(e)) getMessage];
  }
  @catch (
#line 490
  JavaLangNullPointerException *e) {
  }
  
#line 493
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:@"XStream JVM diagnostics"];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$", @"java.specification.version: ", [JavaLangSystem getPropertyWithNSString:@"java.specification.version"])];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$", @"java.specification.vendor: ", [JavaLangSystem getPropertyWithNSString:@"java.specification.vendor"])];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$", @"java.specification.name: ", [JavaLangSystem getPropertyWithNSString:@"java.specification.name"])];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$", @"java.vm.vendor: ", ComThoughtworksXstreamCoreJVM_vendor_)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$", @"java.vendor: ", [JavaLangSystem getPropertyWithNSString:@"java.vendor"])];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$", @"java.vm.name: ", [JavaLangSystem getPropertyWithNSString:@"java.vm.name"])];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$F", @"Version: ", ComThoughtworksXstreamCoreJVM_majorJavaVersion_)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"XStream support for enhanced Mode: ", [ComThoughtworksXstreamCoreJVM canUseSunUnsafeReflectionProvider])];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"XStream support for reduced Mode: ", [ComThoughtworksXstreamCoreJVM canUseSunLimitedUnsafeReflectionProvider])];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"Supports AWT: ", [ComThoughtworksXstreamCoreJVM isAWTAvailable])];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"Supports Swing: ", [ComThoughtworksXstreamCoreJVM isSwingAvailable])];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"Supports SQL: ", [ComThoughtworksXstreamCoreJVM isSQLAvailable])];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"Java Beans EventHandler present: ", ([ComThoughtworksXstreamCoreJVM loadClassForNameWithNSString:@"java.beans.EventHandler"] != nil))];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$", @"Standard StAX XMLInputFactory: ", staxInputFactory)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$", @"Standard StAX XMLOutputFactory: ", staxOutputFactory)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"Optimized TreeSet.addAll: ", [ComThoughtworksXstreamCoreJVM hasOptimizedTreeSetAddAll])];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"Optimized TreeMap.putAll: ", [ComThoughtworksXstreamCoreJVM hasOptimizedTreeMapPutAll])];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"Can parse UTC date format: ", [ComThoughtworksXstreamCoreJVM canParseUTCDateFormat])];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"Can create derive ObjectOutputStream: ", [ComThoughtworksXstreamCoreJVM canCreateDerivedObjectOutputStream])];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"Reverse field order detected for JDK: ", reverseJDK)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"Reverse field order detected (only if JVM class itself has been compiled): ", reverseLocal)];
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamCoreJVM *)other {
  [super copyAllFieldsTo:other];
  other->reflectionProvider_ = reflectionProvider_;
}

+ (void)initialize {
  if (self == [ComThoughtworksXstreamCoreJVM class]) {
    ComThoughtworksXstreamCoreJVM_vendor_ =
#line 49
    [JavaLangSystem getPropertyWithNSString:@"java.vm.vendor"];
    ComThoughtworksXstreamCoreJVM_majorJavaVersion_ =
#line 50
    [ComThoughtworksXstreamCoreJVM getMajorJavaVersion];
    {
      
#line 71
      jboolean test = YES;
      id unsafe = nil;
      @try {
        IOSClass *unsafeClass = [IOSClass forName:@"sun.misc.Unsafe"];
        JavaLangReflectField *unsafeField = [((IOSClass *) nil_chk(unsafeClass)) getDeclaredField:@"theUnsafe"];
        [((JavaLangReflectField *) nil_chk(unsafeField)) setAccessibleWithBoolean:YES];
        unsafe = [unsafeField getWithId:nil];
        JavaLangReflectMethod *allocateInstance = [unsafeClass getDeclaredMethod:@"allocateInstance" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass classWithClass:[IOSClass class]] } count:1 type:[IOSClass classWithClass:[IOSClass class]]]];
        [((JavaLangReflectMethod *) nil_chk(allocateInstance)) setAccessibleWithBoolean:YES];
        test = ([allocateInstance invokeWithId:unsafe withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass classWithClass:[ComThoughtworksXstreamCoreJVM_Test class]] } count:1 type:[IOSClass classWithClass:[NSObject class]]]] != nil);
      }
      @catch (
#line 81
      JavaLangException *e) {
        test = NO;
      }
      @catch (
#line 83
      JavaLangError *e) {
        test = NO;
      }
      ComThoughtworksXstreamCoreJVM_canAllocateWithUnsafe_ = test;
      test = NO;
      IOSClass *type = [IOSClass classWithClass:[ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider class]];
      if ([ComThoughtworksXstreamCoreJVM canUseSunUnsafeReflectionProvider]) {
        IOSClass *cls = [ComThoughtworksXstreamCoreJVM loadClassForNameWithNSString:@"com.thoughtworks.xstream.converters.reflection.SunUnsafeReflectionProvider"];
        if (cls != nil) {
          @try {
            id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> provider = (id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) check_protocol_cast([ComThoughtworksXstreamCoreUtilDependencyInjectionFactory newInstanceWithIOSClass:cls withNSObjectArray:nil], @protocol(ComThoughtworksXstreamConvertersReflectionReflectionProvider));
            ComThoughtworksXstreamCoreJVM_Test *t = (ComThoughtworksXstreamCoreJVM_Test *) check_class_cast([((id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(provider)) newInstanceWithIOSClass:[IOSClass classWithClass:[ComThoughtworksXstreamCoreJVM_Test class]]], [ComThoughtworksXstreamCoreJVM_Test class]);
            @try {
              [provider writeFieldWithId:t withNSString:@"o" withId:@"object" withIOSClass:[IOSClass classWithClass:[ComThoughtworksXstreamCoreJVM_Test class]]];
              [provider writeFieldWithId:t withNSString:@"c" withId:[[JavaLangCharacter alloc] initWithChar:'c'] withIOSClass:[IOSClass classWithClass:[ComThoughtworksXstreamCoreJVM_Test class]]];
              [provider writeFieldWithId:t withNSString:@"b" withId:[[JavaLangByte alloc] initWithByte:(jbyte) 1] withIOSClass:[IOSClass classWithClass:[ComThoughtworksXstreamCoreJVM_Test class]]];
              [provider writeFieldWithId:t withNSString:@"s" withId:[[JavaLangShort alloc] initWithShort:(jshort) 1] withIOSClass:[IOSClass classWithClass:[ComThoughtworksXstreamCoreJVM_Test class]]];
              [provider writeFieldWithId:t withNSString:@"i" withId:[[JavaLangInteger alloc] initWithInt:1] withIOSClass:[IOSClass classWithClass:[ComThoughtworksXstreamCoreJVM_Test class]]];
              [provider writeFieldWithId:t withNSString:@"l" withId:[[JavaLangLong alloc] initWithLong:1] withIOSClass:[IOSClass classWithClass:[ComThoughtworksXstreamCoreJVM_Test class]]];
              [provider writeFieldWithId:t withNSString:@"f" withId:[[JavaLangFloat alloc] initWithFloat:1] withIOSClass:[IOSClass classWithClass:[ComThoughtworksXstreamCoreJVM_Test class]]];
              [provider writeFieldWithId:t withNSString:@"d" withId:[[JavaLangDouble alloc] initWithDouble:1] withIOSClass:[IOSClass classWithClass:[ComThoughtworksXstreamCoreJVM_Test class]]];
              [provider writeFieldWithId:t withNSString:@"bool" withId:JavaLangBoolean_get_TRUE__() withIOSClass:[IOSClass classWithClass:[ComThoughtworksXstreamCoreJVM_Test class]]];
              test = YES;
            }
            @catch (
#line 106
            JavaLangIncompatibleClassChangeError *e) {
              cls = nil;
            }
            @catch (
#line 108
            ComThoughtworksXstreamConvertersReflectionObjectAccessException *e) {
              cls = nil;
            }
            if (cls == nil) {
              cls = [ComThoughtworksXstreamCoreJVM loadClassForNameWithNSString:@"com.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider"];
            }
            type = cls;
          }
          @catch (
#line 115
          ComThoughtworksXstreamConvertersReflectionObjectAccessException *e) {
          }
        }
      }
      ComThoughtworksXstreamCoreJVM_reflectionProviderType_ = type;
      ComThoughtworksXstreamCoreJVM_canWriteWithUnsafe_ = test;
      id<JavaUtilComparator> comparator = [[ComThoughtworksXstreamCoreJVM_$1 alloc] init];
      
#line 126
      id<JavaUtilSortedMap> map = [[ComThoughtworksXstreamCoreUtilPresortedMap alloc] initWithJavaUtilComparator:comparator];
      (void) [map putWithId:@"one" withId:nil];
      (void) [map putWithId:@"two" withId:nil];
      @try {
        [((JavaUtilTreeMap *) [[JavaUtilTreeMap alloc] initWithJavaUtilComparator:comparator]) putAllWithJavaUtilMap:map];
        test = YES;
      }
      @catch (
#line 132
      JavaLangRuntimeException *e) {
        test = NO;
      }
      ComThoughtworksXstreamCoreJVM_optimizedTreeMapPutAll_ = test;
      id<JavaUtilSortedSet> set = [[ComThoughtworksXstreamCoreUtilPresortedSet alloc] initWithJavaUtilComparator:comparator];
      [set addAllWithJavaUtilCollection:[map keySet]];
      @try {
        [((JavaUtilTreeSet *) [[JavaUtilTreeSet alloc] initWithJavaUtilComparator:comparator]) addAllWithJavaUtilCollection:set];
        test = YES;
      }
      @catch (
#line 141
      JavaLangRuntimeException *e) {
        test = NO;
      }
      ComThoughtworksXstreamCoreJVM_optimizedTreeSetAddAll_ = test;
      @try {
        (void) [((JavaTextSimpleDateFormat *) [[JavaTextSimpleDateFormat alloc] initWithNSString:@"z"]) parseWithNSString:@"UTC"];
        test = YES;
      }
      @catch (
#line 148
      JavaTextParseException *e) {
        test = NO;
      }
      ComThoughtworksXstreamCoreJVM_canParseUTCDateFormat__ = test;
      @try {
        test = ([[ComThoughtworksXstreamCoreUtilCustomObjectOutputStream alloc] initWithComThoughtworksXstreamCoreUtilCustomObjectOutputStream_StreamCallback:nil] != nil);
      }
      @catch (
#line 154
      JavaLangRuntimeException *e) {
        test = NO;
      }
      @catch (
#line 156
      JavaIoIOException *e) {
        test = NO;
      }
      ComThoughtworksXstreamCoreJVM_canCreateDerivedObjectOutputStream__ = test;
      
#line 161
      ComThoughtworksXstreamCoreJVM_isAWTAvailable__ = ([ComThoughtworksXstreamCoreJVM loadClassForNameWithNSString:@"java.awt.Color" withBoolean:NO] != nil);
      ComThoughtworksXstreamCoreJVM_isSwingAvailable__ = ([ComThoughtworksXstreamCoreJVM loadClassForNameWithNSString:@"javax.swing.LookAndFeel" withBoolean:NO] != nil);
      ComThoughtworksXstreamCoreJVM_isSQLAvailable__ = ([ComThoughtworksXstreamCoreJVM loadClassForNameWithNSString:@"java.sql.Date"] != nil);
    }
    ComThoughtworksXstreamCoreJVM_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "JVM", NULL, 0x1, NULL },
    { "getMajorJavaVersion", NULL, "F", 0x1a, NULL },
    { "is14", NULL, "Z", 0x9, NULL },
    { "is15", NULL, "Z", 0x9, NULL },
    { "is16", NULL, "Z", 0x9, NULL },
    { "is17", NULL, "Z", 0x9, NULL },
    { "is18", NULL, "Z", 0x9, NULL },
    { "isIBM", NULL, "Z", 0xa, NULL },
    { "isAndroid", NULL, "Z", 0xa, NULL },
    { "loadClassForNameWithNSString:", "loadClassForName", "Ljava.lang.Class;", 0x9, NULL },
    { "loadClassWithNSString:", "loadClass", "Ljava.lang.Class;", 0x1, NULL },
    { "loadClassForNameWithNSString:withBoolean:", "loadClassForName", "Ljava.lang.Class;", 0x9, NULL },
    { "loadClassWithNSString:withBoolean:", "loadClass", "Ljava.lang.Class;", 0x1, NULL },
    { "newReflectionProvider", NULL, "Lcom.thoughtworks.xstream.converters.reflection.ReflectionProvider;", 0x9, NULL },
    { "newReflectionProviderWithComThoughtworksXstreamConvertersReflectionFieldDictionary:", "newReflectionProvider", "Lcom.thoughtworks.xstream.converters.reflection.ReflectionProvider;", 0x9, NULL },
    { "getStaxInputFactory", NULL, "Ljava.lang.Class;", 0x9, "Ljava.lang.ClassNotFoundException;" },
    { "getStaxOutputFactory", NULL, "Ljava.lang.Class;", 0x9, "Ljava.lang.ClassNotFoundException;" },
    { "bestReflectionProvider", NULL, "Lcom.thoughtworks.xstream.converters.reflection.ReflectionProvider;", 0x21, NULL },
    { "canUseSunUnsafeReflectionProvider", NULL, "Z", 0xa, NULL },
    { "canUseSunLimitedUnsafeReflectionProvider", NULL, "Z", 0xa, NULL },
    { "reverseFieldDefinition", NULL, "Z", 0x9, NULL },
    { "isAWTAvailable", NULL, "Z", 0x9, NULL },
    { "supportsAWT", NULL, "Z", 0x1, NULL },
    { "isSwingAvailable", NULL, "Z", 0x9, NULL },
    { "supportsSwing", NULL, "Z", 0x1, NULL },
    { "isSQLAvailable", NULL, "Z", 0x9, NULL },
    { "supportsSQL", NULL, "Z", 0x1, NULL },
    { "hasOptimizedTreeSetAddAll", NULL, "Z", 0x9, NULL },
    { "hasOptimizedTreeMapPutAll", NULL, "Z", 0x9, NULL },
    { "canParseUTCDateFormat", NULL, "Z", 0x9, NULL },
    { "canCreateDerivedObjectOutputStream", NULL, "Z", 0x9, NULL },
    { "flushCache", NULL, "V", 0x1, NULL },
    { "mainWithNSStringArray:", "main", "V", 0x9, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "reflectionProvider_", NULL, 0x2, "Lcom.thoughtworks.xstream.converters.reflection.ReflectionProvider;", NULL,  },
    { "isAWTAvailable__", "isAWTAvailable", 0x1a, "Z", &ComThoughtworksXstreamCoreJVM_isAWTAvailable__,  },
    { "isSwingAvailable__", "isSwingAvailable", 0x1a, "Z", &ComThoughtworksXstreamCoreJVM_isSwingAvailable__,  },
    { "isSQLAvailable__", "isSQLAvailable", 0x1a, "Z", &ComThoughtworksXstreamCoreJVM_isSQLAvailable__,  },
    { "canAllocateWithUnsafe_", NULL, 0x1a, "Z", &ComThoughtworksXstreamCoreJVM_canAllocateWithUnsafe_,  },
    { "canWriteWithUnsafe_", NULL, 0x1a, "Z", &ComThoughtworksXstreamCoreJVM_canWriteWithUnsafe_,  },
    { "optimizedTreeSetAddAll_", NULL, 0x1a, "Z", &ComThoughtworksXstreamCoreJVM_optimizedTreeSetAddAll_,  },
    { "optimizedTreeMapPutAll_", NULL, 0x1a, "Z", &ComThoughtworksXstreamCoreJVM_optimizedTreeMapPutAll_,  },
    { "canParseUTCDateFormat__", "canParseUTCDateFormat", 0x1a, "Z", &ComThoughtworksXstreamCoreJVM_canParseUTCDateFormat__,  },
    { "canCreateDerivedObjectOutputStream__", "canCreateDerivedObjectOutputStream", 0x1a, "Z", &ComThoughtworksXstreamCoreJVM_canCreateDerivedObjectOutputStream__,  },
    { "vendor_", NULL, 0x1a, "Ljava.lang.String;", &ComThoughtworksXstreamCoreJVM_vendor_,  },
    { "majorJavaVersion_", NULL, 0x1a, "F", &ComThoughtworksXstreamCoreJVM_majorJavaVersion_,  },
    { "DEFAULT_JAVA_VERSION_", NULL, 0x1a, "F", NULL, .constantValue.asFloat = ComThoughtworksXstreamCoreJVM_DEFAULT_JAVA_VERSION },
    { "reverseFieldOrder_", NULL, 0x1a, "Z", NULL, .constantValue.asBOOL = ComThoughtworksXstreamCoreJVM_reverseFieldOrder },
    { "reflectionProviderType_", NULL, 0x1a, "Ljava.lang.Class;", &ComThoughtworksXstreamCoreJVM_reflectionProviderType_,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreJVM = { "JVM", "com.thoughtworks.xstream.core", NULL, 0x1, 33, methods, 15, fields, 0, NULL};
  return &_ComThoughtworksXstreamCoreJVM;
}

@end


#line 55
@implementation ComThoughtworksXstreamCoreJVM_Test


#line 65
- (instancetype)init {
  if (self = [super init]) {
    
#line 66
    @throw [[JavaLangUnsupportedOperationException alloc] init];
  }
  return self;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamCoreJVM_Test *)other {
  [super copyAllFieldsTo:other];
  other->b_ = b_;
  other->bool__ = bool__;
  other->c_ = c_;
  other->d_ = d_;
  other->f_ = f_;
  other->i_ = i_;
  other->l_ = l_;
  other->o_ = o_;
  other->s_ = s_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Test", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "o_", NULL, 0x2, "Ljava.lang.Object;", NULL,  },
    { "c_", NULL, 0x2, "C", NULL,  },
    { "b_", NULL, 0x2, "B", NULL,  },
    { "s_", NULL, 0x2, "S", NULL,  },
    { "i_", NULL, 0x2, "I", NULL,  },
    { "l_", NULL, 0x2, "J", NULL,  },
    { "f_", NULL, 0x2, "F", NULL,  },
    { "d_", NULL, 0x2, "D", NULL,  },
    { "bool__", "bool", 0x2, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreJVM_Test = { "Test", "com.thoughtworks.xstream.core", "JVM", 0x8, 1, methods, 9, fields, 0, NULL};
  return &_ComThoughtworksXstreamCoreJVM_Test;
}

@end

@implementation ComThoughtworksXstreamCoreJVM_$1


#line 122
- (jint)compareWithId:(id)o1
               withId:(id)o2 {
  
#line 123
  @throw [[JavaLangRuntimeException alloc] init];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreJVM_$1 = { "$1", "com.thoughtworks.xstream.core", "JVM", 0x8000, 2, methods, 0, NULL, 0, NULL};
  return &_ComThoughtworksXstreamCoreJVM_$1;
}

@end
