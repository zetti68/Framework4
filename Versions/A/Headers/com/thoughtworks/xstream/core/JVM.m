//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/core/JVM.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/core/JVM.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/reflection/FieldDictionary.h"
#include "com/thoughtworks/xstream/converters/reflection/ObjectAccessException.h"
#include "com/thoughtworks/xstream/converters/reflection/PureJavaReflectionProvider.h"
#include "com/thoughtworks/xstream/converters/reflection/ReflectionProvider.h"
#include "com/thoughtworks/xstream/core/JVM.h"
#include "com/thoughtworks/xstream/core/util/CustomObjectOutputStream.h"
#include "com/thoughtworks/xstream/core/util/DependencyInjectionFactory.h"
#include "com/thoughtworks/xstream/core/util/PresortedMap.h"
#include "com/thoughtworks/xstream/core/util/PresortedSet.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IncompatibleClassChangeError.h"
#include "java/lang/Integer.h"
#include "java/lang/LinkageError.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Short.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Method.h"
#include "java/text/AttributedString.h"
#include "java/text/ParseException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Comparator.h"
#include "java/util/Date.h"
#include "java/util/Set.h"
#include "java/util/SortedMap.h"
#include "java/util/SortedSet.h"
#include "java/util/TreeMap.h"
#include "java/util/TreeSet.h"

#define ComThoughtworksXstreamCoreJVM_DEFAULT_JAVA_VERSION 1.4f
#define ComThoughtworksXstreamCoreJVM_reverseFieldOrder NO

@interface ComThoughtworksXstreamCoreJVM () {
 @public
  id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider_;
}

+ (jfloat)getMajorJavaVersion;

+ (jboolean)isIBM;

+ (jboolean)isAndroid;

+ (jboolean)canUseSunUnsafeReflectionProvider;

+ (jboolean)canUseSunLimitedUnsafeReflectionProvider;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreJVM, reflectionProvider_, id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)

static jboolean ComThoughtworksXstreamCoreJVM_isAWTAvailable__;
J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamCoreJVM, isAWTAvailable__, jboolean)

static jboolean ComThoughtworksXstreamCoreJVM_isSwingAvailable__;
J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamCoreJVM, isSwingAvailable__, jboolean)

static jboolean ComThoughtworksXstreamCoreJVM_isSQLAvailable__;
J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamCoreJVM, isSQLAvailable__, jboolean)

static jboolean ComThoughtworksXstreamCoreJVM_canAllocateWithUnsafe_;
J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamCoreJVM, canAllocateWithUnsafe_, jboolean)

static jboolean ComThoughtworksXstreamCoreJVM_canWriteWithUnsafe_;
J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamCoreJVM, canWriteWithUnsafe_, jboolean)

static jboolean ComThoughtworksXstreamCoreJVM_optimizedTreeSetAddAll_;
J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamCoreJVM, optimizedTreeSetAddAll_, jboolean)

static jboolean ComThoughtworksXstreamCoreJVM_optimizedTreeMapPutAll_;
J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamCoreJVM, optimizedTreeMapPutAll_, jboolean)

static jboolean ComThoughtworksXstreamCoreJVM_canParseUTCDateFormat__;
J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamCoreJVM, canParseUTCDateFormat__, jboolean)

static jboolean ComThoughtworksXstreamCoreJVM_canCreateDerivedObjectOutputStream__;
J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamCoreJVM, canCreateDerivedObjectOutputStream__, jboolean)

static NSString *ComThoughtworksXstreamCoreJVM_vendor_;
J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamCoreJVM, vendor_, NSString *)

static jfloat ComThoughtworksXstreamCoreJVM_majorJavaVersion_;
J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamCoreJVM, majorJavaVersion_, jfloat)

J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamCoreJVM, DEFAULT_JAVA_VERSION, jfloat)

J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamCoreJVM, reverseFieldOrder, jboolean)

static IOSClass *ComThoughtworksXstreamCoreJVM_reflectionProviderType_;
J2OBJC_STATIC_FIELD_GETTER(ComThoughtworksXstreamCoreJVM, reflectionProviderType_, IOSClass *)

__attribute__((unused)) static jfloat ComThoughtworksXstreamCoreJVM_getMajorJavaVersion();

__attribute__((unused)) static jboolean ComThoughtworksXstreamCoreJVM_isIBM();

__attribute__((unused)) static jboolean ComThoughtworksXstreamCoreJVM_isAndroid();

__attribute__((unused)) static jboolean ComThoughtworksXstreamCoreJVM_canUseSunUnsafeReflectionProvider();

__attribute__((unused)) static jboolean ComThoughtworksXstreamCoreJVM_canUseSunLimitedUnsafeReflectionProvider();

@interface ComThoughtworksXstreamCoreJVM_Test () {
 @public
  id o_;
  jchar c_;
  jbyte b_;
  jshort s_;
  jint i_;
  jlong l_;
  jfloat f_;
  jdouble d_;
  jboolean bool__;
}

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreJVM_Test, o_, id)

@interface ComThoughtworksXstreamCoreJVM_$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(id)o1
               withId:(id)o2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComThoughtworksXstreamCoreJVM_$1)

__attribute__((unused)) static void ComThoughtworksXstreamCoreJVM_$1_init(ComThoughtworksXstreamCoreJVM_$1 *self);

__attribute__((unused)) static ComThoughtworksXstreamCoreJVM_$1 *new_ComThoughtworksXstreamCoreJVM_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComThoughtworksXstreamCoreJVM_$1)

J2OBJC_INITIALIZED_DEFN(ComThoughtworksXstreamCoreJVM)


#line 35
@implementation ComThoughtworksXstreamCoreJVM


#line 173
- (instancetype)init {
  ComThoughtworksXstreamCoreJVM_init(self);
  return self;
}


#line 182
+ (jfloat)getMajorJavaVersion {
  return ComThoughtworksXstreamCoreJVM_getMajorJavaVersion();
}


#line 196
+ (jboolean)is14 {
  return ComThoughtworksXstreamCoreJVM_is14();
}


#line 205
+ (jboolean)is15 {
  return ComThoughtworksXstreamCoreJVM_is15();
}


#line 214
+ (jboolean)is16 {
  return ComThoughtworksXstreamCoreJVM_is16();
}


#line 221
+ (jboolean)is17 {
  return ComThoughtworksXstreamCoreJVM_is17();
}


#line 228
+ (jboolean)is18 {
  return ComThoughtworksXstreamCoreJVM_is18();
}

+ (jboolean)isIBM {
  return ComThoughtworksXstreamCoreJVM_isIBM();
}


#line 239
+ (jboolean)isAndroid {
  return ComThoughtworksXstreamCoreJVM_isAndroid();
}


#line 254
+ (IOSClass *)loadClassForNameWithNSString:(NSString *)name {
  return ComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_(name);
}


#line 262
- (IOSClass *)loadClassWithNSString:(NSString *)name {
  return ComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_withBoolean_(name, YES);
}


#line 277
+ (IOSClass *)loadClassForNameWithNSString:(NSString *)name
                               withBoolean:(jboolean)initialize_ {
  return ComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_withBoolean_(name, initialize_);
}


#line 293
- (IOSClass *)loadClassWithNSString:(NSString *)name
                        withBoolean:(jboolean)initialize_ {
  return ComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_withBoolean_(name, initialize_);
}


#line 303
+ (id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)newReflectionProvider {
  return ComThoughtworksXstreamCoreJVM_newReflectionProvider();
}


#line 316
+ (id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)newReflectionProviderWithComThoughtworksXstreamConvertersReflectionFieldDictionary:(ComThoughtworksXstreamConvertersReflectionFieldDictionary *)dictionary {
  return ComThoughtworksXstreamCoreJVM_newReflectionProviderWithComThoughtworksXstreamConvertersReflectionFieldDictionary_(dictionary);
}


#line 336
+ (IOSClass *)getStaxInputFactory {
  return ComThoughtworksXstreamCoreJVM_getStaxInputFactory();
}


#line 362
+ (IOSClass *)getStaxOutputFactory {
  return ComThoughtworksXstreamCoreJVM_getStaxOutputFactory();
}


#line 377
- (id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)bestReflectionProvider {
  @synchronized(self) {
    
#line 378
    if (reflectionProvider_ == nil) {
      reflectionProvider_ = ComThoughtworksXstreamCoreJVM_newReflectionProvider();
    }
    return reflectionProvider_;
  }
}


#line 384
+ (jboolean)canUseSunUnsafeReflectionProvider {
  return ComThoughtworksXstreamCoreJVM_canUseSunUnsafeReflectionProvider();
}

+ (jboolean)canUseSunLimitedUnsafeReflectionProvider {
  return ComThoughtworksXstreamCoreJVM_canUseSunLimitedUnsafeReflectionProvider();
}


#line 396
+ (jboolean)reverseFieldDefinition {
  return ComThoughtworksXstreamCoreJVM_reverseFieldDefinition();
}


#line 405
+ (jboolean)isAWTAvailable {
  return ComThoughtworksXstreamCoreJVM_isAWTAvailable();
}


#line 415
- (jboolean)supportsAWT {
  return ComThoughtworksXstreamCoreJVM_isAWTAvailable__;
}


#line 424
+ (jboolean)isSwingAvailable {
  return ComThoughtworksXstreamCoreJVM_isSwingAvailable();
}


#line 434
- (jboolean)supportsSwing {
  return ComThoughtworksXstreamCoreJVM_isSwingAvailable__;
}


#line 443
+ (jboolean)isSQLAvailable {
  return ComThoughtworksXstreamCoreJVM_isSQLAvailable();
}


#line 453
- (jboolean)supportsSQL {
  return ComThoughtworksXstreamCoreJVM_isSQLAvailable__;
}


#line 462
+ (jboolean)hasOptimizedTreeSetAddAll {
  return ComThoughtworksXstreamCoreJVM_hasOptimizedTreeSetAddAll();
}


#line 471
+ (jboolean)hasOptimizedTreeMapPutAll {
  return ComThoughtworksXstreamCoreJVM_hasOptimizedTreeMapPutAll();
}

+ (jboolean)canParseUTCDateFormat {
  return ComThoughtworksXstreamCoreJVM_canParseUTCDateFormat();
}


#line 482
+ (jboolean)canCreateDerivedObjectOutputStream {
  return ComThoughtworksXstreamCoreJVM_canCreateDerivedObjectOutputStream();
}


#line 490
- (void)flushCache {
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  ComThoughtworksXstreamCoreJVM_mainWithNSStringArray_(args);
}

+ (void)initialize {
  if (self == [ComThoughtworksXstreamCoreJVM class]) {
    ComThoughtworksXstreamCoreJVM_vendor_ = JavaLangSystem_getPropertyWithNSString_(
#line 49
    @"java.vm.vendor");
    ComThoughtworksXstreamCoreJVM_majorJavaVersion_ = ComThoughtworksXstreamCoreJVM_getMajorJavaVersion();
    {
      
#line 72
      jboolean test = YES;
      id unsafe = nil;
      @try {
        IOSClass *unsafeClass = IOSClass_forName_(@"sun.misc.Unsafe");
        JavaLangReflectField *unsafeField = [((IOSClass *) nil_chk(unsafeClass)) getDeclaredField:@"theUnsafe"];
        [((JavaLangReflectField *) nil_chk(unsafeField)) setAccessibleWithBoolean:YES];
        unsafe = [unsafeField getWithId:nil];
        JavaLangReflectMethod *allocateInstance = [unsafeClass getDeclaredMethod:@"allocateInstance" parameterTypes:[IOSObjectArray newArrayWithObjects:(id[]){
#line 80
          IOSClass_class_() } count:1 type:IOSClass_class_()]];
          [((JavaLangReflectMethod *) nil_chk(allocateInstance)) setAccessibleWithBoolean:YES];
          test = ([allocateInstance invokeWithId:unsafe withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ ComThoughtworksXstreamCoreJVM_Test_class_() } count:1 type:NSObject_class_()]] != nil);
        }
        @catch (
#line 83
        JavaLangException *e) {
          test = NO;
        }
        @catch (
#line 85
        JavaLangError *e) {
          test = NO;
        }
        ComThoughtworksXstreamCoreJVM_canAllocateWithUnsafe_ = test;
        test = NO;
        IOSClass *type = ComThoughtworksXstreamConvertersReflectionPureJavaReflectionProvider_class_();
        if (ComThoughtworksXstreamCoreJVM_canUseSunUnsafeReflectionProvider()) {
          IOSClass *cls = ComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_(@"com.thoughtworks.xstream.converters.reflection.SunUnsafeReflectionProvider");
          if (cls != nil) {
            @try {
              id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> provider = (id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) check_protocol_cast(ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_newInstanceWithIOSClass_withNSObjectArray_(
#line 96
              cls, nil), @protocol(ComThoughtworksXstreamConvertersReflectionReflectionProvider));
              ComThoughtworksXstreamCoreJVM_Test *t = (ComThoughtworksXstreamCoreJVM_Test *) check_class_cast([((id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(provider)) newInstanceWithIOSClass:ComThoughtworksXstreamCoreJVM_Test_class_()], [ComThoughtworksXstreamCoreJVM_Test class]);
              @try {
                [provider writeFieldWithId:t withNSString:@"o" withId:@"object" withIOSClass:ComThoughtworksXstreamCoreJVM_Test_class_()];
                [provider writeFieldWithId:t withNSString:@"c" withId:JavaLangCharacter_valueOfWithChar_('c') withIOSClass:ComThoughtworksXstreamCoreJVM_Test_class_()];
                [provider writeFieldWithId:t withNSString:@"b" withId:JavaLangByte_valueOfWithByte_((jbyte) 1) withIOSClass:ComThoughtworksXstreamCoreJVM_Test_class_()];
                [provider writeFieldWithId:t withNSString:@"s" withId:JavaLangShort_valueOfWithShort_((jshort) 1) withIOSClass:ComThoughtworksXstreamCoreJVM_Test_class_()];
                [provider writeFieldWithId:t withNSString:@"i" withId:JavaLangInteger_valueOfWithInt_(1) withIOSClass:ComThoughtworksXstreamCoreJVM_Test_class_()];
                [provider writeFieldWithId:t withNSString:@"l" withId:JavaLangLong_valueOfWithLong_(1) withIOSClass:ComThoughtworksXstreamCoreJVM_Test_class_()];
                [provider writeFieldWithId:t withNSString:@"f" withId:JavaLangFloat_valueOfWithFloat_(1) withIOSClass:ComThoughtworksXstreamCoreJVM_Test_class_()];
                [provider writeFieldWithId:t withNSString:@"d" withId:JavaLangDouble_valueOfWithDouble_(1) withIOSClass:ComThoughtworksXstreamCoreJVM_Test_class_()];
                [provider writeFieldWithId:t withNSString:@"bool" withId:JavaLangBoolean_get_TRUE__() withIOSClass:ComThoughtworksXstreamCoreJVM_Test_class_()];
                test = YES;
              }
              @catch (
#line 109
              JavaLangIncompatibleClassChangeError *e) {
                cls = nil;
              }
              @catch (
#line 111
              ComThoughtworksXstreamConvertersReflectionObjectAccessException *e) {
                cls = nil;
              }
              if (cls == nil) {
                cls = ComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_(@"com.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider");
              }
              type = cls;
            }
            @catch (
#line 118
            ComThoughtworksXstreamConvertersReflectionObjectAccessException *e) {
            }
          }
        }
        ComThoughtworksXstreamCoreJVM_reflectionProviderType_ = type;
        ComThoughtworksXstreamCoreJVM_canWriteWithUnsafe_ = test;
        id<JavaUtilComparator> comparator = new_ComThoughtworksXstreamCoreJVM_$1_init();
        
#line 129
        id<JavaUtilSortedMap> map = new_ComThoughtworksXstreamCoreUtilPresortedMap_initWithJavaUtilComparator_(comparator);
        (void) [map putWithId:@"one" withId:nil];
        (void) [map putWithId:@"two" withId:nil];
        @try {
          [new_JavaUtilTreeMap_initWithJavaUtilComparator_(comparator) putAllWithJavaUtilMap:map];
          test = YES;
        }
        @catch (
#line 135
        JavaLangRuntimeException *e) {
          test = NO;
        }
        ComThoughtworksXstreamCoreJVM_optimizedTreeMapPutAll_ = test;
        id<JavaUtilSortedSet> set = new_ComThoughtworksXstreamCoreUtilPresortedSet_initWithJavaUtilComparator_(comparator);
        [set addAllWithJavaUtilCollection:[map keySet]];
        @try {
          [new_JavaUtilTreeSet_initWithJavaUtilComparator_(comparator) addAllWithJavaUtilCollection:set];
          test = YES;
        }
        @catch (
#line 144
        JavaLangRuntimeException *e) {
          test = NO;
        }
        ComThoughtworksXstreamCoreJVM_optimizedTreeSetAddAll_ = test;
        @try {
          (void) [new_JavaTextSimpleDateFormat_initWithNSString_(@"z") parseWithNSString:@"UTC"];
          test = YES;
        }
        @catch (
#line 151
        JavaTextParseException *e) {
          test = NO;
        }
        ComThoughtworksXstreamCoreJVM_canParseUTCDateFormat__ = test;
        @try {
          test = (new_ComThoughtworksXstreamCoreUtilCustomObjectOutputStream_initWithComThoughtworksXstreamCoreUtilCustomObjectOutputStream_StreamCallback_(nil) != nil);
        }
        @catch (
#line 157
        JavaLangRuntimeException *e) {
          test = NO;
        }
        @catch (
#line 159
        JavaIoIOException *e) {
          test = NO;
        }
        ComThoughtworksXstreamCoreJVM_canCreateDerivedObjectOutputStream__ = test;
        
#line 164
        ComThoughtworksXstreamCoreJVM_isAWTAvailable__ = (ComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_withBoolean_(@"java.awt.Color", NO) != nil);
        ComThoughtworksXstreamCoreJVM_isSwingAvailable__ = (ComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_withBoolean_(@"javax.swing.LookAndFeel", NO) != nil);
        ComThoughtworksXstreamCoreJVM_isSQLAvailable__ = (ComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_(@"java.sql.Date") != nil);
      }
      J2OBJC_SET_INITIALIZED(ComThoughtworksXstreamCoreJVM)
    }
  }

+ (IOSObjectArray *)__annotations_init {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_is14 {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_is15 {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_is16 {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_loadClassWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_loadClassWithNSString_withBoolean_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_bestReflectionProvider {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_reverseFieldDefinition {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_supportsAWT {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_supportsSwing {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_supportsSQL {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_flushCache {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "JVM", NULL, 0x1, NULL, NULL },
    { "getMajorJavaVersion", NULL, "F", 0x1a, NULL, NULL },
    { "is14", NULL, "Z", 0x9, NULL, NULL },
    { "is15", NULL, "Z", 0x9, NULL, NULL },
    { "is16", NULL, "Z", 0x9, NULL, NULL },
    { "is17", NULL, "Z", 0x9, NULL, NULL },
    { "is18", NULL, "Z", 0x9, NULL, NULL },
    { "isIBM", NULL, "Z", 0xa, NULL, NULL },
    { "isAndroid", NULL, "Z", 0xa, NULL, NULL },
    { "loadClassForNameWithNSString:", "loadClassForName", "Ljava.lang.Class;", 0x9, NULL, NULL },
    { "loadClassWithNSString:", "loadClass", "Ljava.lang.Class;", 0x1, NULL, NULL },
    { "loadClassForNameWithNSString:withBoolean:", "loadClassForName", "Ljava.lang.Class;", 0x9, NULL, NULL },
    { "loadClassWithNSString:withBoolean:", "loadClass", "Ljava.lang.Class;", 0x1, NULL, NULL },
    { "newReflectionProvider", NULL, "Lcom.thoughtworks.xstream.converters.reflection.ReflectionProvider;", 0x9, NULL, NULL },
    { "newReflectionProviderWithComThoughtworksXstreamConvertersReflectionFieldDictionary:", "newReflectionProvider", "Lcom.thoughtworks.xstream.converters.reflection.ReflectionProvider;", 0x9, NULL, NULL },
    { "getStaxInputFactory", NULL, "Ljava.lang.Class;", 0x9, "Ljava.lang.ClassNotFoundException;", NULL },
    { "getStaxOutputFactory", NULL, "Ljava.lang.Class;", 0x9, "Ljava.lang.ClassNotFoundException;", NULL },
    { "bestReflectionProvider", NULL, "Lcom.thoughtworks.xstream.converters.reflection.ReflectionProvider;", 0x21, NULL, NULL },
    { "canUseSunUnsafeReflectionProvider", NULL, "Z", 0xa, NULL, NULL },
    { "canUseSunLimitedUnsafeReflectionProvider", NULL, "Z", 0xa, NULL, NULL },
    { "reverseFieldDefinition", NULL, "Z", 0x9, NULL, NULL },
    { "isAWTAvailable", NULL, "Z", 0x9, NULL, NULL },
    { "supportsAWT", NULL, "Z", 0x1, NULL, NULL },
    { "isSwingAvailable", NULL, "Z", 0x9, NULL, NULL },
    { "supportsSwing", NULL, "Z", 0x1, NULL, NULL },
    { "isSQLAvailable", NULL, "Z", 0x9, NULL, NULL },
    { "supportsSQL", NULL, "Z", 0x1, NULL, NULL },
    { "hasOptimizedTreeSetAddAll", NULL, "Z", 0x9, NULL, NULL },
    { "hasOptimizedTreeMapPutAll", NULL, "Z", 0x9, NULL, NULL },
    { "canParseUTCDateFormat", NULL, "Z", 0x9, NULL, NULL },
    { "canCreateDerivedObjectOutputStream", NULL, "Z", 0x9, NULL, NULL },
    { "flushCache", NULL, "V", 0x1, NULL, NULL },
    { "mainWithNSStringArray:", "main", "V", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "reflectionProvider_", NULL, 0x2, "Lcom.thoughtworks.xstream.converters.reflection.ReflectionProvider;", NULL, NULL,  },
    { "isAWTAvailable__", "isAWTAvailable", 0x1a, "Z", &ComThoughtworksXstreamCoreJVM_isAWTAvailable__, NULL,  },
    { "isSwingAvailable__", "isSwingAvailable", 0x1a, "Z", &ComThoughtworksXstreamCoreJVM_isSwingAvailable__, NULL,  },
    { "isSQLAvailable__", "isSQLAvailable", 0x1a, "Z", &ComThoughtworksXstreamCoreJVM_isSQLAvailable__, NULL,  },
    { "canAllocateWithUnsafe_", NULL, 0x1a, "Z", &ComThoughtworksXstreamCoreJVM_canAllocateWithUnsafe_, NULL,  },
    { "canWriteWithUnsafe_", NULL, 0x1a, "Z", &ComThoughtworksXstreamCoreJVM_canWriteWithUnsafe_, NULL,  },
    { "optimizedTreeSetAddAll_", NULL, 0x1a, "Z", &ComThoughtworksXstreamCoreJVM_optimizedTreeSetAddAll_, NULL,  },
    { "optimizedTreeMapPutAll_", NULL, 0x1a, "Z", &ComThoughtworksXstreamCoreJVM_optimizedTreeMapPutAll_, NULL,  },
    { "canParseUTCDateFormat__", "canParseUTCDateFormat", 0x1a, "Z", &ComThoughtworksXstreamCoreJVM_canParseUTCDateFormat__, NULL,  },
    { "canCreateDerivedObjectOutputStream__", "canCreateDerivedObjectOutputStream", 0x1a, "Z", &ComThoughtworksXstreamCoreJVM_canCreateDerivedObjectOutputStream__, NULL,  },
    { "vendor_", NULL, 0x1a, "Ljava.lang.String;", &ComThoughtworksXstreamCoreJVM_vendor_, NULL,  },
    { "majorJavaVersion_", NULL, 0x1a, "F", &ComThoughtworksXstreamCoreJVM_majorJavaVersion_, NULL,  },
    { "DEFAULT_JAVA_VERSION_", NULL, 0x1a, "F", NULL, NULL, .constantValue.asFloat = ComThoughtworksXstreamCoreJVM_DEFAULT_JAVA_VERSION },
    { "reverseFieldOrder_", NULL, 0x1a, "Z", NULL, NULL, .constantValue.asBOOL = ComThoughtworksXstreamCoreJVM_reverseFieldOrder },
    { "reflectionProviderType_", NULL, 0x1a, "Ljava.lang.Class;", &ComThoughtworksXstreamCoreJVM_reflectionProviderType_, NULL,  },
  };
  static const char *inner_classes[] = {"Lcom.thoughtworks.xstream.core.JVM$Test;"};
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreJVM = { 2, "JVM", "com.thoughtworks.xstream.core", NULL, 0x1, 33, methods, 15, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_ComThoughtworksXstreamCoreJVM;
}

@end


#line 173
void ComThoughtworksXstreamCoreJVM_init(ComThoughtworksXstreamCoreJVM *self) {
  (void) NSObject_init(self);
}


#line 173
ComThoughtworksXstreamCoreJVM *new_ComThoughtworksXstreamCoreJVM_init() {
  ComThoughtworksXstreamCoreJVM *self = [ComThoughtworksXstreamCoreJVM alloc];
  ComThoughtworksXstreamCoreJVM_init(self);
  return self;
}


#line 182
jfloat ComThoughtworksXstreamCoreJVM_getMajorJavaVersion() {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 183
  @try {
    return ComThoughtworksXstreamCoreJVM_isAndroid() ? 1.5f : JavaLangFloat_parseFloatWithNSString_(JavaLangSystem_getPropertyWithNSString_(
#line 185
    @"java.specification.version"));
  }
  @catch (
#line 186
  JavaLangNumberFormatException *e) {
    
#line 188
    return ComThoughtworksXstreamCoreJVM_DEFAULT_JAVA_VERSION;
  }
}


#line 196
jboolean ComThoughtworksXstreamCoreJVM_is14() {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 197
  return ComThoughtworksXstreamCoreJVM_majorJavaVersion_ >= 1.4f;
}


#line 205
jboolean ComThoughtworksXstreamCoreJVM_is15() {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 206
  return ComThoughtworksXstreamCoreJVM_majorJavaVersion_ >= 1.5f;
}


#line 214
jboolean ComThoughtworksXstreamCoreJVM_is16() {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 215
  return ComThoughtworksXstreamCoreJVM_majorJavaVersion_ >= 1.6f;
}

jboolean ComThoughtworksXstreamCoreJVM_is17() {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 222
  return ComThoughtworksXstreamCoreJVM_majorJavaVersion_ >= 1.7f;
}

jboolean ComThoughtworksXstreamCoreJVM_is18() {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 229
  return ComThoughtworksXstreamCoreJVM_majorJavaVersion_ >= 1.8f;
}


#line 232
jboolean ComThoughtworksXstreamCoreJVM_isIBM() {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 233
  return [((NSString *) nil_chk(ComThoughtworksXstreamCoreJVM_vendor_)) indexOfString:@"IBM"] != -1;
}

jboolean ComThoughtworksXstreamCoreJVM_isAndroid() {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 240
  return [((NSString *) nil_chk(ComThoughtworksXstreamCoreJVM_vendor_)) indexOfString:@"Android"] != -1;
}


#line 254
IOSClass *ComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_(NSString *name) {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 255
  return ComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_withBoolean_(name, YES);
}


#line 277
IOSClass *ComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_withBoolean_(NSString *name, jboolean initialize_) {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 278
  @try {
    IOSClass *clazz = IOSClass_forName_initialize_classLoader_(name, initialize_, [ComThoughtworksXstreamCoreJVM_class_() getClassLoader]);
    return clazz;
  }
  @catch (
#line 281
  JavaLangLinkageError *e) {
    return nil;
  }
  @catch (
#line 283
  JavaLangClassNotFoundException *e) {
    return nil;
  }
}


#line 303
id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> ComThoughtworksXstreamCoreJVM_newReflectionProvider() {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 304
  return (id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) check_protocol_cast(ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_newInstanceWithIOSClass_withNSObjectArray_(
#line 305
  ComThoughtworksXstreamCoreJVM_reflectionProviderType_, nil), @protocol(ComThoughtworksXstreamConvertersReflectionReflectionProvider));
}


#line 316
id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> ComThoughtworksXstreamCoreJVM_newReflectionProviderWithComThoughtworksXstreamConvertersReflectionFieldDictionary_(ComThoughtworksXstreamConvertersReflectionFieldDictionary *dictionary) {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 317
  return (id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) check_protocol_cast(ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_newInstanceWithIOSClass_withNSObjectArray_(ComThoughtworksXstreamCoreJVM_reflectionProviderType_, [IOSObjectArray newArrayWithObjects:(id[]){
#line 318
    dictionary } count:1 type:NSObject_class_()]), @protocol(ComThoughtworksXstreamConvertersReflectionReflectionProvider));
  }


#line 336
IOSClass *ComThoughtworksXstreamCoreJVM_getStaxInputFactory() {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 337
  if (ComThoughtworksXstreamCoreJVM_is16()) {
    if (ComThoughtworksXstreamCoreJVM_isIBM()) {
      return IOSClass_forName_(@"com.ibm.xml.xlxp.api.stax.XMLInputFactoryImpl");
    }
    else {
      
#line 341
      return IOSClass_forName_(@"com.sun.xml.internal.stream.XMLInputFactoryImpl");
    }
  }
  return nil;
}


#line 362
IOSClass *ComThoughtworksXstreamCoreJVM_getStaxOutputFactory() {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 363
  if (ComThoughtworksXstreamCoreJVM_is16()) {
    if (ComThoughtworksXstreamCoreJVM_isIBM()) {
      return IOSClass_forName_(@"com.ibm.xml.xlxp.api.stax.XMLOutputFactoryImpl");
    }
    else {
      
#line 367
      return IOSClass_forName_(@"com.sun.xml.internal.stream.XMLOutputFactoryImpl");
    }
  }
  return nil;
}


#line 384
jboolean ComThoughtworksXstreamCoreJVM_canUseSunUnsafeReflectionProvider() {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 385
  return ComThoughtworksXstreamCoreJVM_canAllocateWithUnsafe_ && ComThoughtworksXstreamCoreJVM_is14();
}


#line 388
jboolean ComThoughtworksXstreamCoreJVM_canUseSunLimitedUnsafeReflectionProvider() {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 389
  return ComThoughtworksXstreamCoreJVM_canWriteWithUnsafe_;
}


#line 396
jboolean ComThoughtworksXstreamCoreJVM_reverseFieldDefinition() {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 397
  return ComThoughtworksXstreamCoreJVM_reverseFieldOrder;
}


#line 405
jboolean ComThoughtworksXstreamCoreJVM_isAWTAvailable() {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 406
  return ComThoughtworksXstreamCoreJVM_isAWTAvailable__;
}


#line 424
jboolean ComThoughtworksXstreamCoreJVM_isSwingAvailable() {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 425
  return ComThoughtworksXstreamCoreJVM_isSwingAvailable__;
}


#line 443
jboolean ComThoughtworksXstreamCoreJVM_isSQLAvailable() {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 444
  return ComThoughtworksXstreamCoreJVM_isSQLAvailable__;
}


#line 462
jboolean ComThoughtworksXstreamCoreJVM_hasOptimizedTreeSetAddAll() {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 463
  return ComThoughtworksXstreamCoreJVM_optimizedTreeSetAddAll_;
}


#line 471
jboolean ComThoughtworksXstreamCoreJVM_hasOptimizedTreeMapPutAll() {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 472
  return ComThoughtworksXstreamCoreJVM_optimizedTreeMapPutAll_;
}


#line 475
jboolean ComThoughtworksXstreamCoreJVM_canParseUTCDateFormat() {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 476
  return ComThoughtworksXstreamCoreJVM_canParseUTCDateFormat__;
}

jboolean ComThoughtworksXstreamCoreJVM_canCreateDerivedObjectOutputStream() {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 483
  return ComThoughtworksXstreamCoreJVM_canCreateDerivedObjectOutputStream__;
}


#line 493
void ComThoughtworksXstreamCoreJVM_mainWithNSStringArray_(IOSObjectArray *args) {
  ComThoughtworksXstreamCoreJVM_initialize();
  
#line 494
  jboolean reverseJDK = NO;
  IOSObjectArray *fields = [JavaTextAttributedString_class_() getDeclaredFields];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fields))->size_; i++) {
    if ([((NSString *) nil_chk([((JavaLangReflectField *) nil_chk(IOSObjectArray_Get(fields, i))) getName])) isEqual:@"text"]) {
      reverseJDK = (i > 3);
      break;
    }
  }
  
#line 503
  jboolean reverseLocal = NO;
  fields = [ComThoughtworksXstreamCoreJVM_Test_class_() getDeclaredFields];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fields))->size_; i++) {
    if ([((NSString *) nil_chk([((JavaLangReflectField *) nil_chk(IOSObjectArray_Get(fields, i))) getName])) isEqual:@"o"]) {
      reverseLocal = (i > 3);
      break;
    }
  }
  
#line 512
  NSString *staxInputFactory = nil;
  @try {
    staxInputFactory = [((IOSClass *) nil_chk(ComThoughtworksXstreamCoreJVM_getStaxInputFactory())) getName];
  }
  @catch (
#line 515
  JavaLangClassNotFoundException *e) {
    staxInputFactory = [((JavaLangClassNotFoundException *) nil_chk(e)) getMessage];
  }
  @catch (
#line 517
  JavaLangNullPointerException *e) {
  }
  
#line 520
  NSString *staxOutputFactory = nil;
  @try {
    staxOutputFactory = [((IOSClass *) nil_chk(ComThoughtworksXstreamCoreJVM_getStaxOutputFactory())) getName];
  }
  @catch (
#line 523
  JavaLangClassNotFoundException *e) {
    staxOutputFactory = [((JavaLangClassNotFoundException *) nil_chk(e)) getMessage];
  }
  @catch (
#line 525
  JavaLangNullPointerException *e) {
  }
  
#line 528
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:@"XStream JVM diagnostics"];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$", @"java.specification.version: ", JavaLangSystem_getPropertyWithNSString_(
#line 530
  @"java.specification.version"))];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$", @"java.specification.vendor: ", JavaLangSystem_getPropertyWithNSString_(
#line 532
  @"java.specification.vendor"))];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$", @"java.specification.name: ", JavaLangSystem_getPropertyWithNSString_(@"java.specification.name"))];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$", @"java.vm.vendor: ", ComThoughtworksXstreamCoreJVM_vendor_)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$", @"java.vendor: ", JavaLangSystem_getPropertyWithNSString_(@"java.vendor"))];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$", @"java.vm.name: ", JavaLangSystem_getPropertyWithNSString_(@"java.vm.name"))];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$F", @"Version: ", ComThoughtworksXstreamCoreJVM_majorJavaVersion_)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"XStream support for enhanced Mode: ", ComThoughtworksXstreamCoreJVM_canUseSunUnsafeReflectionProvider())];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"XStream support for reduced Mode: ", ComThoughtworksXstreamCoreJVM_canUseSunLimitedUnsafeReflectionProvider())];
  
#line 541
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"Supports AWT: ", ComThoughtworksXstreamCoreJVM_isAWTAvailable())];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"Supports Swing: ", ComThoughtworksXstreamCoreJVM_isSwingAvailable())];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"Supports SQL: ", ComThoughtworksXstreamCoreJVM_isSQLAvailable())];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"Java Beans EventHandler present: ",
#line 545
  (ComThoughtworksXstreamCoreJVM_loadClassForNameWithNSString_(@"java.beans.EventHandler") != nil))];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$", @"Standard StAX XMLInputFactory: ", staxInputFactory)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$", @"Standard StAX XMLOutputFactory: ", staxOutputFactory)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"Optimized TreeSet.addAll: ", ComThoughtworksXstreamCoreJVM_hasOptimizedTreeSetAddAll())];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"Optimized TreeMap.putAll: ", ComThoughtworksXstreamCoreJVM_hasOptimizedTreeMapPutAll())];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"Can parse UTC date format: ", ComThoughtworksXstreamCoreJVM_canParseUTCDateFormat())];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"Can create derive ObjectOutputStream: ", ComThoughtworksXstreamCoreJVM_canCreateDerivedObjectOutputStream())];
  
#line 553
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"Reverse field order detected for JDK: ", reverseJDK)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"Reverse field order detected (only if JVM class itself has been compiled): ",
#line 556
  reverseLocal)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamCoreJVM)


#line 55
@implementation ComThoughtworksXstreamCoreJVM_Test


#line 66
- (instancetype)init {
  ComThoughtworksXstreamCoreJVM_Test_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Test", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "o_", NULL, 0x2, "Ljava.lang.Object;", NULL, NULL,  },
    { "c_", NULL, 0x2, "C", NULL, NULL,  },
    { "b_", NULL, 0x2, "B", NULL, NULL,  },
    { "s_", NULL, 0x2, "S", NULL, NULL,  },
    { "i_", NULL, 0x2, "I", NULL, NULL,  },
    { "l_", NULL, 0x2, "J", NULL, NULL,  },
    { "f_", NULL, 0x2, "F", NULL, NULL,  },
    { "d_", NULL, 0x2, "D", NULL, NULL,  },
    { "bool__", "bool", 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreJVM_Test = { 2, "Test", "com.thoughtworks.xstream.core", "JVM", 0x8, 1, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamCoreJVM_Test;
}

@end


#line 66
void ComThoughtworksXstreamCoreJVM_Test_init(ComThoughtworksXstreamCoreJVM_Test *self) {
  (void) NSObject_init(self);
  
#line 67
  @throw new_JavaLangUnsupportedOperationException_init();
}


#line 66
ComThoughtworksXstreamCoreJVM_Test *new_ComThoughtworksXstreamCoreJVM_Test_init() {
  ComThoughtworksXstreamCoreJVM_Test *self = [ComThoughtworksXstreamCoreJVM_Test alloc];
  ComThoughtworksXstreamCoreJVM_Test_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamCoreJVM_Test)

@implementation ComThoughtworksXstreamCoreJVM_$1


#line 125
- (jint)compareWithId:(id)o1
               withId:(id)o2 {
  @throw new_JavaLangRuntimeException_init();
}

- (instancetype)init {
  ComThoughtworksXstreamCoreJVM_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreJVM_$1 = { 2, "", "com.thoughtworks.xstream.core", "JVM", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamCoreJVM_$1;
}

@end

void ComThoughtworksXstreamCoreJVM_$1_init(ComThoughtworksXstreamCoreJVM_$1 *self) {
  (void) NSObject_init(self);
}

ComThoughtworksXstreamCoreJVM_$1 *new_ComThoughtworksXstreamCoreJVM_$1_init() {
  ComThoughtworksXstreamCoreJVM_$1 *self = [ComThoughtworksXstreamCoreJVM_$1 alloc];
  ComThoughtworksXstreamCoreJVM_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamCoreJVM_$1)
