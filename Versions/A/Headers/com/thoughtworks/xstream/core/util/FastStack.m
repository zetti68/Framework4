//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/util/FastStack.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/util/FastStack.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/thoughtworks/xstream/core/util/FastStack.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"


#line 20
@implementation ComThoughtworksXstreamCoreUtilFastStack


#line 25
- (instancetype)initWithInt:(jint)initialCapacity {
  if (self = [super init]) {
    
#line 26
    stack_ = [IOSObjectArray arrayWithLength:initialCapacity type:[IOSClass classWithClass:[NSObject class]]];
  }
  return self;
}


#line 29
- (id)pushWithId:(id)value {
  
#line 30
  if (pointer_ + 1 >= ((IOSObjectArray *) nil_chk(stack_))->size_) {
    [self resizeStackWithInt:stack_->size_ * 2];
  }
  IOSObjectArray_Set(stack_, pointer_++, value);
  return value;
}


#line 37
- (void)popSilently {
  
#line 38
  IOSObjectArray_Set(nil_chk(stack_), --pointer_, nil);
}


#line 41
- (id)pop {
  
#line 42
  id result = IOSObjectArray_Get(nil_chk(stack_), --pointer_);
  IOSObjectArray_Set(stack_, pointer_, nil);
  return result;
}


#line 47
- (id)peek {
  
#line 48
  return pointer_ == 0 ? nil : IOSObjectArray_Get(nil_chk(stack_), pointer_ - 1);
}


#line 51
- (id)replaceWithId:(id)value {
  
#line 52
  id result = IOSObjectArray_Get(nil_chk(stack_), pointer_ - 1);
  IOSObjectArray_Set(stack_, pointer_ - 1, value);
  return result;
}


#line 57
- (void)replaceSilentlyWithId:(id)value {
  
#line 58
  IOSObjectArray_Set(nil_chk(stack_), pointer_ - 1, value);
}


#line 61
- (jint)size {
  
#line 62
  return pointer_;
}


#line 65
- (jboolean)hasStuff {
  
#line 66
  return pointer_ > 0;
}


#line 69
- (id)getWithInt:(jint)i {
  
#line 70
  return IOSObjectArray_Get(nil_chk(stack_), i);
}


#line 73
- (void)resizeStackWithInt:(jint)newCapacity {
  
#line 74
  IOSObjectArray *newStack = [IOSObjectArray arrayWithLength:newCapacity type:[IOSClass classWithClass:[NSObject class]]];
  [JavaLangSystem arraycopyWithId:stack_ withInt:0 withId:newStack withInt:0 withInt:[JavaLangMath minWithInt:pointer_ withInt:newCapacity]];
  stack_ = newStack;
}

- (NSString *)description {
  
#line 80
  JavaLangStringBuffer *result = [[JavaLangStringBuffer alloc] initWithNSString:@"["];
  for (jint i = 0; i < pointer_; i++) {
    if (i > 0) {
      (void) [result appendWithNSString:@", "];
    }
    (void) [result appendWithId:IOSObjectArray_Get(nil_chk(stack_), i)];
  }
  (void) [result appendWithChar:']'];
  return [result description];
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamCoreUtilFastStack *)other {
  [super copyAllFieldsTo:other];
  other->pointer_ = pointer_;
  other->stack_ = stack_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "FastStack", NULL, 0x1, NULL },
    { "pushWithId:", "push", "Ljava.lang.Object;", 0x1, NULL },
    { "popSilently", NULL, "V", 0x1, NULL },
    { "pop", NULL, "Ljava.lang.Object;", 0x1, NULL },
    { "peek", NULL, "Ljava.lang.Object;", 0x1, NULL },
    { "replaceWithId:", "replace", "Ljava.lang.Object;", 0x1, NULL },
    { "replaceSilentlyWithId:", "replaceSilently", "V", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "hasStuff", NULL, "Z", 0x1, NULL },
    { "getWithInt:", "get", "Ljava.lang.Object;", 0x1, NULL },
    { "resizeStackWithInt:", "resizeStack", "V", 0x2, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "stack_", NULL, 0x2, "[Ljava.lang.Object;", NULL,  },
    { "pointer_", NULL, 0x2, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilFastStack = { "FastStack", "com.thoughtworks.xstream.core.util", NULL, 0x11, 12, methods, 2, fields, 0, NULL};
  return &_ComThoughtworksXstreamCoreUtilFastStack;
}

@end
