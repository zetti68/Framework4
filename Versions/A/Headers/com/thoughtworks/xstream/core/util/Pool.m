//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/util/Pool.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/util/Pool.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/thoughtworks/xstream/core/util/Pool.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/RuntimeException.h"


#line 19
@implementation ComThoughtworksXstreamCoreUtilPool


#line 32
- (instancetype)initWithInt:(jint)initialPoolSize
                    withInt:(jint)maxPoolSize
withComThoughtworksXstreamCoreUtilPool_Factory:(id<ComThoughtworksXstreamCoreUtilPool_Factory>)factory {
  if (self = [super init]) {
    mutex_ =
#line 30
    [[NSObject alloc] init];
    
#line 33
    self->initialPoolSize_ = initialPoolSize;
    
#line 34
    self->maxPoolSize_ = maxPoolSize;
    
#line 35
    self->factory_ = factory;
  }
  return self;
}


#line 38
- (id)fetchFromPool {
  
#line 39
  id result;
  @synchronized(mutex_) {
    if (pool_ == nil) {
      pool_ = [IOSObjectArray arrayWithLength:maxPoolSize_ type:[IOSClass classWithClass:[NSObject class]]];
      for (nextAvailable_ = initialPoolSize_; nextAvailable_ > 0; ) {
        [self putInPoolWithId:[((id<ComThoughtworksXstreamCoreUtilPool_Factory>) nil_chk(factory_)) newInstance]];
      }
    }
    while (nextAvailable_ == maxPoolSize_) {
      @try {
        [nil_chk(mutex_) wait];
      }
      @catch (
#line 50
      JavaLangInterruptedException *e) {
        @throw [[JavaLangRuntimeException alloc] initWithNSString:JreStrcat("$$", @"Interrupted whilst waiting for a free item in the pool : ",
#line 52
        [((JavaLangInterruptedException *) nil_chk(e)) getMessage])];
      }
    }
    result = IOSObjectArray_Get(nil_chk(pool_), nextAvailable_++);
    if (result == nil) {
      result = [((id<ComThoughtworksXstreamCoreUtilPool_Factory>) nil_chk(factory_)) newInstance];
      [self putInPoolWithId:result];
      ++nextAvailable_;
    }
  }
  return result;
}


#line 65
- (void)putInPoolWithId:(id)object {
  
#line 66
  @synchronized(mutex_) {
    IOSObjectArray_Set(nil_chk(pool_), --nextAvailable_, object);
    [nil_chk(mutex_) notify];
  }
}


#line 72
- (id)readResolve {
  
#line 73
  mutex_ = [[NSObject alloc] init];
  return self;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamCoreUtilPool *)other {
  [super copyAllFieldsTo:other];
  other->factory_ = factory_;
  other->initialPoolSize_ = initialPoolSize_;
  other->maxPoolSize_ = maxPoolSize_;
  other->mutex_ = mutex_;
  other->nextAvailable_ = nextAvailable_;
  other->pool_ = pool_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withComThoughtworksXstreamCoreUtilPool_Factory:", "Pool", NULL, 0x1, NULL },
    { "fetchFromPool", NULL, "Ljava.lang.Object;", 0x1, NULL },
    { "putInPoolWithId:", "putInPool", "V", 0x4, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "initialPoolSize_", NULL, 0x12, "I", NULL,  },
    { "maxPoolSize_", NULL, 0x12, "I", NULL,  },
    { "factory_", NULL, 0x12, "Lcom.thoughtworks.xstream.core.util.Pool$Factory;", NULL,  },
    { "pool_", NULL, 0x82, "[Ljava.lang.Object;", NULL,  },
    { "nextAvailable_", NULL, 0x82, "I", NULL,  },
    { "mutex_", NULL, 0x82, "Ljava.lang.Object;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilPool = { "Pool", "com.thoughtworks.xstream.core.util", NULL, 0x1, 4, methods, 6, fields, 0, NULL};
  return &_ComThoughtworksXstreamCoreUtilPool;
}

@end

@interface ComThoughtworksXstreamCoreUtilPool_Factory : NSObject
@end

@implementation ComThoughtworksXstreamCoreUtilPool_Factory

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newInstance", NULL, "Ljava.lang.Object;", 0x401, NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilPool_Factory = { "Factory", "com.thoughtworks.xstream.core.util", "Pool", 0x201, 1, methods, 0, NULL, 0, NULL};
  return &_ComThoughtworksXstreamCoreUtilPool_Factory;
}

@end

