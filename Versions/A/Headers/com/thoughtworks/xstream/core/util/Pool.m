//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/core/util/Pool.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/core/util/Pool.java"

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/core/util/Pool.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/RuntimeException.h"

@interface ComThoughtworksXstreamCoreUtilPool () {
 @public
  jint initialPoolSize_;
  jint maxPoolSize_;
  id<ComThoughtworksXstreamCoreUtilPool_Factory> factory_;
  IOSObjectArray *pool_;
  jint nextAvailable_;
  id mutex_;
}

- (id)readResolve;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreUtilPool, factory_, id<ComThoughtworksXstreamCoreUtilPool_Factory>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreUtilPool, pool_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreUtilPool, mutex_, id)

@interface ComThoughtworksXstreamCoreUtilPool_Factory : NSObject
@end


#line 19
@implementation ComThoughtworksXstreamCoreUtilPool


#line 32
- (instancetype)initWithInt:(jint)initialPoolSize
                    withInt:(jint)maxPoolSize
withComThoughtworksXstreamCoreUtilPool_Factory:(id<ComThoughtworksXstreamCoreUtilPool_Factory>)factory {
  ComThoughtworksXstreamCoreUtilPool_initWithInt_withInt_withComThoughtworksXstreamCoreUtilPool_Factory_(self, initialPoolSize, maxPoolSize, factory);
  return self;
}


#line 38
- (id)fetchFromPool {
  id result;
  @synchronized(mutex_) {
    if (pool_ == nil) {
      pool_ = [IOSObjectArray newArrayWithLength:maxPoolSize_ type:NSObject_class_()];
      for (nextAvailable_ = initialPoolSize_; nextAvailable_ > 0; ) {
        [self putInPoolWithId:[((id<ComThoughtworksXstreamCoreUtilPool_Factory>) nil_chk(factory_)) newInstance]];
      }
    }
    while (nextAvailable_ == maxPoolSize_) {
      @try {
        [nil_chk(mutex_) wait];
      }
      @catch (
#line 50
      JavaLangInterruptedException *e) {
        @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Interrupted whilst waiting for a free item in the pool : ",
#line 52
        [((JavaLangInterruptedException *) nil_chk(e)) getMessage]));
      }
    }
    result = IOSObjectArray_Get(nil_chk(pool_), nextAvailable_++);
    if (result == nil) {
      result = [((id<ComThoughtworksXstreamCoreUtilPool_Factory>) nil_chk(factory_)) newInstance];
      [self putInPoolWithId:result];
      ++nextAvailable_;
    }
  }
  return result;
}


#line 65
- (void)putInPoolWithId:(id)object {
  @synchronized(mutex_) {
    (void) IOSObjectArray_Set(nil_chk(pool_), --nextAvailable_, object);
    [nil_chk(mutex_) notify];
  }
}

- (id)readResolve {
  mutex_ = new_NSObject_init();
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withComThoughtworksXstreamCoreUtilPool_Factory:", "Pool", NULL, 0x1, NULL, NULL },
    { "fetchFromPool", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "putInPoolWithId:", "putInPool", "V", 0x4, NULL, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "initialPoolSize_", NULL, 0x12, "I", NULL, NULL,  },
    { "maxPoolSize_", NULL, 0x12, "I", NULL, NULL,  },
    { "factory_", NULL, 0x12, "Lcom.thoughtworks.xstream.core.util.Pool$Factory;", NULL, NULL,  },
    { "pool_", NULL, 0x82, "[Ljava.lang.Object;", NULL, NULL,  },
    { "nextAvailable_", NULL, 0x82, "I", NULL, NULL,  },
    { "mutex_", NULL, 0x82, "Ljava.lang.Object;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lcom.thoughtworks.xstream.core.util.Pool$Factory;"};
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilPool = { 2, "Pool", "com.thoughtworks.xstream.core.util", NULL, 0x1, 4, methods, 6, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_ComThoughtworksXstreamCoreUtilPool;
}

@end


#line 32
void ComThoughtworksXstreamCoreUtilPool_initWithInt_withInt_withComThoughtworksXstreamCoreUtilPool_Factory_(ComThoughtworksXstreamCoreUtilPool *self, jint initialPoolSize, jint maxPoolSize, id<ComThoughtworksXstreamCoreUtilPool_Factory> factory) {
  (void) NSObject_init(self);
  self->mutex_ = new_NSObject_init();
  
#line 33
  self->initialPoolSize_ = initialPoolSize;
  self->maxPoolSize_ = maxPoolSize;
  self->factory_ = factory;
}


#line 32
ComThoughtworksXstreamCoreUtilPool *new_ComThoughtworksXstreamCoreUtilPool_initWithInt_withInt_withComThoughtworksXstreamCoreUtilPool_Factory_(jint initialPoolSize, jint maxPoolSize, id<ComThoughtworksXstreamCoreUtilPool_Factory> factory) {
  ComThoughtworksXstreamCoreUtilPool *self = [ComThoughtworksXstreamCoreUtilPool alloc];
  ComThoughtworksXstreamCoreUtilPool_initWithInt_withInt_withComThoughtworksXstreamCoreUtilPool_Factory_(self, initialPoolSize, maxPoolSize, factory);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamCoreUtilPool)


#line 21
@implementation ComThoughtworksXstreamCoreUtilPool_Factory

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newInstance", NULL, "Ljava.lang.Object;", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilPool_Factory = { 2, "Factory", "com.thoughtworks.xstream.core.util", "Pool", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamCoreUtilPool_Factory;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamCoreUtilPool_Factory)
