//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/util/Base64Encoder.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/util/Base64Encoder.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/thoughtworks/xstream/core/util/Base64Encoder.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/lang/Error.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"

BOOL ComThoughtworksXstreamCoreUtilBase64Encoder_initialized = NO;


#line 30
@implementation ComThoughtworksXstreamCoreUtilBase64Encoder

IOSCharArray * ComThoughtworksXstreamCoreUtilBase64Encoder_SIXTY_FOUR_CHARS_;
IOSIntArray * ComThoughtworksXstreamCoreUtilBase64Encoder_REVERSE_MAPPING_;


#line 58
- (NSString *)encodeWithByteArray:(IOSByteArray *)input {
  
#line 59
  JavaLangStringBuffer *result = [[JavaLangStringBuffer alloc] init];
  jint outputCharCount = 0;
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(input))->size_; i += 3) {
    jint remaining = [JavaLangMath minWithInt:3 withInt:input->size_ - i];
    jint oneBigNumber = ((LShift32((IOSByteArray_Get(input, i) & (jint) 0xff), 16)) | (LShift32((remaining <= 1 ? 0 : IOSByteArray_Get(input, i + 1) & (jint) 0xff), 8))) | (remaining <= 2 ? 0 : IOSByteArray_Get(input, i + 2) & (jint) 0xff);
    for (jint j = 0; j < 4; j++) (void) [result appendWithChar:remaining + 1 > j ? IOSCharArray_Get(nil_chk(ComThoughtworksXstreamCoreUtilBase64Encoder_SIXTY_FOUR_CHARS_), (jint) 0x3f & (RShift32(oneBigNumber, 6 * (3 - j)))) : '='];
    if ((outputCharCount += 4) % 76 == 0) (void) [result appendWithChar:0x000a];
  }
  return [result description];
}


#line 70
- (IOSByteArray *)decodeWithNSString:(NSString *)input {
  
#line 71
  @try {
    JavaIoByteArrayOutputStream *out = [[JavaIoByteArrayOutputStream alloc] init];
    JavaIoStringReader *in = [[JavaIoStringReader alloc] initWithNSString:input];
    for (jint i = 0; i < ((jint) [((NSString *) nil_chk(input)) length]); i += 4) {
      IOSIntArray *a = [IOSIntArray arrayWithInts:(jint[]){ [self mapCharToIntWithJavaIoReader:in], [self mapCharToIntWithJavaIoReader:in], [self mapCharToIntWithJavaIoReader:in], [self mapCharToIntWithJavaIoReader:in] } count:4];
      jint oneBigNumber = (((LShift32((IOSIntArray_Get(a, 0) & (jint) 0x3f), 18)) | (LShift32((IOSIntArray_Get(a, 1) & (jint) 0x3f), 12))) | (LShift32((IOSIntArray_Get(a, 2) & (jint) 0x3f), 6))) | (IOSIntArray_Get(a, 3) & (jint) 0x3f);
      for (jint j = 0; j < 3; j++) if (IOSIntArray_Get(a, j + 1) >= 0) [out writeWithInt:(jint) 0xff & (RShift32(oneBigNumber, 8 * (2 - j)))];
    }
    return [out toByteArray];
  }
  @catch (
#line 80
  JavaIoIOException *e) {
    @throw [[JavaLangError alloc] initWithNSString:JreStrcat("@$$", e, @": ", [((JavaIoIOException *) nil_chk(e)) getMessage])];
  }
}


#line 85
- (jint)mapCharToIntWithJavaIoReader:(JavaIoReader *)input {
  
#line 86
  jint c;
  while ((c = [((JavaIoReader *) nil_chk(input)) read]) != -1) {
    jint result = IOSIntArray_Get(nil_chk(ComThoughtworksXstreamCoreUtilBase64Encoder_REVERSE_MAPPING_), c);
    if (result != 0) return result - 1;
    if (c == '=') return -1;
  }
  return -1;
}

- (instancetype)init {
  return [super init];
}

+ (void)initialize {
  if (self == [ComThoughtworksXstreamCoreUtilBase64Encoder class]) {
    ComThoughtworksXstreamCoreUtilBase64Encoder_SIXTY_FOUR_CHARS_ =
#line 51
    [@"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" toCharArray];
    ComThoughtworksXstreamCoreUtilBase64Encoder_REVERSE_MAPPING_ = [IOSIntArray arrayWithLength:
#line 52
    123];
    {
      
#line 55
      for (jint i = 0; i < ((IOSCharArray *) nil_chk(ComThoughtworksXstreamCoreUtilBase64Encoder_SIXTY_FOUR_CHARS_))->size_; i++) *IOSIntArray_GetRef(ComThoughtworksXstreamCoreUtilBase64Encoder_REVERSE_MAPPING_, IOSCharArray_Get(ComThoughtworksXstreamCoreUtilBase64Encoder_SIXTY_FOUR_CHARS_, i)) = i + 1;
    }
    ComThoughtworksXstreamCoreUtilBase64Encoder_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "encodeWithByteArray:", "encode", "Ljava.lang.String;", 0x1, NULL },
    { "decodeWithNSString:", "decode", "[B", 0x1, NULL },
    { "mapCharToIntWithJavaIoReader:", "mapCharToInt", "I", 0x2, "Ljava.io.IOException;" },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "SIXTY_FOUR_CHARS_", NULL, 0x1a, "[C", &ComThoughtworksXstreamCoreUtilBase64Encoder_SIXTY_FOUR_CHARS_,  },
    { "REVERSE_MAPPING_", NULL, 0x1a, "[I", &ComThoughtworksXstreamCoreUtilBase64Encoder_REVERSE_MAPPING_,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilBase64Encoder = { "Base64Encoder", "com.thoughtworks.xstream.core.util", NULL, 0x1, 4, methods, 2, fields, 0, NULL};
  return &_ComThoughtworksXstreamCoreUtilBase64Encoder;
}

@end
