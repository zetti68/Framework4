//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/util/OrderRetainingMap.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/util/OrderRetainingMap.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/thoughtworks/xstream/core/util/OrderRetainingMap.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"


#line 25
@implementation ComThoughtworksXstreamCoreUtilOrderRetainingMap


#line 30
- (instancetype)init {
  if (self =
#line 31
  [super init]) {
    keyOrder_ =
#line 27
    [[ComThoughtworksXstreamCoreUtilOrderRetainingMap_ArraySet alloc] init];
    valueOrder_ =
#line 28
    [[JavaUtilArrayList alloc] init];
  }
  return self;
}


#line 34
- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)m {
  if (self =
#line 35
  [super init]) {
    keyOrder_ =
#line 27
    [[ComThoughtworksXstreamCoreUtilOrderRetainingMap_ArraySet alloc] init];
    valueOrder_ =
#line 28
    [[JavaUtilArrayList alloc] init];
    
#line 36
    [self putAllWithJavaUtilMap:m];
  }
  return self;
}


#line 39
- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)m {
  
#line 40
  for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(m)) entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) check_protocol_cast([iter next], @protocol(JavaUtilMap_Entry));
    (void) [self putWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withId:[entry_ getValue]];
  }
}


#line 46
- (id)putWithId:(id)key
         withId:(id)value {
  
#line 47
  jint idx = [((ComThoughtworksXstreamCoreUtilOrderRetainingMap_ArraySet *) nil_chk(keyOrder_)) lastIndexOfWithId:key];
  if (idx < 0) {
    [keyOrder_ addWithId:key];
    [((id<JavaUtilList>) nil_chk(valueOrder_)) addWithId:value];
  }
  else {
    
#line 52
    (void) [((id<JavaUtilList>) nil_chk(valueOrder_)) setWithInt:idx withId:value];
  }
  return [super putWithId:key withId:value];
}


#line 57
- (id)removeWithId:(id)key {
  
#line 58
  jint idx = [((ComThoughtworksXstreamCoreUtilOrderRetainingMap_ArraySet *) nil_chk(keyOrder_)) lastIndexOfWithId:key];
  if (idx != 0) {
    (void) [keyOrder_ removeWithInt:idx];
    (void) [((id<JavaUtilList>) nil_chk(valueOrder_)) removeWithInt:idx];
  }
  return [super removeWithId:key];
}


#line 66
- (void)clear {
  
#line 67
  [((ComThoughtworksXstreamCoreUtilOrderRetainingMap_ArraySet *) nil_chk(keyOrder_)) clear];
  [((id<JavaUtilList>) nil_chk(valueOrder_)) clear];
  [super clear];
}


#line 72
- (id<JavaUtilCollection>)values {
  
#line 73
  return [JavaUtilCollections unmodifiableListWithJavaUtilList:valueOrder_];
}


#line 76
- (id<JavaUtilSet>)keySet {
  
#line 77
  return [JavaUtilCollections unmodifiableSetWithJavaUtilSet:keyOrder_];
}


#line 80
- (id<JavaUtilSet>)entrySet {
  
#line 81
  IOSObjectArray *entries = [IOSObjectArray arrayWithLength:[self size] type:[IOSClass classWithProtocol:@protocol(JavaUtilMap_Entry)]];
  for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([super entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) check_protocol_cast([iter next], @protocol(JavaUtilMap_Entry));
    IOSObjectArray_Set(entries, [((ComThoughtworksXstreamCoreUtilOrderRetainingMap_ArraySet *) nil_chk(keyOrder_)) indexOfWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]], entry_);
  }
  id<JavaUtilSet> set = [[ComThoughtworksXstreamCoreUtilOrderRetainingMap_ArraySet alloc] init];
  [set addAllWithJavaUtilCollection:[JavaUtilArrays asListWithNSObjectArray:entries]];
  return [JavaUtilCollections unmodifiableSetWithJavaUtilSet:set];
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamCoreUtilOrderRetainingMap *)other {
  [super copyAllFieldsTo:other];
  other->keyOrder_ = keyOrder_;
  other->valueOrder_ = valueOrder_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "OrderRetainingMap", NULL, 0x1, NULL },
    { "initWithJavaUtilMap:", "OrderRetainingMap", NULL, 0x1, NULL },
    { "putAllWithJavaUtilMap:", "putAll", "V", 0x1, NULL },
    { "putWithId:withId:", "put", "Ljava.lang.Object;", 0x1, NULL },
    { "removeWithId:", "remove", "Ljava.lang.Object;", 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "values", NULL, "Ljava.util.Collection;", 0x1, NULL },
    { "keySet", NULL, "Ljava.util.Set;", 0x1, NULL },
    { "entrySet", NULL, "Ljava.util.Set;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "keyOrder_", NULL, 0x2, "Lcom.thoughtworks.xstream.core.util.OrderRetainingMap$ArraySet;", NULL,  },
    { "valueOrder_", NULL, 0x2, "Ljava.util.List;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilOrderRetainingMap = { "OrderRetainingMap", "com.thoughtworks.xstream.core.util", NULL, 0x1, 9, methods, 2, fields, 0, NULL};
  return &_ComThoughtworksXstreamCoreUtilOrderRetainingMap;
}

@end


#line 91
@implementation ComThoughtworksXstreamCoreUtilOrderRetainingMap_ArraySet

- (instancetype)init {
  return [super init];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilOrderRetainingMap_ArraySet = { "ArraySet", "com.thoughtworks.xstream.core.util", "OrderRetainingMap", 0xa, 1, methods, 0, NULL, 0, NULL};
  return &_ComThoughtworksXstreamCoreUtilOrderRetainingMap_ArraySet;
}

@end
