//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/util/HierarchicalStreams.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/util/HierarchicalStreams.java"

#include "IOSClass.h"
#include "com/thoughtworks/xstream/core/util/HierarchicalStreams.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"


#line 23
@implementation ComThoughtworksXstreamCoreUtilHierarchicalStreams

+ (IOSClass *)readClassTypeWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
                                         withComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper {
  
#line 26
  NSString *classAttribute = [ComThoughtworksXstreamCoreUtilHierarchicalStreams readClassAttributeWithComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamMapperMapper:mapper];
  IOSClass *type;
  if (classAttribute == nil) {
    type = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper)) realClassWithNSString:[((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader)) getNodeName]];
  }
  else {
    
#line 31
    type = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper)) realClassWithNSString:classAttribute];
  }
  return type;
}


#line 36
+ (NSString *)readClassAttributeWithComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
                                              withComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper {
  
#line 37
  NSString *attributeName = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper)) aliasForSystemAttributeWithNSString:@"resolves-to"];
  NSString *classAttribute = attributeName == nil ? nil : [((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader)) getAttributeWithNSString:attributeName];
  if (classAttribute == nil) {
    attributeName = [mapper aliasForSystemAttributeWithNSString:@"class"];
    if (attributeName != nil) {
      classAttribute = [((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader)) getAttributeWithNSString:attributeName];
    }
  }
  return classAttribute;
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "readClassTypeWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamMapperMapper:", "readClassType", "Ljava.lang.Class;", 0x9, NULL },
    { "readClassAttributeWithComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamMapperMapper:", "readClassAttribute", "Ljava.lang.String;", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilHierarchicalStreams = { "HierarchicalStreams", "com.thoughtworks.xstream.core.util", NULL, 0x1, 3, methods, 0, NULL, 0, NULL};
  return &_ComThoughtworksXstreamCoreUtilHierarchicalStreams;
}

@end
