//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/util/QuickWriter.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/util/QuickWriter.java"

#include "IOSPrimitiveArray.h"
#include "com/thoughtworks/xstream/core/util/QuickWriter.h"
#include "com/thoughtworks/xstream/io/StreamException.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/System.h"


#line 19
@implementation ComThoughtworksXstreamCoreUtilQuickWriter


#line 25
- (instancetype)initWithJavaIoWriter:(JavaIoWriter *)writer {
  return
#line 26
  [self initComThoughtworksXstreamCoreUtilQuickWriterWithJavaIoWriter:writer withInt:1024];
}


#line 29
- (instancetype)initComThoughtworksXstreamCoreUtilQuickWriterWithJavaIoWriter:(JavaIoWriter *)writer
                                                                      withInt:(jint)bufferSize {
  if (self = [super init]) {
    self->writer_ = writer;
    
#line 31
    buffer_ = [IOSCharArray arrayWithLength:bufferSize];
  }
  return self;
}

- (instancetype)initWithJavaIoWriter:(JavaIoWriter *)writer
                             withInt:(jint)bufferSize {
  return [self initComThoughtworksXstreamCoreUtilQuickWriterWithJavaIoWriter:
#line 29
writer withInt:bufferSize];
}


#line 34
- (void)writeWithNSString:(NSString *)str {
  
#line 35
  jint len = ((jint) [((NSString *) nil_chk(str)) length]);
  if (pointer_ + len >= ((IOSCharArray *) nil_chk(buffer_))->size_) {
    [self flush];
    if (len > buffer_->size_) {
      [self rawWithCharArray:[str toCharArray]];
      return;
    }
  }
  [str getChars:0 sourceEnd:len destination:buffer_ destinationBegin:pointer_];
  pointer_ += len;
}


#line 47
- (void)writeWithChar:(jchar)c {
  
#line 48
  if (pointer_ + 1 >= ((IOSCharArray *) nil_chk(buffer_))->size_) {
    [self flush];
    if (buffer_->size_ == 0) {
      [self rawWithChar:c];
      return;
    }
  }
  *IOSCharArray_GetRef(buffer_, pointer_++) = c;
}


#line 58
- (void)writeWithCharArray:(IOSCharArray *)c {
  
#line 59
  jint len = ((IOSCharArray *) nil_chk(c))->size_;
  if (pointer_ + len >= ((IOSCharArray *) nil_chk(buffer_))->size_) {
    [self flush];
    if (len > buffer_->size_) {
      [self rawWithCharArray:c];
      return;
    }
  }
  [JavaLangSystem arraycopyWithId:c withInt:0 withId:buffer_ withInt:pointer_ withInt:len];
  pointer_ += len;
}


#line 71
- (void)flush {
  
#line 72
  @try {
    [((JavaIoWriter *) nil_chk(writer_)) writeWithCharArray:buffer_ withInt:0 withInt:pointer_];
    pointer_ = 0;
    [writer_ flush];
  }
  @catch (
#line 76
  JavaIoIOException *e) {
    @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithJavaLangThrowable:e];
  }
}


#line 81
- (void)close {
  
#line 82
  @try {
    [((JavaIoWriter *) nil_chk(writer_)) writeWithCharArray:buffer_ withInt:0 withInt:pointer_];
    pointer_ = 0;
    [writer_ close];
  }
  @catch (
#line 86
  JavaIoIOException *e) {
    @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithJavaLangThrowable:e];
  }
}


#line 91
- (void)rawWithCharArray:(IOSCharArray *)c {
  
#line 92
  @try {
    [((JavaIoWriter *) nil_chk(writer_)) writeWithCharArray:c];
    [writer_ flush];
  }
  @catch (
#line 95
  JavaIoIOException *e) {
    @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithJavaLangThrowable:e];
  }
}


#line 100
- (void)rawWithChar:(jchar)c {
  
#line 101
  @try {
    [((JavaIoWriter *) nil_chk(writer_)) writeWithInt:c];
    [writer_ flush];
  }
  @catch (
#line 104
  JavaIoIOException *e) {
    @throw [[ComThoughtworksXstreamIoStreamException alloc] initWithJavaLangThrowable:e];
  }
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamCoreUtilQuickWriter *)other {
  [super copyAllFieldsTo:other];
  other->buffer_ = buffer_;
  other->pointer_ = pointer_;
  other->writer_ = writer_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoWriter:", "QuickWriter", NULL, 0x1, NULL },
    { "initWithJavaIoWriter:withInt:", "QuickWriter", NULL, 0x1, NULL },
    { "writeWithNSString:", "write", "V", 0x1, NULL },
    { "writeWithChar:", "write", "V", 0x1, NULL },
    { "writeWithCharArray:", "write", "V", 0x1, NULL },
    { "flush", NULL, "V", 0x1, NULL },
    { "close", NULL, "V", 0x1, NULL },
    { "rawWithCharArray:", "raw", "V", 0x2, NULL },
    { "rawWithChar:", "raw", "V", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "writer_", NULL, 0x12, "Ljava.io.Writer;", NULL,  },
    { "buffer_", NULL, 0x2, "[C", NULL,  },
    { "pointer_", NULL, 0x2, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilQuickWriter = { "QuickWriter", "com.thoughtworks.xstream.core.util", NULL, 0x1, 9, methods, 3, fields, 0, NULL};
  return &_ComThoughtworksXstreamCoreUtilQuickWriter;
}

@end
