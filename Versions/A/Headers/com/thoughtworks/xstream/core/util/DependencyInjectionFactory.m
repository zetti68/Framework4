//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/core/util/DependencyInjectionFactory.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/core/util/DependencyInjectionFactory.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/reflection/ObjectAccessException.h"
#include "com/thoughtworks/xstream/core/util/DependencyInjectionFactory.h"
#include "com/thoughtworks/xstream/core/util/Primitives.h"
#include "com/thoughtworks/xstream/core/util/TypedNull.h"
#include "java/lang/ExceptionInInitializerError.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/Integer.h"
#include "java/lang/SecurityException.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/BitSet.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"

@interface ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue : NSObject {
 @public
  IOSClass *type_;
  id value_;
}

- (instancetype)initWithIOSClass:(IOSClass *)type
                          withId:(id)value;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue)

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue, type_, IOSClass *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue, value_, id)

__attribute__((unused)) static void ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue_initWithIOSClass_withId_(ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue *self, IOSClass *type, id value);

__attribute__((unused)) static ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue *new_ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue_initWithIOSClass_withId_(IOSClass *type, id value) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue)

@interface ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(id)o1
               withId:(id)o2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_$1)

__attribute__((unused)) static void ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_$1_init(ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_$1 *self);

__attribute__((unused)) static ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_$1 *new_ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_$1)


#line 30
@implementation ComThoughtworksXstreamCoreUtilDependencyInjectionFactory


#line 46
+ (id)newInstanceWithIOSClass:(IOSClass *)type
            withNSObjectArray:(IOSObjectArray *)dependencies {
  return ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_newInstanceWithIOSClass_withNSObjectArray_(type, dependencies);
}


#line 65
+ (id)newInstanceWithIOSClass:(IOSClass *)type
            withNSObjectArray:(IOSObjectArray *)dependencies
           withJavaUtilBitSet:(JavaUtilBitSet *)usedDependencies {
  return ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_newInstanceWithIOSClass_withNSObjectArray_withJavaUtilBitSet_(type, dependencies, usedDependencies);
}

- (instancetype)init {
  ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newInstanceWithIOSClass:withNSObjectArray:", "newInstance", "Ljava.lang.Object;", 0x9, NULL, NULL },
    { "newInstanceWithIOSClass:withNSObjectArray:withJavaUtilBitSet:", "newInstance", "Ljava.lang.Object;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const char *inner_classes[] = {"Lcom.thoughtworks.xstream.core.util.DependencyInjectionFactory$TypedValue;"};
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilDependencyInjectionFactory = { 2, "DependencyInjectionFactory", "com.thoughtworks.xstream.core.util", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_ComThoughtworksXstreamCoreUtilDependencyInjectionFactory;
}

@end


#line 46
id ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_newInstanceWithIOSClass_withNSObjectArray_(IOSClass *type, IOSObjectArray *dependencies) {
  ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_initialize();
  
#line 47
  return ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_newInstanceWithIOSClass_withNSObjectArray_withJavaUtilBitSet_(type, dependencies, nil);
}


#line 65
id ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_newInstanceWithIOSClass_withNSObjectArray_withJavaUtilBitSet_(IOSClass *type, IOSObjectArray *dependencies, JavaUtilBitSet *usedDependencies) {
  ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_initialize();
  
#line 66
  if (dependencies != nil && dependencies->size_ > 63) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"More than 63 arguments are not supported");
  }
  JavaLangReflectConstructor *bestMatchingCtor = nil;
  JavaUtilArrayList *matchingDependencies = new_JavaUtilArrayList_init();
  id<JavaUtilList> possibleMatchingDependencies = nil;
  jlong usedDeps = 0;
  jlong possibleUsedDeps = 0;
  
#line 75
  if (dependencies != nil && dependencies->size_ > 0) {
    
#line 77
    IOSObjectArray *ctors = [((IOSClass *) nil_chk(type)) getConstructors];
    if (((IOSObjectArray *) nil_chk(ctors))->size_ > 1) {
      JavaUtilArrays_sortWithNSObjectArray_withJavaUtilComparator_(ctors, new_ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_$1_init());
    }
    
#line 87
    IOSObjectArray *typedDependencies = [IOSObjectArray newArrayWithLength:dependencies->size_ type:ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue_class_()];
    for (jint i = 0; i < dependencies->size_; i++) {
      id dependency = IOSObjectArray_Get(dependencies, i);
      IOSClass *depType = [nil_chk(dependency) getClass];
      if ([depType isPrimitive]) {
        depType = ComThoughtworksXstreamCoreUtilPrimitives_boxWithIOSClass_(depType);
      }
      else
#line 93
      if (depType == ComThoughtworksXstreamCoreUtilTypedNull_class_()) {
        depType = [((ComThoughtworksXstreamCoreUtilTypedNull *) check_class_cast(dependency, [ComThoughtworksXstreamCoreUtilTypedNull class])) getType];
        dependency = nil;
      }
      
#line 98
      (void) IOSObjectArray_Set(typedDependencies, i, new_ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue_initWithIOSClass_withId_(depType, dependency));
    }
    
#line 101
    JavaLangReflectConstructor *possibleCtor = nil;
    jint arity = JavaLangInteger_MAX_VALUE;
    for (jint i = 0; bestMatchingCtor == nil && i < ctors->size_; i++) {
      JavaLangReflectConstructor *constructor = IOSObjectArray_Get(ctors, i);
      IOSObjectArray *parameterTypes = [((JavaLangReflectConstructor *) nil_chk(constructor)) getParameterTypes];
      if (((IOSObjectArray *) nil_chk(parameterTypes))->size_ > dependencies->size_) {
        continue;
      }
      else
#line 108
      if (parameterTypes->size_ == 0) {
        if (possibleCtor == nil) {
          bestMatchingCtor = constructor;
        }
        break;
      }
      if (arity > parameterTypes->size_) {
        if (possibleCtor != nil) {
          continue;
        }
        arity = parameterTypes->size_;
      }
      
#line 121
      for (jint j = 0; j < parameterTypes->size_; j++) {
        if ([((IOSClass *) nil_chk(IOSObjectArray_Get(parameterTypes, j))) isPrimitive]) {
          (void) IOSObjectArray_Set(parameterTypes, j, ComThoughtworksXstreamCoreUtilPrimitives_boxWithIOSClass_(IOSObjectArray_Get(parameterTypes, j)));
        }
      }
      
#line 129
      [matchingDependencies clear];
      usedDeps = 0;
      for (jint j = 0, k = 0; j < parameterTypes->size_ &&
#line 132
      parameterTypes->size_ + k - j <= typedDependencies->size_; k++) {
        if ([((IOSClass *) nil_chk(IOSObjectArray_Get(parameterTypes, j))) isAssignableFrom:((ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue *) nil_chk(IOSObjectArray_Get(typedDependencies, k)))->type_]) {
          [matchingDependencies addWithId:((ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue *) nil_chk(IOSObjectArray_Get(typedDependencies, k)))->value_];
          usedDeps |= LShift64(1LL, k);
          if (++j == parameterTypes->size_) {
            bestMatchingCtor = constructor;
            break;
          }
        }
      }
      
#line 143
      if (bestMatchingCtor == nil) {
        jboolean possible = YES;
        
#line 148
        IOSObjectArray *deps = [IOSObjectArray newArrayWithLength:typedDependencies->size_ type:ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue_class_()];
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(typedDependencies, 0, deps, 0, deps->size_);
        [matchingDependencies clear];
        usedDeps = 0;
        for (jint j = 0; j < parameterTypes->size_; j++) {
          jint assignable = -1;
          for (jint k = 0; k < deps->size_; k++) {
            if (IOSObjectArray_Get(deps, k) == nil) {
              continue;
            }
            if (((ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue *) nil_chk(IOSObjectArray_Get(deps, k)))->type_ == IOSObjectArray_Get(parameterTypes, j)) {
              assignable = k;
              
#line 161
              break;
            }
            else
#line 162
            if ([((IOSClass *) nil_chk(IOSObjectArray_Get(parameterTypes, j))) isAssignableFrom:((ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue *) nil_chk(IOSObjectArray_Get(deps, k)))->type_]) {
              
#line 164
              if (assignable < 0 ||
#line 165
              (((ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue *) nil_chk(IOSObjectArray_Get(deps, assignable)))->type_ != ((ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue *) nil_chk(IOSObjectArray_Get(deps, k)))->type_ && [((IOSClass *) nil_chk(((ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue *) nil_chk(IOSObjectArray_Get(deps, assignable)))->type_)) isAssignableFrom:
#line 166
              ((ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue *) nil_chk(IOSObjectArray_Get(deps, k)))->type_])) {
                assignable = k;
              }
            }
          }
          
#line 172
          if (assignable >= 0) {
            [matchingDependencies addWithId:((ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue *) nil_chk(IOSObjectArray_Get(deps, assignable)))->value_];
            usedDeps |= LShift64(1LL, assignable);
            (void) IOSObjectArray_Set(deps, assignable, nil);
          }
          else {
            
#line 177
            possible = NO;
            break;
          }
        }
        
#line 182
        if (possible) {
          
#line 184
          if (possibleCtor != nil && usedDeps >= possibleUsedDeps) {
            continue;
          }
          possibleCtor = constructor;
          possibleMatchingDependencies = (id<JavaUtilList>) check_protocol_cast([matchingDependencies clone], @protocol(JavaUtilList));
          possibleUsedDeps = usedDeps;
        }
      }
    }
    
#line 194
    if (bestMatchingCtor == nil) {
      if (possibleCtor == nil) {
        usedDeps = 0;
        @throw new_ComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_(JreStrcat("$$$", @"Cannot construct ",
#line 198
        [type getName], @", none of the dependencies match any constructor's parameters"));
      }
      else {
        bestMatchingCtor = possibleCtor;
        [matchingDependencies clear];
        [matchingDependencies addAllWithJavaUtilCollection:possibleMatchingDependencies];
        usedDeps = possibleUsedDeps;
      }
    }
  }
  
#line 209
  @try {
    id instance;
    if (bestMatchingCtor == nil) {
      instance = [((IOSClass *) nil_chk(type)) newInstance];
    }
    else {
      
#line 214
      instance = [bestMatchingCtor newInstanceWithNSObjectArray:[matchingDependencies toArray]];
    }
    if (usedDependencies != nil) {
      [usedDependencies clear];
      jint i = 0;
      for (jlong l = 1; l < usedDeps; LShiftAssignLong(&l, 1), ++i) {
        if ((usedDeps & l) > 0) {
          [usedDependencies setWithInt:i];
        }
      }
    }
    return instance;
  }
  @catch (
#line 226
  JavaLangInstantiationException *e) {
    @throw new_ComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Cannot construct ", [((IOSClass *) nil_chk(type)) getName]), e);
  }
  @catch (
#line 228
  JavaLangIllegalAccessException *e) {
    @throw new_ComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Cannot construct ", [((IOSClass *) nil_chk(type)) getName]), e);
  }
  @catch (
#line 230
  JavaLangReflectInvocationTargetException *e) {
    @throw new_ComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Cannot construct ", [((IOSClass *) nil_chk(type)) getName]), e);
  }
  @catch (
#line 232
  JavaLangSecurityException *e) {
    @throw new_ComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Cannot construct ", [((IOSClass *) nil_chk(type)) getName]), e);
  }
  @catch (
#line 234
  JavaLangExceptionInInitializerError *e) {
    @throw new_ComThoughtworksXstreamConvertersReflectionObjectAccessException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Cannot construct ", [((IOSClass *) nil_chk(type)) getName]), e);
  }
}

void ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_init(ComThoughtworksXstreamCoreUtilDependencyInjectionFactory *self) {
  (void) NSObject_init(self);
}

ComThoughtworksXstreamCoreUtilDependencyInjectionFactory *new_ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_init() {
  ComThoughtworksXstreamCoreUtilDependencyInjectionFactory *self = [ComThoughtworksXstreamCoreUtilDependencyInjectionFactory alloc];
  ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamCoreUtilDependencyInjectionFactory)


#line 239
@implementation ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue


#line 243
- (instancetype)initWithIOSClass:(IOSClass *)type
                          withId:(id)value {
  ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue_initWithIOSClass_withId_(self, type, value);
  return self;
}

- (NSString *)description {
  
#line 251
  return JreStrcat("$C@", [((IOSClass *) nil_chk(type_)) getName], ':', value_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithIOSClass:withId:", "TypedValue", NULL, 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "type_", NULL, 0x10, "Ljava.lang.Class;", NULL, NULL,  },
    { "value_", NULL, 0x10, "Ljava.lang.Object;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue = { 2, "TypedValue", "com.thoughtworks.xstream.core.util", "DependencyInjectionFactory", 0xa, 2, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue;
}

@end


#line 243
void ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue_initWithIOSClass_withId_(ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue *self, IOSClass *type, id value) {
  (void) NSObject_init(self);
  self->type_ = type;
  self->value_ = value;
}


#line 243
ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue *new_ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue_initWithIOSClass_withId_(IOSClass *type, id value) {
  ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue *self = [ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue alloc];
  ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue_initWithIOSClass_withId_(self, type, value);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_TypedValue)

@implementation ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_$1


#line 80
- (jint)compareWithId:(id)o1
               withId:(id)o2 {
  return ((IOSObjectArray *) nil_chk([((JavaLangReflectConstructor *) nil_chk(((JavaLangReflectConstructor *) check_class_cast(o2, [JavaLangReflectConstructor class])))) getParameterTypes]))->size_ - ((IOSObjectArray *) nil_chk(
#line 82
  [((JavaLangReflectConstructor *) nil_chk(((JavaLangReflectConstructor *) check_class_cast(o1, [JavaLangReflectConstructor class])))) getParameterTypes]))->size_;
}

- (instancetype)init {
  ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ComThoughtworksXstreamCoreUtilDependencyInjectionFactory", "newInstanceWithIOSClass:withNSObjectArray:withJavaUtilBitSet:" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_$1 = { 2, "", "com.thoughtworks.xstream.core.util", "DependencyInjectionFactory", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_$1;
}

@end

void ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_$1_init(ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_$1 *self) {
  (void) NSObject_init(self);
}

ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_$1 *new_ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_$1_init() {
  ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_$1 *self = [ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_$1 alloc];
  ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_$1)
