//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/util/CompositeClassLoader.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/util/CompositeClassLoader.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/thoughtworks/xstream/core/JVM.h"
#include "com/thoughtworks/xstream/core/util/CompositeClassLoader.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/Thread.h"
#include "java/lang/ref/Reference.h"
#include "java/lang/ref/ReferenceQueue.h"
#include "java/lang/ref/WeakReference.h"
#include "java/lang/reflect/Method.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

BOOL ComThoughtworksXstreamCoreUtilCompositeClassLoader_initialized = NO;


#line 54
@implementation ComThoughtworksXstreamCoreUtilCompositeClassLoader


#line 73
- (instancetype)init {
  if (self = [super init]) {
    queue_ =
#line 70
    [[JavaLangRefReferenceQueue alloc] init];
    classLoaders_ =
#line 71
    [[JavaUtilArrayList alloc] init];
    
#line 74
    [self addInternalWithJavaLangClassLoader:[[IOSClass classWithClass:[NSObject class]] getClassLoader]];
    
#line 75
    [self addInternalWithJavaLangClassLoader:[[self getClass] getClassLoader]];
  }
  return self;
}


#line 82
- (void)addWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader {
  @synchronized(self) {
    
#line 83
    [self cleanup];
    if (classLoader != nil) {
      [self addInternalWithJavaLangClassLoader:classLoader];
    }
  }
}


#line 89
- (void)addInternalWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader {
  
#line 90
  JavaLangRefWeakReference *refClassLoader = nil;
  for (id<JavaUtilIterator> iterator = [((id<JavaUtilList>) nil_chk(classLoaders_)) iterator]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
    JavaLangRefWeakReference *ref = (JavaLangRefWeakReference *) check_class_cast([iterator next], [JavaLangRefWeakReference class]);
    JavaLangClassLoader *cl = (JavaLangClassLoader *) check_class_cast([((JavaLangRefWeakReference *) nil_chk(ref)) get], [JavaLangClassLoader class]);
    if (cl == nil) {
      [iterator remove];
    }
    else
#line 96
    if (cl == classLoader) {
      [iterator remove];
      refClassLoader = ref;
    }
  }
  [classLoaders_ addWithInt:0 withId:refClassLoader != nil ? refClassLoader : [[JavaLangRefWeakReference alloc] initWithId:classLoader withJavaLangRefReferenceQueue:queue_]];
}


#line 104
- (IOSClass *)loadClassWithNSString:(NSString *)name {
  
#line 105
  id<JavaUtilList> copy_ = [[ComThoughtworksXstreamCoreUtilCompositeClassLoader_$1 alloc] initWithInt:[((id<JavaUtilList>) nil_chk(classLoaders_)) size]];
  
#line 124
  @synchronized(self) {
    [self cleanup];
    [copy_ addAllWithJavaUtilCollection:classLoaders_];
  }
  
#line 129
  JavaLangClassLoader *contextClassLoader = [((JavaLangThread *) nil_chk([JavaLangThread currentThread])) getContextClassLoader];
  for (id<JavaUtilIterator> iterator = [copy_ iterator]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
    JavaLangClassLoader *classLoader = (JavaLangClassLoader *) check_class_cast([iterator next], [JavaLangClassLoader class]);
    if (classLoader == contextClassLoader) {
      contextClassLoader = nil;
    }
    @try {
      return [((JavaLangClassLoader *) nil_chk(classLoader)) loadClassWithNSString:name];
    }
    @catch (
#line 137
    JavaLangClassNotFoundException *notFound) {
    }
  }
  
#line 145
  if (contextClassLoader != nil) {
    return [contextClassLoader loadClassWithNSString:name];
  }
  else {
    
#line 148
    @throw [[JavaLangClassNotFoundException alloc] initWithNSString:name];
  }
}


#line 152
- (void)cleanup {
  
#line 153
  JavaLangRefWeakReference *ref;
  while ((ref = (JavaLangRefWeakReference *) check_class_cast([((JavaLangRefReferenceQueue *) nil_chk(queue_)) poll], [JavaLangRefWeakReference class])) != nil) {
    
#line 156
    [((id<JavaUtilList>) nil_chk(classLoaders_)) removeWithId:ref];
  }
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamCoreUtilCompositeClassLoader *)other {
  [super copyAllFieldsTo:other];
  other->classLoaders_ = classLoaders_;
  other->queue_ = queue_;
}

+ (void)initialize {
  if (self == [ComThoughtworksXstreamCoreUtilCompositeClassLoader class]) {
    {
      
#line 56
      if ([ComThoughtworksXstreamCoreJVM is17]) {
        
#line 58
        @try {
          JavaLangReflectMethod *m = [[IOSClass classWithClass:[JavaLangClassLoader class]] getDeclaredMethod:@"registerAsParallelCapable" parameterTypes:(IOSObjectArray *) check_class_cast(nil, [IOSObjectArray class])];
          if (![((JavaLangReflectMethod *) nil_chk(m)) isAccessible]) {
            [m setAccessibleWithBoolean:YES];
          }
          (void) [m invokeWithId:nil withNSObjectArray:(IOSObjectArray *) check_class_cast(nil, [IOSObjectArray class])];
        }
        @catch (
#line 64
        JavaLangException *e) {
        }
      }
    }
    ComThoughtworksXstreamCoreUtilCompositeClassLoader_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "CompositeClassLoader", NULL, 0x1, NULL },
    { "addWithJavaLangClassLoader:", "add", "V", 0x21, NULL },
    { "addInternalWithJavaLangClassLoader:", "addInternal", "V", 0x2, NULL },
    { "loadClassWithNSString:", "loadClass", "Ljava.lang.Class;", 0x1, "Ljava.lang.ClassNotFoundException;" },
    { "cleanup", NULL, "V", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "queue_", NULL, 0x12, "Ljava.lang.ref.ReferenceQueue;", NULL,  },
    { "classLoaders_", NULL, 0x12, "Ljava.util.List;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilCompositeClassLoader = { "CompositeClassLoader", "com.thoughtworks.xstream.core.util", NULL, 0x1, 5, methods, 2, fields, 0, NULL};
  return &_ComThoughtworksXstreamCoreUtilCompositeClassLoader;
}

@end

@implementation ComThoughtworksXstreamCoreUtilCompositeClassLoader_$1


#line 107
- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  
#line 108
  jboolean result = NO;
  for (id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk(c)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    result |= [self addWithId:[iter next]];
  }
  return result;
}


#line 115
- (jboolean)addWithId:(id)ref {
  
#line 116
  id classLoader = [((JavaLangRefWeakReference *) nil_chk(((JavaLangRefWeakReference *) check_class_cast(ref, [JavaLangRefWeakReference class])))) get];
  if (classLoader != nil) {
    return [super addWithId:classLoader];
  }
  return NO;
}

- (instancetype)initWithInt:(jint)arg$0 {
  return [super initWithInt:arg$0];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "addAllWithJavaUtilCollection:", "addAll", "Z", 0x1, NULL },
    { "addWithId:", "add", "Z", 0x1, NULL },
    { "initWithInt:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilCompositeClassLoader_$1 = { "$1", "com.thoughtworks.xstream.core.util", "CompositeClassLoader", 0x8000, 3, methods, 0, NULL, 0, NULL};
  return &_ComThoughtworksXstreamCoreUtilCompositeClassLoader_$1;
}

@end
