//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/core/util/CompositeClassLoader.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/core/util/CompositeClassLoader.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/core/JVM.h"
#include "com/thoughtworks/xstream/core/util/CompositeClassLoader.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/Thread.h"
#include "java/lang/ref/Reference.h"
#include "java/lang/ref/ReferenceQueue.h"
#include "java/lang/ref/WeakReference.h"
#include "java/lang/reflect/Method.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface ComThoughtworksXstreamCoreUtilCompositeClassLoader () {
 @public
  JavaLangRefReferenceQueue *queue_;
  id<JavaUtilList> classLoaders_;
}

- (void)addInternalWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader;

- (void)cleanup;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreUtilCompositeClassLoader, queue_, JavaLangRefReferenceQueue *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreUtilCompositeClassLoader, classLoaders_, id<JavaUtilList>)

__attribute__((unused)) static void ComThoughtworksXstreamCoreUtilCompositeClassLoader_addInternalWithJavaLangClassLoader_(ComThoughtworksXstreamCoreUtilCompositeClassLoader *self, JavaLangClassLoader *classLoader);

__attribute__((unused)) static void ComThoughtworksXstreamCoreUtilCompositeClassLoader_cleanup(ComThoughtworksXstreamCoreUtilCompositeClassLoader *self);

@interface ComThoughtworksXstreamCoreUtilCompositeClassLoader_$1 : JavaUtilArrayList

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (jboolean)addWithId:(id)ref;

- (instancetype)initWithInt:(jint)arg$0;


@end

J2OBJC_EMPTY_STATIC_INIT(ComThoughtworksXstreamCoreUtilCompositeClassLoader_$1)

__attribute__((unused)) static void ComThoughtworksXstreamCoreUtilCompositeClassLoader_$1_initWithInt_(ComThoughtworksXstreamCoreUtilCompositeClassLoader_$1 *self, jint arg$0);

__attribute__((unused)) static ComThoughtworksXstreamCoreUtilCompositeClassLoader_$1 *new_ComThoughtworksXstreamCoreUtilCompositeClassLoader_$1_initWithInt_(jint arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComThoughtworksXstreamCoreUtilCompositeClassLoader_$1)

J2OBJC_INITIALIZED_DEFN(ComThoughtworksXstreamCoreUtilCompositeClassLoader)


#line 54
@implementation ComThoughtworksXstreamCoreUtilCompositeClassLoader


#line 73
- (instancetype)init {
  ComThoughtworksXstreamCoreUtilCompositeClassLoader_init(self);
  return self;
}


#line 82
- (void)addWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader {
  @synchronized(self) {
    
#line 83
    ComThoughtworksXstreamCoreUtilCompositeClassLoader_cleanup(self);
    if (classLoader != nil) {
      ComThoughtworksXstreamCoreUtilCompositeClassLoader_addInternalWithJavaLangClassLoader_(self, classLoader);
    }
  }
}


#line 89
- (void)addInternalWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader {
  ComThoughtworksXstreamCoreUtilCompositeClassLoader_addInternalWithJavaLangClassLoader_(self, classLoader);
}


#line 104
- (IOSClass *)loadClassWithNSString:(NSString *)name {
  id<JavaUtilList> copy_ = new_ComThoughtworksXstreamCoreUtilCompositeClassLoader_$1_initWithInt_([((id<JavaUtilList>) nil_chk(classLoaders_)) size]);
  
#line 124
  @synchronized(self) {
    ComThoughtworksXstreamCoreUtilCompositeClassLoader_cleanup(self);
    [copy_ addAllWithJavaUtilCollection:classLoaders_];
  }
  
#line 129
  JavaLangClassLoader *contextClassLoader = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getContextClassLoader];
  for (id<JavaUtilIterator> iterator = [copy_ iterator]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
    JavaLangClassLoader *classLoader = (JavaLangClassLoader *) check_class_cast([iterator next], [JavaLangClassLoader class]);
    if (classLoader == contextClassLoader) {
      contextClassLoader = nil;
    }
    @try {
      return [((JavaLangClassLoader *) nil_chk(classLoader)) loadClassWithNSString:name];
    }
    @catch (
#line 137
    JavaLangClassNotFoundException *notFound) {
    }
  }
  
#line 145
  if (contextClassLoader != nil) {
    return [contextClassLoader loadClassWithNSString:name];
  }
  else {
    
#line 148
    @throw new_JavaLangClassNotFoundException_initWithNSString_(name);
  }
}


#line 152
- (void)cleanup {
  ComThoughtworksXstreamCoreUtilCompositeClassLoader_cleanup(self);
}

+ (void)initialize {
  if (self == [ComThoughtworksXstreamCoreUtilCompositeClassLoader class]) {
    {
      
#line 56
      if (ComThoughtworksXstreamCoreJVM_is17()) {
        
#line 58
        @try {
          JavaLangReflectMethod *m = [JavaLangClassLoader_class_() getDeclaredMethod:@"registerAsParallelCapable" parameterTypes:nil];
          if (![((JavaLangReflectMethod *) nil_chk(m)) isAccessible]) {
            [m setAccessibleWithBoolean:YES];
          }
          (void) [m invokeWithId:nil withNSObjectArray:nil];
        }
        @catch (
#line 64
        JavaLangException *e) {
        }
      }
    }
    J2OBJC_SET_INITIALIZED(ComThoughtworksXstreamCoreUtilCompositeClassLoader)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "CompositeClassLoader", NULL, 0x1, NULL, NULL },
    { "addWithJavaLangClassLoader:", "add", "V", 0x21, NULL, NULL },
    { "addInternalWithJavaLangClassLoader:", "addInternal", "V", 0x2, NULL, NULL },
    { "loadClassWithNSString:", "loadClass", "Ljava.lang.Class;", 0x1, "Ljava.lang.ClassNotFoundException;", NULL },
    { "cleanup", NULL, "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "queue_", NULL, 0x12, "Ljava.lang.ref.ReferenceQueue;", NULL, NULL,  },
    { "classLoaders_", NULL, 0x12, "Ljava.util.List;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilCompositeClassLoader = { 2, "CompositeClassLoader", "com.thoughtworks.xstream.core.util", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamCoreUtilCompositeClassLoader;
}

@end


#line 73
void ComThoughtworksXstreamCoreUtilCompositeClassLoader_init(ComThoughtworksXstreamCoreUtilCompositeClassLoader *self) {
  (void) JavaLangClassLoader_init(self);
  self->queue_ = new_JavaLangRefReferenceQueue_init();
  self->classLoaders_ = new_JavaUtilArrayList_init();
  
#line 74
  ComThoughtworksXstreamCoreUtilCompositeClassLoader_addInternalWithJavaLangClassLoader_(self, [NSObject_class_() getClassLoader]);
  ComThoughtworksXstreamCoreUtilCompositeClassLoader_addInternalWithJavaLangClassLoader_(self, [[self getClass] getClassLoader]);
}


#line 73
ComThoughtworksXstreamCoreUtilCompositeClassLoader *new_ComThoughtworksXstreamCoreUtilCompositeClassLoader_init() {
  ComThoughtworksXstreamCoreUtilCompositeClassLoader *self = [ComThoughtworksXstreamCoreUtilCompositeClassLoader alloc];
  ComThoughtworksXstreamCoreUtilCompositeClassLoader_init(self);
  return self;
}


#line 89
void ComThoughtworksXstreamCoreUtilCompositeClassLoader_addInternalWithJavaLangClassLoader_(ComThoughtworksXstreamCoreUtilCompositeClassLoader *self, JavaLangClassLoader *classLoader) {
  JavaLangRefWeakReference *refClassLoader = nil;
  for (id<JavaUtilIterator> iterator = [((id<JavaUtilList>) nil_chk(self->classLoaders_)) iterator]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
    JavaLangRefWeakReference *ref = (JavaLangRefWeakReference *) check_class_cast([iterator next], [JavaLangRefWeakReference class]);
    JavaLangClassLoader *cl = (JavaLangClassLoader *) check_class_cast([((JavaLangRefWeakReference *) nil_chk(ref)) get], [JavaLangClassLoader class]);
    if (cl == nil) {
      [iterator remove];
    }
    else
#line 96
    if (cl == classLoader) {
      [iterator remove];
      refClassLoader = ref;
    }
  }
  [self->classLoaders_ addWithInt:0 withId:refClassLoader != nil ? refClassLoader : new_JavaLangRefWeakReference_initWithId_withJavaLangRefReferenceQueue_(classLoader, self->queue_)];
}


#line 152
void ComThoughtworksXstreamCoreUtilCompositeClassLoader_cleanup(ComThoughtworksXstreamCoreUtilCompositeClassLoader *self) {
  JavaLangRefWeakReference *ref;
  while ((ref = (JavaLangRefWeakReference *) check_class_cast([((JavaLangRefReferenceQueue *) nil_chk(self->queue_)) poll], [JavaLangRefWeakReference class])) != nil) {
    
#line 156
    [((id<JavaUtilList>) nil_chk(self->classLoaders_)) removeWithId:ref];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamCoreUtilCompositeClassLoader)

@implementation ComThoughtworksXstreamCoreUtilCompositeClassLoader_$1


#line 107
- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  jboolean result = NO;
  for (id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk(c)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    result |= [self addWithId:[iter next]];
  }
  return result;
}

- (jboolean)addWithId:(id)ref {
  id classLoader = [((JavaLangRefWeakReference *) nil_chk(((JavaLangRefWeakReference *) check_class_cast(ref, [JavaLangRefWeakReference class])))) get];
  if (classLoader != nil) {
    return [super addWithId:classLoader];
  }
  return NO;
}

- (instancetype)initWithInt:(jint)arg$0 {
  ComThoughtworksXstreamCoreUtilCompositeClassLoader_$1_initWithInt_(self, arg$0);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "addAllWithJavaUtilCollection:", "addAll", "Z", 0x1, NULL, NULL },
    { "addWithId:", "add", "Z", 0x1, NULL, NULL },
    { "initWithInt:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ComThoughtworksXstreamCoreUtilCompositeClassLoader", "loadClassWithNSString:" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilCompositeClassLoader_$1 = { 2, "", "com.thoughtworks.xstream.core.util", "CompositeClassLoader", 0x8008, 3, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ComThoughtworksXstreamCoreUtilCompositeClassLoader_$1;
}

@end

void ComThoughtworksXstreamCoreUtilCompositeClassLoader_$1_initWithInt_(ComThoughtworksXstreamCoreUtilCompositeClassLoader_$1 *self, jint arg$0) {
  (void) JavaUtilArrayList_initWithInt_(self, arg$0);
}

ComThoughtworksXstreamCoreUtilCompositeClassLoader_$1 *new_ComThoughtworksXstreamCoreUtilCompositeClassLoader_$1_initWithInt_(jint arg$0) {
  ComThoughtworksXstreamCoreUtilCompositeClassLoader_$1 *self = [ComThoughtworksXstreamCoreUtilCompositeClassLoader_$1 alloc];
  ComThoughtworksXstreamCoreUtilCompositeClassLoader_$1_initWithInt_(self, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamCoreUtilCompositeClassLoader_$1)
