//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/util/Fields.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/util/Fields.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/thoughtworks/xstream/converters/reflection/ObjectAccessException.h"
#include "com/thoughtworks/xstream/core/util/Fields.h"
#include "java/lang/Error.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NoSuchFieldException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Modifier.h"


#line 26
@implementation ComThoughtworksXstreamCoreUtilFields


#line 27
+ (JavaLangReflectField *)locateWithIOSClass:(IOSClass *)definedIn
                                withIOSClass:(IOSClass *)fieldType
                                 withBoolean:(jboolean)isStatic {
  JavaLangReflectField *field = nil;
  @try {
    IOSObjectArray *fields = [((IOSClass *) nil_chk(definedIn)) getDeclaredFields];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fields))->size_; ++i) {
      if ([JavaLangReflectModifier isStaticWithInt:[((JavaLangReflectField *) nil_chk(IOSObjectArray_Get(fields, i))) getModifiers]] == isStatic) {
        if ([((IOSClass *) nil_chk(fieldType)) isAssignableFrom:[((JavaLangReflectField *) nil_chk(IOSObjectArray_Get(fields, i))) getType]]) {
          field = IOSObjectArray_Get(fields, i);
        }
      }
    }
    if (field != nil && ![field isAccessible]) {
      [field setAccessibleWithBoolean:YES];
    }
  }
  @catch (
#line 41
  JavaLangSecurityException *e) {
  }
  @catch (JavaLangError *e) {
  }
  
#line 46
  return field;
}


#line 49
+ (JavaLangReflectField *)findWithIOSClass:(IOSClass *)type
                              withNSString:(NSString *)name {
  
#line 50
  @try {
    JavaLangReflectField *result = [((IOSClass *) nil_chk(type)) getDeclaredField:name];
    if (![((JavaLangReflectField *) nil_chk(result)) isAccessible]) {
      [result setAccessibleWithBoolean:YES];
    }
    return result;
  }
  @catch (
#line 56
  JavaLangNoSuchFieldException *e) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$$C$$$", @"Could not access ", [((IOSClass *) nil_chk(type)) getName], '.', name, @" field: ",
#line 58
    [((JavaLangNoSuchFieldException *) nil_chk(e)) getMessage])];
  }
  @catch (
#line 59
  JavaLangError *e) {
    @throw [[ComThoughtworksXstreamConvertersReflectionObjectAccessException alloc] initWithNSString:JreStrcat("$$C$$$", @"Could not access ", [((IOSClass *) nil_chk(type)) getName], '.', name, @" field: ",
#line 61
    [((JavaLangError *) nil_chk(e)) getMessage])];
  }
}


#line 65
+ (void)writeWithJavaLangReflectField:(JavaLangReflectField *)field
                               withId:(id)instance
                               withId:(id)value {
  
#line 66
  @try {
    [((JavaLangReflectField *) nil_chk(field)) setWithId:instance withId:value];
  }
  @catch (
#line 68
  JavaLangIllegalAccessException *e) {
    @throw [[ComThoughtworksXstreamConvertersReflectionObjectAccessException alloc] initWithNSString:JreStrcat("$$C$$", @"Could not write ", [((IOSClass *) nil_chk([((JavaLangReflectField *) nil_chk(field)) getType])) getName], '.',
#line 70
    [field getName], @" field") withJavaLangThrowable:e];
  }
  @catch (
#line 71
  JavaLangError *e) {
    @throw [[ComThoughtworksXstreamConvertersReflectionObjectAccessException alloc] initWithNSString:JreStrcat("$$C$$", @"Could not write ", [((IOSClass *) nil_chk([((JavaLangReflectField *) nil_chk(field)) getType])) getName], '.',
#line 73
    [field getName], @" field") withJavaLangThrowable:e];
  }
}


#line 77
+ (id)readWithJavaLangReflectField:(JavaLangReflectField *)field
                            withId:(id)instance {
  
#line 78
  @try {
    return [((JavaLangReflectField *) nil_chk(field)) getWithId:instance];
  }
  @catch (
#line 80
  JavaLangIllegalAccessException *e) {
    @throw [[ComThoughtworksXstreamConvertersReflectionObjectAccessException alloc] initWithNSString:JreStrcat("$$C$$", @"Could not read ", [((IOSClass *) nil_chk([((JavaLangReflectField *) nil_chk(field)) getType])) getName], '.',
#line 82
    [field getName], @" field") withJavaLangThrowable:e];
  }
  @catch (
#line 83
  JavaLangError *e) {
    @throw [[ComThoughtworksXstreamConvertersReflectionObjectAccessException alloc] initWithNSString:JreStrcat("$$C$$", @"Could not read ", [((IOSClass *) nil_chk([((JavaLangReflectField *) nil_chk(field)) getType])) getName], '.',
#line 85
    [field getName], @" field") withJavaLangThrowable:e];
  }
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "locateWithIOSClass:withIOSClass:withBoolean:", "locate", "Ljava.lang.reflect.Field;", 0x9, NULL },
    { "findWithIOSClass:withNSString:", "find", "Ljava.lang.reflect.Field;", 0x9, NULL },
    { "writeWithJavaLangReflectField:withId:withId:", "write", "V", 0x9, NULL },
    { "readWithJavaLangReflectField:withId:", "read", "Ljava.lang.Object;", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilFields = { "Fields", "com.thoughtworks.xstream.core.util", NULL, 0x1, 5, methods, 0, NULL, 0, NULL};
  return &_ComThoughtworksXstreamCoreUtilFields;
}

@end
