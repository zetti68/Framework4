//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/util/PresortedMap.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/util/PresortedMap.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/thoughtworks/xstream/core/util/PresortedMap.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/SortedMap.h"


#line 20
@implementation ComThoughtworksXstreamCoreUtilPresortedMap


#line 28
- (instancetype)init {
  return
#line 29
  [self initComThoughtworksXstreamCoreUtilPresortedMapWithJavaUtilComparator:nil withComThoughtworksXstreamCoreUtilPresortedMap_ArraySet:[[ComThoughtworksXstreamCoreUtilPresortedMap_ArraySet alloc] init]];
}


#line 32
- (instancetype)initWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  return [self initComThoughtworksXstreamCoreUtilPresortedMapWithJavaUtilComparator:comparator withComThoughtworksXstreamCoreUtilPresortedMap_ArraySet:[[ComThoughtworksXstreamCoreUtilPresortedMap_ArraySet alloc] init]];
}

- (instancetype)initComThoughtworksXstreamCoreUtilPresortedMapWithJavaUtilComparator:(id<JavaUtilComparator>)comparator
                             withComThoughtworksXstreamCoreUtilPresortedMap_ArraySet:(ComThoughtworksXstreamCoreUtilPresortedMap_ArraySet *)set {
  if (self = [super init]) {
    
#line 37
    self->comparator__ = comparator != nil ? ((id) comparator) : [[ComThoughtworksXstreamCoreUtilPresortedMap_ArraySetComparator alloc] initWithJavaUtilArrayList:set];
    
#line 38
    self->set_ = set;
  }
  return self;
}

- (instancetype)initWithJavaUtilComparator:(id<JavaUtilComparator>)comparator
withComThoughtworksXstreamCoreUtilPresortedMap_ArraySet:(ComThoughtworksXstreamCoreUtilPresortedMap_ArraySet *)set {
  return [self initComThoughtworksXstreamCoreUtilPresortedMapWithJavaUtilComparator:
#line 36
comparator withComThoughtworksXstreamCoreUtilPresortedMap_ArraySet:set];
}


#line 41
- (id<JavaUtilComparator>)comparator {
  
#line 42
  return comparator__;
}


#line 45
- (id<JavaUtilSet>)entrySet {
  
#line 46
  return set_;
}


#line 49
- (id)firstKey {
  
#line 50
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}


#line 53
- (id<JavaUtilSortedMap>)headMapWithId:(id)toKey {
  
#line 54
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}


#line 57
- (id<JavaUtilSet>)keySet {
  
#line 58
  id<JavaUtilSet> keySet = [[ComThoughtworksXstreamCoreUtilPresortedMap_ArraySet alloc] init];
  for (id<JavaUtilIterator> iterator = [((ComThoughtworksXstreamCoreUtilPresortedMap_ArraySet *) nil_chk(set_)) iterator]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) check_protocol_cast([iterator next], @protocol(JavaUtilMap_Entry));
    [keySet addWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]];
  }
  return keySet;
}


#line 66
- (id)lastKey {
  
#line 67
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}


#line 70
- (id<JavaUtilSortedMap>)subMapWithId:(id)fromKey
                               withId:(id)toKey {
  
#line 71
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}


#line 74
- (id<JavaUtilSortedMap>)tailMapWithId:(id)fromKey {
  
#line 75
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}


#line 78
- (id<JavaUtilCollection>)values {
  
#line 79
  id<JavaUtilSet> values = [[ComThoughtworksXstreamCoreUtilPresortedMap_ArraySet alloc] init];
  for (id<JavaUtilIterator> iterator = [((ComThoughtworksXstreamCoreUtilPresortedMap_ArraySet *) nil_chk(set_)) iterator]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) check_protocol_cast([iterator next], @protocol(JavaUtilMap_Entry));
    [values addWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue]];
  }
  return values;
}


#line 87
- (void)clear {
  
#line 88
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}


#line 91
- (jboolean)containsKeyWithId:(id)key {
  
#line 92
  return NO;
}


#line 95
- (jboolean)containsValueWithId:(id)value {
  
#line 96
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}


#line 99
- (id)getWithId:(id)key {
  
#line 100
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}


#line 103
- (jboolean)isEmpty {
  
#line 104
  return [((ComThoughtworksXstreamCoreUtilPresortedMap_ArraySet *) nil_chk(set_)) isEmpty];
}


#line 107
- (id)putWithId:(id)key
         withId:(id)value {
  
#line 108
  [((ComThoughtworksXstreamCoreUtilPresortedMap_ArraySet *) nil_chk(set_)) addWithId:[[ComThoughtworksXstreamCoreUtilPresortedMap_$1 alloc] initWithId:key withId:value]];
  
#line 121
  return nil;
}


#line 124
- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)m {
  
#line 125
  for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(m)) entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    [((ComThoughtworksXstreamCoreUtilPresortedMap_ArraySet *) nil_chk(set_)) addWithId:[iter next]];
  }
}


#line 130
- (id)removeWithId:(id)key {
  
#line 131
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}


#line 134
- (jint)size {
  
#line 135
  return [((ComThoughtworksXstreamCoreUtilPresortedMap_ArraySet *) nil_chk(set_)) size];
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamCoreUtilPresortedMap *)other {
  [super copyAllFieldsTo:other];
  other->comparator__ = comparator__;
  other->set_ = set_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "PresortedMap", NULL, 0x1, NULL },
    { "initWithJavaUtilComparator:", "PresortedMap", NULL, 0x1, NULL },
    { "initWithJavaUtilComparator:withComThoughtworksXstreamCoreUtilPresortedMap_ArraySet:", "PresortedMap", NULL, 0x2, NULL },
    { "comparator", NULL, "Ljava.util.Comparator;", 0x1, NULL },
    { "entrySet", NULL, "Ljava.util.Set;", 0x1, NULL },
    { "firstKey", NULL, "Ljava.lang.Object;", 0x1, NULL },
    { "headMapWithId:", "headMap", "Ljava.util.SortedMap;", 0x1, NULL },
    { "keySet", NULL, "Ljava.util.Set;", 0x1, NULL },
    { "lastKey", NULL, "Ljava.lang.Object;", 0x1, NULL },
    { "subMapWithId:withId:", "subMap", "Ljava.util.SortedMap;", 0x1, NULL },
    { "tailMapWithId:", "tailMap", "Ljava.util.SortedMap;", 0x1, NULL },
    { "values", NULL, "Ljava.util.Collection;", 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "containsKeyWithId:", "containsKey", "Z", 0x1, NULL },
    { "containsValueWithId:", "containsValue", "Z", 0x1, NULL },
    { "getWithId:", "get", "Ljava.lang.Object;", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "putWithId:withId:", "put", "Ljava.lang.Object;", 0x1, NULL },
    { "putAllWithJavaUtilMap:", "putAll", "V", 0x1, NULL },
    { "removeWithId:", "remove", "Ljava.lang.Object;", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "set_", NULL, 0x12, "Lcom.thoughtworks.xstream.core.util.PresortedMap$ArraySet;", NULL,  },
    { "comparator__", "comparator", 0x12, "Ljava.util.Comparator;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilPresortedMap = { "PresortedMap", "com.thoughtworks.xstream.core.util", NULL, 0x1, 21, methods, 2, fields, 0, NULL};
  return &_ComThoughtworksXstreamCoreUtilPresortedMap;
}

@end


#line 22
@implementation ComThoughtworksXstreamCoreUtilPresortedMap_ArraySet

- (instancetype)init {
  return [super init];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilPresortedMap_ArraySet = { "ArraySet", "com.thoughtworks.xstream.core.util", "PresortedMap", 0xa, 1, methods, 0, NULL, 0, NULL};
  return &_ComThoughtworksXstreamCoreUtilPresortedMap_ArraySet;
}

@end


#line 138
@implementation ComThoughtworksXstreamCoreUtilPresortedMap_ArraySetComparator


#line 143
- (instancetype)initWithJavaUtilArrayList:(JavaUtilArrayList *)list {
  if (self = [super init]) {
    
#line 144
    self->list_ = list;
  }
  return self;
}


#line 147
- (jint)compareWithId:(id)object1
               withId:(id)object2 {
  
#line 148
  if (array_ == nil || [((JavaUtilArrayList *) nil_chk(list_)) size] != array_->size_) {
    IOSObjectArray *a = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(list_)) size] type:[IOSClass classWithProtocol:@protocol(JavaUtilMap_Entry)]];
    if (array_ != nil) {
      [JavaLangSystem arraycopyWithId:array_ withInt:0 withId:a withInt:0 withInt:array_->size_];
    }
    for (jint i = array_ == nil ? 0 : array_->size_; i < [list_ size]; ++i) {
      IOSObjectArray_Set(a, i, (id<JavaUtilMap_Entry>) check_protocol_cast([list_ getWithInt:i], @protocol(JavaUtilMap_Entry)));
    }
    array_ = a;
  }
  jint idx1 = JavaLangInteger_MAX_VALUE, idx2 = JavaLangInteger_MAX_VALUE;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(array_))->size_ && !(idx1 < JavaLangInteger_MAX_VALUE && idx2 < JavaLangInteger_MAX_VALUE); ++i) {
    if (idx1 == JavaLangInteger_MAX_VALUE && object1 == [((id<JavaUtilMap_Entry>) nil_chk(IOSObjectArray_Get(array_, i))) getKey]) {
      idx1 = i;
    }
    if (idx2 == JavaLangInteger_MAX_VALUE && object2 == [((id<JavaUtilMap_Entry>) nil_chk(IOSObjectArray_Get(array_, i))) getKey]) {
      idx2 = i;
    }
  }
  return idx1 - idx2;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamCoreUtilPresortedMap_ArraySetComparator *)other {
  [super copyAllFieldsTo:other];
  other->array_ = array_;
  other->list_ = list_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilArrayList:", "ArraySetComparator", NULL, 0x0, NULL },
    { "compareWithId:withId:", "compare", "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "list_", NULL, 0x12, "Ljava.util.ArrayList;", NULL,  },
    { "array_", NULL, 0x2, "[Ljava.util.Map$Entry;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilPresortedMap_ArraySetComparator = { "ArraySetComparator", "com.thoughtworks.xstream.core.util", "PresortedMap", 0xa, 2, methods, 2, fields, 0, NULL};
  return &_ComThoughtworksXstreamCoreUtilPresortedMap_ArraySetComparator;
}

@end

@implementation ComThoughtworksXstreamCoreUtilPresortedMap_$1


#line 110
- (id)getKey {
  
#line 111
  return val$key_;
}


#line 114
- (id)getValue {
  
#line 115
  return val$value_;
}


#line 118
- (id)setValueWithId:(id)value {
  
#line 119
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (instancetype)initWithId:(id)capture$0
                    withId:(id)capture$1 {
  val$key_ = capture$0;
  val$value_ = capture$1;
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getKey", NULL, "Ljava.lang.Object;", 0x1, NULL },
    { "getValue", NULL, "Ljava.lang.Object;", 0x1, NULL },
    { "setValueWithId:", "setValue", "Ljava.lang.Object;", 0x1, NULL },
    { "initWithId:withId:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$key_", NULL, 0x1012, "Ljava.lang.Object;", NULL,  },
    { "val$value_", NULL, 0x1012, "Ljava.lang.Object;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreUtilPresortedMap_$1 = { "$1", "com.thoughtworks.xstream.core.util", "PresortedMap", 0x8000, 4, methods, 2, fields, 0, NULL};
  return &_ComThoughtworksXstreamCoreUtilPresortedMap_$1;
}

@end
