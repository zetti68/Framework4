//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/TreeUnmarshaller.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/TreeUnmarshaller.java"

#include "IOSClass.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/converters/Converter.h"
#include "com/thoughtworks/xstream/converters/ConverterLookup.h"
#include "com/thoughtworks/xstream/converters/DataHolder.h"
#include "com/thoughtworks/xstream/converters/ErrorReporter.h"
#include "com/thoughtworks/xstream/converters/ErrorWriter.h"
#include "com/thoughtworks/xstream/core/MapBackedDataHolder.h"
#include "com/thoughtworks/xstream/core/TreeUnmarshaller.h"
#include "com/thoughtworks/xstream/core/util/FastStack.h"
#include "com/thoughtworks/xstream/core/util/HierarchicalStreams.h"
#include "com/thoughtworks/xstream/core/util/PrioritizedList.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/util/Iterator.h"


#line 30
@implementation ComThoughtworksXstreamCoreTreeUnmarshaller


#line 40
- (instancetype)initWithId:(id)root
withComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)converterLookup
withComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper {
  if (self = [super init]) {
    types_ =
#line 36
    [[ComThoughtworksXstreamCoreUtilFastStack alloc] initWithInt:16];
    validationList_ =
#line 38
    [[ComThoughtworksXstreamCoreUtilPrioritizedList alloc] init];
    
#line 43
    self->root_ = root;
    
#line 44
    self->reader_ = reader;
    
#line 45
    self->converterLookup_ = converterLookup;
    
#line 46
    self->mapper_ = mapper;
  }
  return self;
}


#line 49
- (id)convertAnotherWithId:(id)parent
              withIOSClass:(IOSClass *)type {
  
#line 50
  return [self convertAnotherWithId:parent withIOSClass:type withComThoughtworksXstreamConvertersConverter:nil];
}


#line 53
- (id)convertAnotherWithId:(id)parent
              withIOSClass:(IOSClass *)type
withComThoughtworksXstreamConvertersConverter:(id<ComThoughtworksXstreamConvertersConverter>)converter {
  
#line 54
  type = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk(mapper_)) defaultImplementationOfWithIOSClass:type];
  if (converter == nil) {
    converter = [((id<ComThoughtworksXstreamConvertersConverterLookup>) nil_chk(converterLookup_)) lookupConverterForTypeWithIOSClass:type];
  }
  else {
    
#line 58
    if (![converter canConvertWithIOSClass:type]) {
      ComThoughtworksXstreamConvertersConversionException *e = [[ComThoughtworksXstreamConvertersConversionException alloc] initWithNSString:
#line 60
      @"Explicit selected converter cannot handle type"];
      [e addWithNSString:@"item-type" withNSString:[((IOSClass *) nil_chk(type)) getName]];
      [e addWithNSString:@"converter-type" withNSString:[[converter getClass] getName]];
      @throw e;
    }
  }
  return [self convertWithId:parent withIOSClass:type withComThoughtworksXstreamConvertersConverter:converter];
}


#line 69
- (id)convertWithId:(id)parent
       withIOSClass:(IOSClass *)type
withComThoughtworksXstreamConvertersConverter:(id<ComThoughtworksXstreamConvertersConverter>)converter {
  
#line 70
  @try {
    (void) [((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(types_)) pushWithId:type];
    id result = [((id<ComThoughtworksXstreamConvertersConverter>) nil_chk(converter)) unmarshalWithComThoughtworksXstreamIoHierarchicalStreamReader:reader_ withComThoughtworksXstreamConvertersUnmarshallingContext:self];
    [types_ popSilently];
    return result;
  }
  @catch (
#line 75
  ComThoughtworksXstreamConvertersConversionException *conversionException) {
    [self addInformationToWithComThoughtworksXstreamConvertersErrorWriter:conversionException withIOSClass:type withComThoughtworksXstreamConvertersConverter:converter withId:parent];
    @throw conversionException;
  }
  @catch (
#line 78
  JavaLangRuntimeException *e) {
    ComThoughtworksXstreamConvertersConversionException *conversionException = [[ComThoughtworksXstreamConvertersConversionException alloc] initWithJavaLangThrowable:e];
    [self addInformationToWithComThoughtworksXstreamConvertersErrorWriter:conversionException withIOSClass:type withComThoughtworksXstreamConvertersConverter:converter withId:parent];
    @throw conversionException;
  }
}


#line 85
- (void)addInformationToWithComThoughtworksXstreamConvertersErrorWriter:(id<ComThoughtworksXstreamConvertersErrorWriter>)errorWriter
                                                           withIOSClass:(IOSClass *)type
                          withComThoughtworksXstreamConvertersConverter:(id<ComThoughtworksXstreamConvertersConverter>)converter
                                                                 withId:(id)parent {
  
#line 86
  [((id<ComThoughtworksXstreamConvertersErrorWriter>) nil_chk(errorWriter)) addWithNSString:@"class" withNSString:[((IOSClass *) nil_chk(type)) getName]];
  [errorWriter addWithNSString:@"required-type" withNSString:[((IOSClass *) nil_chk([self getRequiredType])) getName]];
  [errorWriter addWithNSString:@"converter-type" withNSString:[[((id<ComThoughtworksXstreamConvertersConverter>) nil_chk(converter)) getClass] getName]];
  if ([(id) converter conformsToProtocol: @protocol(ComThoughtworksXstreamConvertersErrorReporter)]) {
    [((id<ComThoughtworksXstreamConvertersErrorReporter>) check_protocol_cast(converter, @protocol(ComThoughtworksXstreamConvertersErrorReporter))) appendErrorsWithComThoughtworksXstreamConvertersErrorWriter:errorWriter];
  }
  if ([parent conformsToProtocol: @protocol(ComThoughtworksXstreamConvertersErrorReporter)]) {
    [((id<ComThoughtworksXstreamConvertersErrorReporter>) nil_chk(((id<ComThoughtworksXstreamConvertersErrorReporter>) check_protocol_cast(parent, @protocol(ComThoughtworksXstreamConvertersErrorReporter))))) appendErrorsWithComThoughtworksXstreamConvertersErrorWriter:errorWriter];
  }
  [((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader_)) appendErrorsWithComThoughtworksXstreamConvertersErrorWriter:errorWriter];
}


#line 98
- (void)addCompletionCallbackWithJavaLangRunnable:(id<JavaLangRunnable>)work
                                          withInt:(jint)priority {
  
#line 99
  [((ComThoughtworksXstreamCoreUtilPrioritizedList *) nil_chk(validationList_)) addWithId:work withInt:priority];
}


#line 102
- (id)currentObject {
  
#line 103
  return [((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(types_)) size] == 1 ? root_ : nil;
}


#line 106
- (IOSClass *)getRequiredType {
  
#line 107
  return (IOSClass *) check_class_cast([((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(types_)) peek], [IOSClass class]);
}


#line 110
- (id)getWithId:(id)key {
  
#line 111
  [self lazilyCreateDataHolder];
  return [((id<ComThoughtworksXstreamConvertersDataHolder>) nil_chk(dataHolder_)) getWithId:key];
}


#line 115
- (void)putWithId:(id)key
           withId:(id)value {
  
#line 116
  [self lazilyCreateDataHolder];
  [((id<ComThoughtworksXstreamConvertersDataHolder>) nil_chk(dataHolder_)) putWithId:key withId:value];
}


#line 120
- (id<JavaUtilIterator>)keys {
  
#line 121
  [self lazilyCreateDataHolder];
  return [((id<ComThoughtworksXstreamConvertersDataHolder>) nil_chk(dataHolder_)) keys];
}


#line 125
- (void)lazilyCreateDataHolder {
  
#line 126
  if (dataHolder_ == nil) {
    dataHolder_ = [[ComThoughtworksXstreamCoreMapBackedDataHolder alloc] init];
  }
}


#line 131
- (id)startWithComThoughtworksXstreamConvertersDataHolder:(id<ComThoughtworksXstreamConvertersDataHolder>)dataHolder {
  
#line 132
  self->dataHolder_ = dataHolder;
  IOSClass *type = [ComThoughtworksXstreamCoreUtilHierarchicalStreams readClassTypeWithComThoughtworksXstreamIoHierarchicalStreamReader:reader_ withComThoughtworksXstreamMapperMapper:mapper_];
  id result = [self convertAnotherWithId:nil withIOSClass:type];
  id<JavaUtilIterator> validations = [((ComThoughtworksXstreamCoreUtilPrioritizedList *) nil_chk(validationList_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(validations)) hasNext]) {
    id<JavaLangRunnable> runnable = (id<JavaLangRunnable>) check_protocol_cast([validations next], @protocol(JavaLangRunnable));
    [((id<JavaLangRunnable>) nil_chk(runnable)) run];
  }
  return result;
}


#line 143
- (id<ComThoughtworksXstreamMapperMapper>)getMapper {
  
#line 144
  return self->mapper_;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamCoreTreeUnmarshaller *)other {
  [super copyAllFieldsTo:other];
  other->converterLookup_ = converterLookup_;
  other->dataHolder_ = dataHolder_;
  other->mapper_ = mapper_;
  other->reader_ = reader_;
  other->root_ = root_;
  other->types_ = types_;
  other->validationList_ = validationList_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithId:withComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersConverterLookup:withComThoughtworksXstreamMapperMapper:", "TreeUnmarshaller", NULL, 0x1, NULL },
    { "convertAnotherWithId:withIOSClass:", "convertAnother", "Ljava.lang.Object;", 0x1, NULL },
    { "convertAnotherWithId:withIOSClass:withComThoughtworksXstreamConvertersConverter:", "convertAnother", "Ljava.lang.Object;", 0x1, NULL },
    { "convertWithId:withIOSClass:withComThoughtworksXstreamConvertersConverter:", "convert", "Ljava.lang.Object;", 0x4, NULL },
    { "addInformationToWithComThoughtworksXstreamConvertersErrorWriter:withIOSClass:withComThoughtworksXstreamConvertersConverter:withId:", "addInformationTo", "V", 0x2, NULL },
    { "addCompletionCallbackWithJavaLangRunnable:withInt:", "addCompletionCallback", "V", 0x1, NULL },
    { "currentObject", NULL, "Ljava.lang.Object;", 0x1, NULL },
    { "getRequiredType", NULL, "Ljava.lang.Class;", 0x1, NULL },
    { "getWithId:", "get", "Ljava.lang.Object;", 0x1, NULL },
    { "putWithId:withId:", "put", "V", 0x1, NULL },
    { "keys", NULL, "Ljava.util.Iterator;", 0x1, NULL },
    { "lazilyCreateDataHolder", NULL, "V", 0x2, NULL },
    { "startWithComThoughtworksXstreamConvertersDataHolder:", "start", "Ljava.lang.Object;", 0x1, NULL },
    { "getMapper", NULL, "Lcom.thoughtworks.xstream.mapper.Mapper;", 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "root_", NULL, 0x2, "Ljava.lang.Object;", NULL,  },
    { "reader_", NULL, 0x4, "Lcom.thoughtworks.xstream.io.HierarchicalStreamReader;", NULL,  },
    { "converterLookup_", NULL, 0x2, "Lcom.thoughtworks.xstream.converters.ConverterLookup;", NULL,  },
    { "mapper_", NULL, 0x2, "Lcom.thoughtworks.xstream.mapper.Mapper;", NULL,  },
    { "types_", NULL, 0x2, "Lcom.thoughtworks.xstream.core.util.FastStack;", NULL,  },
    { "dataHolder_", NULL, 0x2, "Lcom.thoughtworks.xstream.converters.DataHolder;", NULL,  },
    { "validationList_", NULL, 0x12, "Lcom.thoughtworks.xstream.core.util.PrioritizedList;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreTreeUnmarshaller = { "TreeUnmarshaller", "com.thoughtworks.xstream.core", NULL, 0x1, 14, methods, 7, fields, 0, NULL};
  return &_ComThoughtworksXstreamCoreTreeUnmarshaller;
}

@end
