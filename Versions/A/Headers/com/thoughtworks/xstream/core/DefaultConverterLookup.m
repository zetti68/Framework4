//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/core/DefaultConverterLookup.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/core/DefaultConverterLookup.java"

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/converters/Converter.h"
#include "com/thoughtworks/xstream/core/Caching.h"
#include "com/thoughtworks/xstream/core/DefaultConverterLookup.h"
#include "com/thoughtworks/xstream/core/util/PrioritizedList.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/WeakHashMap.h"

@interface ComThoughtworksXstreamCoreDefaultConverterLookup () {
 @public
  ComThoughtworksXstreamCoreUtilPrioritizedList *converters_;
  id<JavaUtilMap> typeToConverterMap_;
}

- (id)readResolve;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreDefaultConverterLookup, converters_, ComThoughtworksXstreamCoreUtilPrioritizedList *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamCoreDefaultConverterLookup, typeToConverterMap_, id<JavaUtilMap>)

__attribute__((unused)) static id ComThoughtworksXstreamCoreDefaultConverterLookup_readResolve(ComThoughtworksXstreamCoreDefaultConverterLookup *self);


#line 33
@implementation ComThoughtworksXstreamCoreDefaultConverterLookup


#line 38
- (instancetype)init {
  ComThoughtworksXstreamCoreDefaultConverterLookup_init(self);
  return self;
}


#line 45
- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper {
  ComThoughtworksXstreamCoreDefaultConverterLookup_initWithComThoughtworksXstreamMapperMapper_(self, mapper);
  return self;
}


#line 48
- (id<ComThoughtworksXstreamConvertersConverter>)lookupConverterForTypeWithIOSClass:(IOSClass *)type {
  id<ComThoughtworksXstreamConvertersConverter> cachedConverter = (id<ComThoughtworksXstreamConvertersConverter>) check_protocol_cast([((id<JavaUtilMap>) nil_chk(typeToConverterMap_)) getWithId:type], @protocol(ComThoughtworksXstreamConvertersConverter));
  if (cachedConverter != nil) {
    return cachedConverter;
  }
  id<JavaUtilIterator> iterator = [((ComThoughtworksXstreamCoreUtilPrioritizedList *) nil_chk(converters_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    id<ComThoughtworksXstreamConvertersConverter> converter = (id<ComThoughtworksXstreamConvertersConverter>) check_protocol_cast([iterator next], @protocol(ComThoughtworksXstreamConvertersConverter));
    if ([((id<ComThoughtworksXstreamConvertersConverter>) nil_chk(converter)) canConvertWithIOSClass:type]) {
      (void) [typeToConverterMap_ putWithId:type withId:converter];
      return converter;
    }
  }
  @throw new_ComThoughtworksXstreamConvertersConversionException_initWithNSString_(JreStrcat("$@", @"No converter specified for ", type));
}

- (void)registerConverterWithComThoughtworksXstreamConvertersConverter:(id<ComThoughtworksXstreamConvertersConverter>)converter
                                                               withInt:(jint)priority {
  [((ComThoughtworksXstreamCoreUtilPrioritizedList *) nil_chk(converters_)) addWithId:converter withInt:priority];
  for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(typeToConverterMap_)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    IOSClass *type = (IOSClass *) check_class_cast([iter next], [IOSClass class]);
    if ([((id<ComThoughtworksXstreamConvertersConverter>) nil_chk(converter)) canConvertWithIOSClass:type]) {
      [iter remove];
    }
  }
}


#line 74
- (void)flushCache {
  [((id<JavaUtilMap>) nil_chk(typeToConverterMap_)) clear];
  id<JavaUtilIterator> iterator = [((ComThoughtworksXstreamCoreUtilPrioritizedList *) nil_chk(converters_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    id<ComThoughtworksXstreamConvertersConverter> converter = (id<ComThoughtworksXstreamConvertersConverter>) check_protocol_cast([iterator next], @protocol(ComThoughtworksXstreamConvertersConverter));
    if ([ComThoughtworksXstreamCoreCaching_class_() isInstance:converter]) {
      [((id<ComThoughtworksXstreamCoreCaching>) nil_chk(((id<ComThoughtworksXstreamCoreCaching>) check_protocol_cast(converter, @protocol(ComThoughtworksXstreamCoreCaching))))) flushCache];
    }
  }
}

- (id)readResolve {
  return ComThoughtworksXstreamCoreDefaultConverterLookup_readResolve(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "DefaultConverterLookup", NULL, 0x1, NULL, NULL },
    { "initWithComThoughtworksXstreamMapperMapper:", "DefaultConverterLookup", NULL, 0x1, NULL, NULL },
    { "lookupConverterForTypeWithIOSClass:", "lookupConverterForType", "Lcom.thoughtworks.xstream.converters.Converter;", 0x1, NULL, NULL },
    { "registerConverterWithComThoughtworksXstreamConvertersConverter:withInt:", "registerConverter", "V", 0x1, NULL, NULL },
    { "flushCache", NULL, "V", 0x1, NULL, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "converters_", NULL, 0x12, "Lcom.thoughtworks.xstream.core.util.PrioritizedList;", NULL, NULL,  },
    { "typeToConverterMap_", NULL, 0x82, "Ljava.util.Map;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreDefaultConverterLookup = { 2, "DefaultConverterLookup", "com.thoughtworks.xstream.core", NULL, 0x1, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamCoreDefaultConverterLookup;
}

@end


#line 38
void ComThoughtworksXstreamCoreDefaultConverterLookup_init(ComThoughtworksXstreamCoreDefaultConverterLookup *self) {
  (void) NSObject_init(self);
  self->converters_ = new_ComThoughtworksXstreamCoreUtilPrioritizedList_init();
  
#line 39
  (void) ComThoughtworksXstreamCoreDefaultConverterLookup_readResolve(self);
}


#line 38
ComThoughtworksXstreamCoreDefaultConverterLookup *new_ComThoughtworksXstreamCoreDefaultConverterLookup_init() {
  ComThoughtworksXstreamCoreDefaultConverterLookup *self = [ComThoughtworksXstreamCoreDefaultConverterLookup alloc];
  ComThoughtworksXstreamCoreDefaultConverterLookup_init(self);
  return self;
}


#line 45
void ComThoughtworksXstreamCoreDefaultConverterLookup_initWithComThoughtworksXstreamMapperMapper_(ComThoughtworksXstreamCoreDefaultConverterLookup *self, id<ComThoughtworksXstreamMapperMapper> mapper) {
  (void) NSObject_init(self);
  self->converters_ = new_ComThoughtworksXstreamCoreUtilPrioritizedList_init();
}


#line 45
ComThoughtworksXstreamCoreDefaultConverterLookup *new_ComThoughtworksXstreamCoreDefaultConverterLookup_initWithComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamMapperMapper> mapper) {
  ComThoughtworksXstreamCoreDefaultConverterLookup *self = [ComThoughtworksXstreamCoreDefaultConverterLookup alloc];
  ComThoughtworksXstreamCoreDefaultConverterLookup_initWithComThoughtworksXstreamMapperMapper_(self, mapper);
  return self;
}


#line 85
id ComThoughtworksXstreamCoreDefaultConverterLookup_readResolve(ComThoughtworksXstreamCoreDefaultConverterLookup *self) {
  self->typeToConverterMap_ = JavaUtilCollections_synchronizedMapWithJavaUtilMap_(new_JavaUtilWeakHashMap_init());
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamCoreDefaultConverterLookup)
