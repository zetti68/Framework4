//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/AbstractReferenceUnmarshaller.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/AbstractReferenceUnmarshaller.java"

#include "IOSClass.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/converters/Converter.h"
#include "com/thoughtworks/xstream/converters/ConverterLookup.h"
#include "com/thoughtworks/xstream/core/AbstractReferenceUnmarshaller.h"
#include "com/thoughtworks/xstream/core/TreeUnmarshaller.h"
#include "com/thoughtworks/xstream/core/util/FastStack.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

BOOL ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller_initialized = NO;


#line 31
@implementation ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller

id ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller_NULL__;


#line 37
- (instancetype)initWithId:(id)root
withComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)converterLookup
withComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper {
  if (self =
#line 39
  [super initWithId:root withComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamConvertersConverterLookup:converterLookup withComThoughtworksXstreamMapperMapper:mapper]) {
    values_ = [[JavaUtilHashMap alloc] init];
    parentStack_ =
#line 35
    [[ComThoughtworksXstreamCoreUtilFastStack alloc] initWithInt:16];
  }
  return self;
}


#line 42
- (id)convertWithId:(id)parent
       withIOSClass:(IOSClass *)type
withComThoughtworksXstreamConvertersConverter:(id<ComThoughtworksXstreamConvertersConverter>)converter {
  
#line 43
  if ([((ComThoughtworksXstreamCoreUtilFastStack *) nil_chk(parentStack_)) size] > 0) {
    id parentReferenceKey = [parentStack_ peek];
    if (parentReferenceKey != nil) {
      if (![((id<JavaUtilMap>) nil_chk(values_)) containsKeyWithId:parentReferenceKey]) {
        (void) [values_ putWithId:parentReferenceKey withId:parent];
      }
    }
  }
  id result;
  NSString *attributeName = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk([self getMapper])) aliasForSystemAttributeWithNSString:@"reference"];
  NSString *reference = attributeName == nil ? nil : [((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader_)) getAttributeWithNSString:attributeName];
  if (reference != nil) {
    id cache = [((id<JavaUtilMap>) nil_chk(values_)) getWithId:[self getReferenceKeyWithNSString:reference]];
    if (cache == nil) {
      ComThoughtworksXstreamConvertersConversionException *ex = [[ComThoughtworksXstreamConvertersConversionException alloc] initWithNSString:@"Invalid reference"];
      [ex addWithNSString:@"reference" withNSString:reference];
      @throw ex;
    }
    result = cache == ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller_NULL__ ? nil : cache;
  }
  else {
    
#line 63
    id currentReferenceKey = [self getCurrentReferenceKey];
    (void) [parentStack_ pushWithId:currentReferenceKey];
    result = [super convertWithId:parent withIOSClass:type withComThoughtworksXstreamConvertersConverter:converter];
    if (currentReferenceKey != nil) {
      (void) [((id<JavaUtilMap>) nil_chk(values_)) putWithId:currentReferenceKey withId:result == nil ? ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller_NULL__ : result];
    }
    [parentStack_ popSilently];
  }
  return result;
}


#line 74
- (id)getReferenceKeyWithNSString:(NSString *)reference {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 75
- (id)getCurrentReferenceKey {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller *)other {
  [super copyAllFieldsTo:other];
  other->parentStack_ = parentStack_;
  other->values_ = values_;
}

+ (void)initialize {
  if (self == [ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller class]) {
    ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller_NULL__ =
#line 33
    [[NSObject alloc] init];
    ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithId:withComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersConverterLookup:withComThoughtworksXstreamMapperMapper:", "AbstractReferenceUnmarshaller", NULL, 0x1, NULL },
    { "convertWithId:withIOSClass:withComThoughtworksXstreamConvertersConverter:", "convert", "Ljava.lang.Object;", 0x4, NULL },
    { "getReferenceKeyWithNSString:", "getReferenceKey", "Ljava.lang.Object;", 0x404, NULL },
    { "getCurrentReferenceKey", NULL, "Ljava.lang.Object;", 0x404, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "NULL__", "NULL", 0x1a, "Ljava.lang.Object;", &ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller_NULL__,  },
    { "values_", NULL, 0x2, "Ljava.util.Map;", NULL,  },
    { "parentStack_", NULL, 0x2, "Lcom.thoughtworks.xstream.core.util.FastStack;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller = { "AbstractReferenceUnmarshaller", "com.thoughtworks.xstream.core", NULL, 0x401, 4, methods, 3, fields, 0, NULL};
  return &_ComThoughtworksXstreamCoreAbstractReferenceUnmarshaller;
}

@end
