//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/AbstractReferenceMarshaller.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/AbstractReferenceMarshaller.java"

#include "IOSClass.h"
#include "com/thoughtworks/xstream/converters/ConversionException.h"
#include "com/thoughtworks/xstream/converters/Converter.h"
#include "com/thoughtworks/xstream/converters/ConverterLookup.h"
#include "com/thoughtworks/xstream/core/AbstractReferenceMarshaller.h"
#include "com/thoughtworks/xstream/core/TreeMarshaller.h"
#include "com/thoughtworks/xstream/core/util/ObjectIdDictionary.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamWriter.h"
#include "com/thoughtworks/xstream/io/path/Path.h"
#include "com/thoughtworks/xstream/io/path/PathTracker.h"
#include "com/thoughtworks/xstream/io/path/PathTrackingWriter.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/util/Iterator.h"


#line 34
@implementation ComThoughtworksXstreamCoreAbstractReferenceMarshaller


#line 41
- (instancetype)initWithComThoughtworksXstreamIoHierarchicalStreamWriter:(id<ComThoughtworksXstreamIoHierarchicalStreamWriter>)writer
                     withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)converterLookup
                                  withComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper {
  if (self =
#line 44
  [super initWithComThoughtworksXstreamIoHierarchicalStreamWriter:writer withComThoughtworksXstreamConvertersConverterLookup:converterLookup withComThoughtworksXstreamMapperMapper:mapper]) {
    references_ =
#line 36
    [[ComThoughtworksXstreamCoreUtilObjectIdDictionary alloc] init];
    implicitElements_ =
#line 37
    [[ComThoughtworksXstreamCoreUtilObjectIdDictionary alloc] init];
    pathTracker_ =
#line 38
    [[ComThoughtworksXstreamIoPathPathTracker alloc] init];
    
#line 45
    self->writer_ = [[ComThoughtworksXstreamIoPathPathTrackingWriter alloc] initWithComThoughtworksXstreamIoHierarchicalStreamWriter:writer withComThoughtworksXstreamIoPathPathTracker:pathTracker_];
  }
  return self;
}


#line 48
- (void)convertWithId:(id)item
withComThoughtworksXstreamConvertersConverter:(id<ComThoughtworksXstreamConvertersConverter>)converter {
  
#line 49
  if ([((id<ComThoughtworksXstreamMapperMapper>) nil_chk([self getMapper])) isImmutableValueTypeWithIOSClass:[nil_chk(item) getClass]]) {
    
#line 51
    [((id<ComThoughtworksXstreamConvertersConverter>) nil_chk(converter)) marshalWithId:item withComThoughtworksXstreamIoHierarchicalStreamWriter:writer_ withComThoughtworksXstreamConvertersMarshallingContext:self];
  }
  else {
    
#line 53
    ComThoughtworksXstreamIoPathPath *currentPath = [((ComThoughtworksXstreamIoPathPathTracker *) nil_chk(pathTracker_)) getPath];
    ComThoughtworksXstreamCoreAbstractReferenceMarshaller_Id *existingReference = (ComThoughtworksXstreamCoreAbstractReferenceMarshaller_Id *) check_class_cast([((ComThoughtworksXstreamCoreUtilObjectIdDictionary *) nil_chk(references_)) lookupIdWithId:item], [ComThoughtworksXstreamCoreAbstractReferenceMarshaller_Id class]);
    if (existingReference != nil && [existingReference getPath] != currentPath) {
      NSString *attributeName = [((id<ComThoughtworksXstreamMapperMapper>) nil_chk([self getMapper])) aliasForSystemAttributeWithNSString:@"reference"];
      if (attributeName != nil) {
        [((id<ComThoughtworksXstreamIoHierarchicalStreamWriter>) nil_chk(writer_)) addAttributeWithNSString:attributeName withNSString:[self createReferenceWithComThoughtworksXstreamIoPathPath:currentPath withId:[existingReference getItem]]];
      }
    }
    else {
      
#line 61
      id newReferenceKey = existingReference == nil ?
#line 62
      [self createReferenceKeyWithComThoughtworksXstreamIoPathPath:currentPath withId:item] :
#line 63
      [existingReference getItem];
      if (lastPath_ == nil || ![((ComThoughtworksXstreamIoPathPath *) nil_chk(currentPath)) isAncestorWithComThoughtworksXstreamIoPathPath:lastPath_]) {
        [self fireValidReferenceWithId:newReferenceKey];
        lastPath_ = currentPath;
        [references_ associateIdWithId:item withId:[[ComThoughtworksXstreamCoreAbstractReferenceMarshaller_Id alloc] initWithId:newReferenceKey withComThoughtworksXstreamIoPathPath:currentPath]];
      }
      [((id<ComThoughtworksXstreamConvertersConverter>) nil_chk(converter)) marshalWithId:item withComThoughtworksXstreamIoHierarchicalStreamWriter:writer_ withComThoughtworksXstreamConvertersMarshallingContext:[[ComThoughtworksXstreamCoreAbstractReferenceMarshaller_$1 alloc] initWithComThoughtworksXstreamCoreAbstractReferenceMarshaller:self withId:newReferenceKey withComThoughtworksXstreamIoPathPath:currentPath]];
    }
  }
}


#line 118
- (NSString *)createReferenceWithComThoughtworksXstreamIoPathPath:(ComThoughtworksXstreamIoPathPath *)currentPath
                                                           withId:(id)existingReferenceKey {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 119
- (id)createReferenceKeyWithComThoughtworksXstreamIoPathPath:(ComThoughtworksXstreamIoPathPath *)currentPath
                                                      withId:(id)item {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 120
- (void)fireValidReferenceWithId:(id)referenceKey {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamCoreAbstractReferenceMarshaller *)other {
  [super copyAllFieldsTo:other];
  other->implicitElements_ = implicitElements_;
  other->lastPath_ = lastPath_;
  other->pathTracker_ = pathTracker_;
  other->references_ = references_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamIoHierarchicalStreamWriter:withComThoughtworksXstreamConvertersConverterLookup:withComThoughtworksXstreamMapperMapper:", "AbstractReferenceMarshaller", NULL, 0x1, NULL },
    { "convertWithId:withComThoughtworksXstreamConvertersConverter:", "convert", "V", 0x1, NULL },
    { "createReferenceWithComThoughtworksXstreamIoPathPath:withId:", "createReference", "Ljava.lang.String;", 0x404, NULL },
    { "createReferenceKeyWithComThoughtworksXstreamIoPathPath:withId:", "createReferenceKey", "Ljava.lang.Object;", 0x404, NULL },
    { "fireValidReferenceWithId:", "fireValidReference", "V", 0x404, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "references_", NULL, 0x2, "Lcom.thoughtworks.xstream.core.util.ObjectIdDictionary;", NULL,  },
    { "implicitElements_", NULL, 0x2, "Lcom.thoughtworks.xstream.core.util.ObjectIdDictionary;", NULL,  },
    { "pathTracker_", NULL, 0x2, "Lcom.thoughtworks.xstream.io.path.PathTracker;", NULL,  },
    { "lastPath_", NULL, 0x2, "Lcom.thoughtworks.xstream.io.path.Path;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreAbstractReferenceMarshaller = { "AbstractReferenceMarshaller", "com.thoughtworks.xstream.core", NULL, 0x401, 5, methods, 4, fields, 0, NULL};
  return &_ComThoughtworksXstreamCoreAbstractReferenceMarshaller;
}

@end


#line 122
@implementation ComThoughtworksXstreamCoreAbstractReferenceMarshaller_Id


#line 125
- (instancetype)initWithId:(id)item
withComThoughtworksXstreamIoPathPath:(ComThoughtworksXstreamIoPathPath *)path {
  if (self = [super init]) {
    
#line 126
    self->item_ = item;
    
#line 127
    self->path_ = path;
  }
  return self;
}


#line 129
- (id)getItem {
  
#line 130
  return self->item_;
}


#line 132
- (ComThoughtworksXstreamIoPathPath *)getPath {
  
#line 133
  return self->path_;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamCoreAbstractReferenceMarshaller_Id *)other {
  [super copyAllFieldsTo:other];
  other->item_ = item_;
  other->path_ = path_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithId:withComThoughtworksXstreamIoPathPath:", "Id", NULL, 0x1, NULL },
    { "getItem", NULL, "Ljava.lang.Object;", 0x4, NULL },
    { "getPath", NULL, "Lcom.thoughtworks.xstream.io.path.Path;", 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "item_", NULL, 0x2, "Ljava.lang.Object;", NULL,  },
    { "path_", NULL, 0x2, "Lcom.thoughtworks.xstream.io.path.Path;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreAbstractReferenceMarshaller_Id = { "Id", "com.thoughtworks.xstream.core", "AbstractReferenceMarshaller", 0xa, 3, methods, 2, fields, 0, NULL};
  return &_ComThoughtworksXstreamCoreAbstractReferenceMarshaller_Id;
}

@end


#line 137
@implementation ComThoughtworksXstreamCoreAbstractReferenceMarshaller_ReferencedImplicitElementException


#line 138
- (instancetype)initWithId:(id)item
withComThoughtworksXstreamIoPathPath:(ComThoughtworksXstreamIoPathPath *)path {
  if (self =
#line 139
  [super initWithNSString:@"Cannot reference implicit element"]) {
    
#line 140
    [self addWithNSString:@"implicit-element" withNSString:[nil_chk(item) description]];
    
#line 141
    [self addWithNSString:@"referencing-element" withNSString:[((ComThoughtworksXstreamIoPathPath *) nil_chk(path)) description]];
  }
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithId:withComThoughtworksXstreamIoPathPath:", "ReferencedImplicitElementException", NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreAbstractReferenceMarshaller_ReferencedImplicitElementException = { "ReferencedImplicitElementException", "com.thoughtworks.xstream.core", "AbstractReferenceMarshaller", 0x9, 1, methods, 0, NULL, 0, NULL};
  return &_ComThoughtworksXstreamCoreAbstractReferenceMarshaller_ReferencedImplicitElementException;
}

@end

@implementation ComThoughtworksXstreamCoreAbstractReferenceMarshaller_$1


#line 71
- (void)putWithId:(id)key
           withId:(id)value {
  
#line 72
  [this$0_ putWithId:key withId:value];
}


#line 75
- (id<JavaUtilIterator>)keys {
  
#line 76
  return [this$0_ keys];
}


#line 79
- (id)getWithId:(id)key {
  
#line 80
  return [this$0_ getWithId:key];
}


#line 83
- (void)convertAnotherWithId:(id)nextItem
withComThoughtworksXstreamConvertersConverter:(id<ComThoughtworksXstreamConvertersConverter>)converter {
  
#line 84
  [this$0_ convertAnotherWithId:nextItem withComThoughtworksXstreamConvertersConverter:converter];
}


#line 87
- (void)convertAnotherWithId:(id)nextItem {
  
#line 88
  [this$0_ convertAnotherWithId:nextItem];
}


#line 91
- (void)replaceWithId:(id)original
               withId:(id)replacement {
  
#line 92
  [((ComThoughtworksXstreamCoreUtilObjectIdDictionary *) nil_chk(this$0_->references_)) associateIdWithId:replacement withId:[[ComThoughtworksXstreamCoreAbstractReferenceMarshaller_Id alloc] initWithId:val$newReferenceKey_ withComThoughtworksXstreamIoPathPath:val$currentPath_]];
}


#line 95
- (id)lookupReferenceWithId:(id)item {
  
#line 96
  ComThoughtworksXstreamCoreAbstractReferenceMarshaller_Id *id_ = (ComThoughtworksXstreamCoreAbstractReferenceMarshaller_Id *) check_class_cast([((ComThoughtworksXstreamCoreUtilObjectIdDictionary *) nil_chk(this$0_->references_)) lookupIdWithId:item], [ComThoughtworksXstreamCoreAbstractReferenceMarshaller_Id class]);
  return [((ComThoughtworksXstreamCoreAbstractReferenceMarshaller_Id *) nil_chk(id_)) getItem];
}


#line 103
- (ComThoughtworksXstreamIoPathPath *)currentPath {
  
#line 104
  return [((ComThoughtworksXstreamIoPathPathTracker *) nil_chk(this$0_->pathTracker_)) getPath];
}


#line 107
- (void)registerImplicitWithId:(id)item {
  
#line 108
  if ([((ComThoughtworksXstreamCoreUtilObjectIdDictionary *) nil_chk(this$0_->implicitElements_)) containsIdWithId:item]) {
    @throw [[ComThoughtworksXstreamCoreAbstractReferenceMarshaller_ReferencedImplicitElementException alloc] initWithId:item withComThoughtworksXstreamIoPathPath:val$currentPath_];
  }
  [this$0_->implicitElements_ associateIdWithId:item withId:val$newReferenceKey_];
}

- (instancetype)initWithComThoughtworksXstreamCoreAbstractReferenceMarshaller:(ComThoughtworksXstreamCoreAbstractReferenceMarshaller *)outer$
                                                                       withId:(id)capture$0
                                         withComThoughtworksXstreamIoPathPath:(ComThoughtworksXstreamIoPathPath *)capture$1 {
  this$0_ = outer$;
  val$newReferenceKey_ = capture$0;
  val$currentPath_ = capture$1;
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "putWithId:withId:", "put", "V", 0x1, NULL },
    { "keys", NULL, "Ljava.util.Iterator;", 0x1, NULL },
    { "getWithId:", "get", "Ljava.lang.Object;", 0x1, NULL },
    { "convertAnotherWithId:withComThoughtworksXstreamConvertersConverter:", "convertAnother", "V", 0x1, NULL },
    { "convertAnotherWithId:", "convertAnother", "V", 0x1, NULL },
    { "replaceWithId:withId:", "replace", "V", 0x1, NULL },
    { "lookupReferenceWithId:", "lookupReference", "Ljava.lang.Object;", 0x1, NULL },
    { "currentPath", NULL, "Lcom.thoughtworks.xstream.io.path.Path;", 0x1, NULL },
    { "registerImplicitWithId:", "registerImplicit", "V", 0x1, NULL },
    { "initWithComThoughtworksXstreamCoreAbstractReferenceMarshaller:withId:withComThoughtworksXstreamIoPathPath:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.thoughtworks.xstream.core.AbstractReferenceMarshaller;", NULL,  },
    { "val$newReferenceKey_", NULL, 0x1012, "Ljava.lang.Object;", NULL,  },
    { "val$currentPath_", NULL, 0x1012, "Lcom.thoughtworks.xstream.io.path.Path;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreAbstractReferenceMarshaller_$1 = { "$1", "com.thoughtworks.xstream.core", "AbstractReferenceMarshaller", 0x8000, 10, methods, 3, fields, 0, NULL};
  return &_ComThoughtworksXstreamCoreAbstractReferenceMarshaller_$1;
}

@end
