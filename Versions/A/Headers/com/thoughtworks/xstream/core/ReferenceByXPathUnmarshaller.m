//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/ReferenceByXPathUnmarshaller.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/core/ReferenceByXPathUnmarshaller.java"

#include "com/thoughtworks/xstream/converters/ConverterLookup.h"
#include "com/thoughtworks/xstream/core/ReferenceByXPathUnmarshaller.h"
#include "com/thoughtworks/xstream/io/AbstractReader.h"
#include "com/thoughtworks/xstream/io/HierarchicalStreamReader.h"
#include "com/thoughtworks/xstream/io/path/Path.h"
#include "com/thoughtworks/xstream/io/path/PathTracker.h"
#include "com/thoughtworks/xstream/io/path/PathTrackingReader.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"


#line 22
@implementation ComThoughtworksXstreamCoreReferenceByXPathUnmarshaller


#line 27
- (instancetype)initWithId:(id)root
withComThoughtworksXstreamIoHierarchicalStreamReader:(id<ComThoughtworksXstreamIoHierarchicalStreamReader>)reader
withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)converterLookup
withComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)mapper {
  if (self =
#line 29
  [super initWithId:root withComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamConvertersConverterLookup:converterLookup withComThoughtworksXstreamMapperMapper:mapper]) {
    pathTracker_ =
#line 24
    [[ComThoughtworksXstreamIoPathPathTracker alloc] init];
    
#line 30
    self->reader_ = [[ComThoughtworksXstreamIoPathPathTrackingReader alloc] initWithComThoughtworksXstreamIoHierarchicalStreamReader:reader withComThoughtworksXstreamIoPathPathTracker:pathTracker_];
    
#line 31
    isNameEncoding_ = [(id) [((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader)) underlyingReader] isKindOfClass:[ComThoughtworksXstreamIoAbstractReader class]];
  }
  return self;
}


#line 34
- (id)getReferenceKeyWithNSString:(NSString *)reference {
  
#line 35
  ComThoughtworksXstreamIoPathPath *path = [[ComThoughtworksXstreamIoPathPath alloc] initWithNSString:isNameEncoding_ ? [((ComThoughtworksXstreamIoAbstractReader *) nil_chk(((ComThoughtworksXstreamIoAbstractReader *) check_class_cast([((id<ComThoughtworksXstreamIoHierarchicalStreamReader>) nil_chk(reader_)) underlyingReader], [ComThoughtworksXstreamIoAbstractReader class])))) decodeNodeWithNSString:reference] : reference];
  
#line 37
  return [((NSString *) nil_chk(reference)) charAtWithInt:0] != '/' ? [((ComThoughtworksXstreamIoPathPath *) nil_chk([((ComThoughtworksXstreamIoPathPathTracker *) nil_chk(pathTracker_)) getPath])) applyWithComThoughtworksXstreamIoPathPath:path] : path;
}


#line 40
- (id)getCurrentReferenceKey {
  
#line 41
  return [((ComThoughtworksXstreamIoPathPathTracker *) nil_chk(pathTracker_)) getPath];
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamCoreReferenceByXPathUnmarshaller *)other {
  [super copyAllFieldsTo:other];
  other->isNameEncoding_ = isNameEncoding_;
  other->pathTracker_ = pathTracker_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithId:withComThoughtworksXstreamIoHierarchicalStreamReader:withComThoughtworksXstreamConvertersConverterLookup:withComThoughtworksXstreamMapperMapper:", "ReferenceByXPathUnmarshaller", NULL, 0x1, NULL },
    { "getReferenceKeyWithNSString:", "getReferenceKey", "Ljava.lang.Object;", 0x4, NULL },
    { "getCurrentReferenceKey", NULL, "Ljava.lang.Object;", 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pathTracker_", NULL, 0x2, "Lcom.thoughtworks.xstream.io.path.PathTracker;", NULL,  },
    { "isNameEncoding_", NULL, 0x4, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamCoreReferenceByXPathUnmarshaller = { "ReferenceByXPathUnmarshaller", "com.thoughtworks.xstream.core", NULL, 0x1, 3, methods, 2, fields, 0, NULL};
  return &_ComThoughtworksXstreamCoreReferenceByXPathUnmarshaller;
}

@end
