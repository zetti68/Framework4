//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/security/ExplicitTypePermission.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/security/ExplicitTypePermission.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/thoughtworks/xstream/security/ExplicitTypePermission.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"


#line 21
@implementation ComThoughtworksXstreamSecurityExplicitTypePermission


#line 28
- (instancetype)initWithIOSClassArray:(IOSObjectArray *)types {
  return
#line 29
  [self initComThoughtworksXstreamSecurityExplicitTypePermissionWithNSStringArray:[((ComThoughtworksXstreamSecurityExplicitTypePermission_$1 *) [[ComThoughtworksXstreamSecurityExplicitTypePermission_$1 alloc] initWithIOSClassArray:types]) getNames]];
}


#line 44
- (instancetype)initComThoughtworksXstreamSecurityExplicitTypePermissionWithNSStringArray:(IOSObjectArray *)names {
  if (self = [super init]) {
    
#line 45
    self->names_ = names == nil ? ((id) JavaUtilCollections_get_EMPTY_SET_()) : [[JavaUtilHashSet alloc] initWithJavaUtilCollection:[JavaUtilArrays asListWithNSObjectArray:names]];
  }
  return self;
}

- (instancetype)initWithNSStringArray:(IOSObjectArray *)names {
  return [self initComThoughtworksXstreamSecurityExplicitTypePermissionWithNSStringArray:
#line 44
names];
}


#line 48
- (jboolean)allowsWithIOSClass:(IOSClass *)type {
  
#line 49
  if (type == nil)
#line 50
  return NO;
  return [((id<JavaUtilSet>) nil_chk(names_)) containsWithId:[((IOSClass *) nil_chk(type)) getName]];
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamSecurityExplicitTypePermission *)other {
  [super copyAllFieldsTo:other];
  other->names_ = names_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithIOSClassArray:", "ExplicitTypePermission", NULL, 0x1, NULL },
    { "initWithNSStringArray:", "ExplicitTypePermission", NULL, 0x1, NULL },
    { "allowsWithIOSClass:", "allows", "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "names_", NULL, 0x10, "Ljava.util.Set;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamSecurityExplicitTypePermission = { "ExplicitTypePermission", "com.thoughtworks.xstream.security", NULL, 0x1, 3, methods, 1, fields, 0, NULL};
  return &_ComThoughtworksXstreamSecurityExplicitTypePermission;
}

@end

@implementation ComThoughtworksXstreamSecurityExplicitTypePermission_$1


#line 30
- (IOSObjectArray *)getNames {
  
#line 31
  if (val$types_ == nil)
#line 32
  return nil;
  IOSObjectArray *names = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(val$types_))->size_ type:[IOSClass classWithClass:[NSString class]]];
  for (jint i = 0; i < val$types_->size_; ++i)
#line 35
  IOSObjectArray_Set(names, i, [((IOSClass *) nil_chk(IOSObjectArray_Get(val$types_, i))) getName]);
  return names;
}

- (instancetype)initWithIOSClassArray:(IOSObjectArray *)capture$0 {
  val$types_ = capture$0;
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getNames", NULL, "[Ljava.lang.String;", 0x1, NULL },
    { "initWithIOSClassArray:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$types_", NULL, 0x1012, "[Ljava.lang.Class;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamSecurityExplicitTypePermission_$1 = { "$1", "com.thoughtworks.xstream.security", "ExplicitTypePermission", 0x8000, 2, methods, 1, fields, 0, NULL};
  return &_ComThoughtworksXstreamSecurityExplicitTypePermission_$1;
}

@end
