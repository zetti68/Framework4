//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/security/TypeHierarchyPermission.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/security/TypeHierarchyPermission.java"

#include "IOSClass.h"
#include "com/thoughtworks/xstream/security/TypeHierarchyPermission.h"


#line 15
@implementation ComThoughtworksXstreamSecurityTypeHierarchyPermission


#line 22
- (instancetype)initWithIOSClass:(IOSClass *)type {
  if (self = [super init]) {
    
#line 23
    self->type_ = type;
  }
  return self;
}


#line 26
- (jboolean)allowsWithIOSClass:(IOSClass *)type {
  
#line 27
  if (type == nil)
#line 28
  return NO;
  return [((IOSClass *) nil_chk(self->type_)) isAssignableFrom:type];
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamSecurityTypeHierarchyPermission *)other {
  [super copyAllFieldsTo:other];
  other->type_ = type_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithIOSClass:", "TypeHierarchyPermission", NULL, 0x1, NULL },
    { "allowsWithIOSClass:", "allows", "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "type_", NULL, 0x2, "Ljava.lang.Class;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamSecurityTypeHierarchyPermission = { "TypeHierarchyPermission", "com.thoughtworks.xstream.security", NULL, 0x1, 2, methods, 1, fields, 0, NULL};
  return &_ComThoughtworksXstreamSecurityTypeHierarchyPermission;
}

@end
