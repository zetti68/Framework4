//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/security/RegExpTypePermission.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/security/RegExpTypePermission.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/security/RegExpTypePermission.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface ComThoughtworksXstreamSecurityRegExpTypePermission () {
 @public
  IOSObjectArray *patterns_;
}

+ (IOSObjectArray *)getPatternsWithNSStringArray:(IOSObjectArray *)patterns;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamSecurityRegExpTypePermission, patterns_, IOSObjectArray *)

__attribute__((unused)) static IOSObjectArray *ComThoughtworksXstreamSecurityRegExpTypePermission_getPatternsWithNSStringArray_(IOSObjectArray *patterns);


#line 18
@implementation ComThoughtworksXstreamSecurityRegExpTypePermission


#line 22
- (instancetype)initWithNSStringArray:(IOSObjectArray *)patterns {
  ComThoughtworksXstreamSecurityRegExpTypePermission_initWithNSStringArray_(self, patterns);
  return self;
}


#line 26
- (instancetype)initWithJavaUtilRegexPatternArray:(IOSObjectArray *)patterns {
  ComThoughtworksXstreamSecurityRegExpTypePermission_initWithJavaUtilRegexPatternArray_(self, patterns);
  return self;
}


#line 30
- (jboolean)allowsWithIOSClass:(IOSClass *)type {
  if (type != nil) {
    NSString *name = [type getName];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(patterns_))->size_; ++i)
#line 34
    if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(IOSObjectArray_Get(patterns_, i))) matcherWithJavaLangCharSequence:name])) matches])
#line 35
    return YES;
  }
  return NO;
}


#line 40
+ (IOSObjectArray *)getPatternsWithNSStringArray:(IOSObjectArray *)patterns {
  return ComThoughtworksXstreamSecurityRegExpTypePermission_getPatternsWithNSStringArray_(patterns);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSStringArray:", "RegExpTypePermission", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilRegexPatternArray:", "RegExpTypePermission", NULL, 0x1, NULL, NULL },
    { "allowsWithIOSClass:", "allows", "Z", 0x1, NULL, NULL },
    { "getPatternsWithNSStringArray:", "getPatterns", "[Ljava.util.regex.Pattern;", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "patterns_", NULL, 0x12, "[Ljava.util.regex.Pattern;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamSecurityRegExpTypePermission = { 2, "RegExpTypePermission", "com.thoughtworks.xstream.security", NULL, 0x1, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamSecurityRegExpTypePermission;
}

@end


#line 22
void ComThoughtworksXstreamSecurityRegExpTypePermission_initWithNSStringArray_(ComThoughtworksXstreamSecurityRegExpTypePermission *self, IOSObjectArray *patterns) {
  (void) ComThoughtworksXstreamSecurityRegExpTypePermission_initWithJavaUtilRegexPatternArray_(self, ComThoughtworksXstreamSecurityRegExpTypePermission_getPatternsWithNSStringArray_(patterns));
}


#line 22
ComThoughtworksXstreamSecurityRegExpTypePermission *new_ComThoughtworksXstreamSecurityRegExpTypePermission_initWithNSStringArray_(IOSObjectArray *patterns) {
  ComThoughtworksXstreamSecurityRegExpTypePermission *self = [ComThoughtworksXstreamSecurityRegExpTypePermission alloc];
  ComThoughtworksXstreamSecurityRegExpTypePermission_initWithNSStringArray_(self, patterns);
  return self;
}


#line 26
void ComThoughtworksXstreamSecurityRegExpTypePermission_initWithJavaUtilRegexPatternArray_(ComThoughtworksXstreamSecurityRegExpTypePermission *self, IOSObjectArray *patterns) {
  (void) NSObject_init(self);
  
#line 27
  self->patterns_ = patterns == nil ? [IOSObjectArray newArrayWithLength:0 type:JavaUtilRegexPattern_class_()] : patterns;
}


#line 26
ComThoughtworksXstreamSecurityRegExpTypePermission *new_ComThoughtworksXstreamSecurityRegExpTypePermission_initWithJavaUtilRegexPatternArray_(IOSObjectArray *patterns) {
  ComThoughtworksXstreamSecurityRegExpTypePermission *self = [ComThoughtworksXstreamSecurityRegExpTypePermission alloc];
  ComThoughtworksXstreamSecurityRegExpTypePermission_initWithJavaUtilRegexPatternArray_(self, patterns);
  return self;
}


#line 40
IOSObjectArray *ComThoughtworksXstreamSecurityRegExpTypePermission_getPatternsWithNSStringArray_(IOSObjectArray *patterns) {
  ComThoughtworksXstreamSecurityRegExpTypePermission_initialize();
  
#line 41
  if (patterns == nil)
#line 42
  return nil;
  IOSObjectArray *array = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(patterns))->size_ type:JavaUtilRegexPattern_class_()];
  for (jint i = 0; i < array->size_; ++i)
#line 45
  (void) IOSObjectArray_Set(array, i, JavaUtilRegexPattern_compileWithNSString_(IOSObjectArray_Get(patterns, i)));
  return array;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamSecurityRegExpTypePermission)
