//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/security/RegExpTypePermission.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/security/RegExpTypePermission.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/thoughtworks/xstream/security/RegExpTypePermission.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"


#line 18
@implementation ComThoughtworksXstreamSecurityRegExpTypePermission


#line 22
- (instancetype)initWithNSStringArray:(IOSObjectArray *)patterns {
  return
#line 23
  [self initComThoughtworksXstreamSecurityRegExpTypePermissionWithJavaUtilRegexPatternArray:[ComThoughtworksXstreamSecurityRegExpTypePermission getPatternsWithNSStringArray:patterns]];
}


#line 26
- (instancetype)initComThoughtworksXstreamSecurityRegExpTypePermissionWithJavaUtilRegexPatternArray:(IOSObjectArray *)patterns {
  if (self = [super init]) {
    self->patterns_ = patterns == nil ? [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[JavaUtilRegexPattern class]]] : patterns;
  }
  return self;
}

- (instancetype)initWithJavaUtilRegexPatternArray:(IOSObjectArray *)patterns {
  return [self initComThoughtworksXstreamSecurityRegExpTypePermissionWithJavaUtilRegexPatternArray:
#line 26
patterns];
}


#line 30
- (jboolean)allowsWithIOSClass:(IOSClass *)type {
  
#line 31
  if (type != nil) {
    NSString *name = [type getName];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(patterns_))->size_; ++i)
#line 34
    if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(IOSObjectArray_Get(patterns_, i))) matcherWithJavaLangCharSequence:name])) matches])
#line 35
    return YES;
  }
  return NO;
}


#line 40
+ (IOSObjectArray *)getPatternsWithNSStringArray:(IOSObjectArray *)patterns {
  
#line 41
  if (patterns == nil)
#line 42
  return nil;
  IOSObjectArray *array = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(patterns))->size_ type:[IOSClass classWithClass:[JavaUtilRegexPattern class]]];
  for (jint i = 0; i < array->size_; ++i)
#line 45
  IOSObjectArray_Set(array, i, [JavaUtilRegexPattern compileWithNSString:IOSObjectArray_Get(patterns, i)]);
  return array;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamSecurityRegExpTypePermission *)other {
  [super copyAllFieldsTo:other];
  other->patterns_ = patterns_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSStringArray:", "RegExpTypePermission", NULL, 0x1, NULL },
    { "initWithJavaUtilRegexPatternArray:", "RegExpTypePermission", NULL, 0x1, NULL },
    { "allowsWithIOSClass:", "allows", "Z", 0x1, NULL },
    { "getPatternsWithNSStringArray:", "getPatterns", "[Ljava.util.regex.Pattern;", 0xa, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "patterns_", NULL, 0x12, "[Ljava.util.regex.Pattern;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamSecurityRegExpTypePermission = { "RegExpTypePermission", "com.thoughtworks.xstream.security", NULL, 0x1, 4, methods, 1, fields, 0, NULL};
  return &_ComThoughtworksXstreamSecurityRegExpTypePermission;
}

@end
