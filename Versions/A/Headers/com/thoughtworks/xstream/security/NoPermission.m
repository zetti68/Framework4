//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/security/NoPermission.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/security/NoPermission.java"

#include "IOSClass.h"
#include "com/thoughtworks/xstream/security/ForbiddenClassException.h"
#include "com/thoughtworks/xstream/security/NoPermission.h"
#include "com/thoughtworks/xstream/security/TypePermission.h"


#line 19
@implementation ComThoughtworksXstreamSecurityNoPermission


#line 29
- (instancetype)initWithComThoughtworksXstreamSecurityTypePermission:(id<ComThoughtworksXstreamSecurityTypePermission>)permission {
  if (self = [super init]) {
    
#line 30
    self->permission_ = permission;
  }
  return self;
}


#line 33
- (jboolean)allowsWithIOSClass:(IOSClass *)type {
  
#line 34
  if (permission_ == nil || [permission_ allowsWithIOSClass:type]) {
    @throw [[ComThoughtworksXstreamSecurityForbiddenClassException alloc] initWithIOSClass:type];
  }
  return NO;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamSecurityNoPermission *)other {
  [super copyAllFieldsTo:other];
  other->permission_ = permission_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamSecurityTypePermission:", "NoPermission", NULL, 0x1, NULL },
    { "allowsWithIOSClass:", "allows", "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "permission_", NULL, 0x12, "Lcom.thoughtworks.xstream.security.TypePermission;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamSecurityNoPermission = { "NoPermission", "com.thoughtworks.xstream.security", NULL, 0x1, 2, methods, 1, fields, 0, NULL};
  return &_ComThoughtworksXstreamSecurityNoPermission;
}

@end
