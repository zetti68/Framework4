//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/security/WildcardTypePermission.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/security/WildcardTypePermission.java"

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/security/RegExpTypePermission.h"
#include "com/thoughtworks/xstream/security/WildcardTypePermission.h"
#include "java/lang/StringBuffer.h"

@interface ComThoughtworksXstreamSecurityWildcardTypePermission ()

+ (IOSObjectArray *)getRegExpPatternsWithNSStringArray:(IOSObjectArray *)wildcards;

@end

__attribute__((unused)) static IOSObjectArray *ComThoughtworksXstreamSecurityWildcardTypePermission_getRegExpPatternsWithNSStringArray_(IOSObjectArray *wildcards);


#line 27
@implementation ComThoughtworksXstreamSecurityWildcardTypePermission


#line 32
- (instancetype)initWithNSStringArray:(IOSObjectArray *)patterns {
  ComThoughtworksXstreamSecurityWildcardTypePermission_initWithNSStringArray_(self, patterns);
  return self;
}


#line 36
+ (IOSObjectArray *)getRegExpPatternsWithNSStringArray:(IOSObjectArray *)wildcards {
  return ComThoughtworksXstreamSecurityWildcardTypePermission_getRegExpPatternsWithNSStringArray_(wildcards);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSStringArray:", "WildcardTypePermission", NULL, 0x1, NULL, NULL },
    { "getRegExpPatternsWithNSStringArray:", "getRegExpPatterns", "[Ljava.lang.String;", 0xa, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamSecurityWildcardTypePermission = { 2, "WildcardTypePermission", "com.thoughtworks.xstream.security", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamSecurityWildcardTypePermission;
}

@end


#line 32
void ComThoughtworksXstreamSecurityWildcardTypePermission_initWithNSStringArray_(ComThoughtworksXstreamSecurityWildcardTypePermission *self, IOSObjectArray *patterns) {
  (void) ComThoughtworksXstreamSecurityRegExpTypePermission_initWithNSStringArray_(self, ComThoughtworksXstreamSecurityWildcardTypePermission_getRegExpPatternsWithNSStringArray_(patterns));
}


#line 32
ComThoughtworksXstreamSecurityWildcardTypePermission *new_ComThoughtworksXstreamSecurityWildcardTypePermission_initWithNSStringArray_(IOSObjectArray *patterns) {
  ComThoughtworksXstreamSecurityWildcardTypePermission *self = [ComThoughtworksXstreamSecurityWildcardTypePermission alloc];
  ComThoughtworksXstreamSecurityWildcardTypePermission_initWithNSStringArray_(self, patterns);
  return self;
}


#line 36
IOSObjectArray *ComThoughtworksXstreamSecurityWildcardTypePermission_getRegExpPatternsWithNSStringArray_(IOSObjectArray *wildcards) {
  ComThoughtworksXstreamSecurityWildcardTypePermission_initialize();
  
#line 37
  if (wildcards == nil)
#line 38
  return nil;
  IOSObjectArray *regexps = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(wildcards))->size_ type:NSString_class_()];
  for (jint i = 0; i < wildcards->size_; ++i) {
    NSString *wildcardExpression = IOSObjectArray_Get(wildcards, i);
    JavaLangStringBuffer *result = new_JavaLangStringBuffer_initWithInt_(((jint) [((NSString *) nil_chk(wildcardExpression)) length]) * 2);
    (void) [result appendWithNSString:@"(?u)"];
    jint length = ((jint) [wildcardExpression length]);
    for (jint j = 0; j < length; j++) {
      jchar ch = [wildcardExpression charAtWithInt:j];
      switch (ch) {
        case '\\':
        case '.':
        case '+':
        case '|':
        case '[':
        case ']':
        case '(':
        case ')':
        case '^':
        case '$':
        (void) [((JavaLangStringBuffer *) nil_chk([result appendWithChar:'\\'])) appendWithChar:ch];
        break;
        
#line 61
        case '?':
        (void) [result appendWithChar:'.'];
        break;
        
#line 65
        case '*':
        
#line 67
        if (j + 1 < length && [wildcardExpression charAtWithInt:j + 1] == '*') {
          (void) [result appendWithNSString:@"[\\P{C}]*"];
          j++;
        }
        else {
          
#line 71
          (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([result appendWithNSString:@"[\\P{C}&&[^"])) appendWithChar:'.'])) appendWithNSString:@"]]*"];
        }
        break;
        
#line 75
        default:
        (void) [result appendWithChar:ch];
        break;
      }
    }
    (void) IOSObjectArray_Set(regexps, i, [result description]);
  }
  return regexps;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamSecurityWildcardTypePermission)
