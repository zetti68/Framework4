//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/mapper/AttributeMapper.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/mapper/AttributeMapper.java"

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/converters/Converter.h"
#include "com/thoughtworks/xstream/converters/ConverterLookup.h"
#include "com/thoughtworks/xstream/converters/SingleValueConverter.h"
#include "com/thoughtworks/xstream/converters/reflection/ReflectionProvider.h"
#include "com/thoughtworks/xstream/mapper/AttributeMapper.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "com/thoughtworks/xstream/mapper/MapperWrapper.h"
#include "java/lang/reflect/Field.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface ComThoughtworksXstreamMapperAttributeMapper () {
 @public
  id<JavaUtilMap> fieldNameToTypeMap_;
  id<JavaUtilSet> typeSet_;
  id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup_;
  id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider_;
  id<JavaUtilSet> fieldToUseAsAttribute_;
}

- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getLocalConverterFromItemTypeWithIOSClass:(IOSClass *)type;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAttributeMapper, fieldNameToTypeMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAttributeMapper, typeSet_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAttributeMapper, converterLookup_, id<ComThoughtworksXstreamConvertersConverterLookup>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAttributeMapper, reflectionProvider_, id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAttributeMapper, fieldToUseAsAttribute_, id<JavaUtilSet>)

__attribute__((unused)) static id<ComThoughtworksXstreamConvertersSingleValueConverter> ComThoughtworksXstreamMapperAttributeMapper_getLocalConverterFromItemTypeWithIOSClass_(ComThoughtworksXstreamMapperAttributeMapper *self, IOSClass *type);


#line 37
@implementation ComThoughtworksXstreamMapperAttributeMapper


#line 48
- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped {
  ComThoughtworksXstreamMapperAttributeMapper_initWithComThoughtworksXstreamMapperMapper_(self, wrapped);
  return self;
}


#line 52
- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped
       withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)converterLookup
withComThoughtworksXstreamConvertersReflectionReflectionProvider:(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)refProvider {
  ComThoughtworksXstreamMapperAttributeMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamConvertersReflectionReflectionProvider_(self, wrapped, converterLookup, refProvider);
  return self;
}


#line 61
- (void)setConverterLookupWithComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)converterLookup {
  self->converterLookup_ = converterLookup;
}

- (void)addAttributeForWithNSString:(NSString *)fieldName
                       withIOSClass:(IOSClass *)type {
  (void) [((id<JavaUtilMap>) nil_chk(fieldNameToTypeMap_)) putWithId:fieldName withId:type];
}


#line 69
- (void)addAttributeForWithIOSClass:(IOSClass *)type {
  [((id<JavaUtilSet>) nil_chk(typeSet_)) addWithId:type];
}

- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getLocalConverterFromItemTypeWithIOSClass:(IOSClass *)type {
  return ComThoughtworksXstreamMapperAttributeMapper_getLocalConverterFromItemTypeWithIOSClass_(self, type);
}


#line 85
- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getConverterFromItemTypeWithNSString:(NSString *)fieldName
                                                                                    withIOSClass:(IOSClass *)type {
  if ([((id<JavaUtilMap>) nil_chk(fieldNameToTypeMap_)) getWithId:fieldName] == type) {
    return ComThoughtworksXstreamMapperAttributeMapper_getLocalConverterFromItemTypeWithIOSClass_(self, type);
  }
  else {
    
#line 89
    return nil;
  }
}


#line 93
- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getConverterFromItemTypeWithNSString:(NSString *)fieldName
                                                                                    withIOSClass:(IOSClass *)type
                                                                                    withIOSClass:(IOSClass *)definedIn {
  
#line 95
  if ([self shouldLookForSingleValueConverterWithNSString:fieldName withIOSClass:type withIOSClass:definedIn]) {
    id<ComThoughtworksXstreamConvertersSingleValueConverter> converter = ComThoughtworksXstreamMapperAttributeMapper_getLocalConverterFromItemTypeWithIOSClass_(self, type);
    if (converter != nil) {
      return converter;
    }
  }
  return [super getConverterFromItemTypeWithNSString:fieldName withIOSClass:type withIOSClass:definedIn];
}


#line 104
- (jboolean)shouldLookForSingleValueConverterWithNSString:(NSString *)fieldName
                                             withIOSClass:(IOSClass *)type
                                             withIOSClass:(IOSClass *)definedIn {
  if ([((id<JavaUtilSet>) nil_chk(typeSet_)) containsWithId:type]) {
    return YES;
  }
  else
#line 107
  if ([((id<JavaUtilMap>) nil_chk(fieldNameToTypeMap_)) getWithId:fieldName] == type) {
    return YES;
  }
  else
#line 109
  if (fieldName != nil && definedIn != nil) {
    JavaLangReflectField *field = [((id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(reflectionProvider_)) getFieldWithIOSClass:definedIn withNSString:fieldName];
    return [((id<JavaUtilSet>) nil_chk(fieldToUseAsAttribute_)) containsWithId:field];
  }
  return NO;
}


#line 119
- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getConverterFromItemTypeWithIOSClass:(IOSClass *)type {
  if ([((id<JavaUtilSet>) nil_chk(typeSet_)) containsWithId:type]) {
    return ComThoughtworksXstreamMapperAttributeMapper_getLocalConverterFromItemTypeWithIOSClass_(self, type);
  }
  else {
    
#line 123
    return nil;
  }
}

- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getConverterFromAttributeWithNSString:(NSString *)attributeName {
  id<ComThoughtworksXstreamConvertersSingleValueConverter> converter = nil;
  IOSClass *type = (IOSClass *) check_class_cast([((id<JavaUtilMap>) nil_chk(fieldNameToTypeMap_)) getWithId:attributeName], [IOSClass class]);
  if (type != nil) {
    converter = ComThoughtworksXstreamMapperAttributeMapper_getLocalConverterFromItemTypeWithIOSClass_(self, type);
  }
  return converter;
}


#line 142
- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getConverterFromAttributeWithIOSClass:(IOSClass *)definedIn
                                                                                     withNSString:(NSString *)attribute {
  JavaLangReflectField *field = [((id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(reflectionProvider_)) getFieldWithIOSClass:definedIn withNSString:attribute];
  return [self getConverterFromAttributeWithIOSClass:definedIn withNSString:attribute withIOSClass:[((JavaLangReflectField *) nil_chk(field)) getType]];
}


#line 147
- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getConverterFromAttributeWithIOSClass:(IOSClass *)definedIn
                                                                                     withNSString:(NSString *)attribute
                                                                                     withIOSClass:(IOSClass *)type {
  if ([self shouldLookForSingleValueConverterWithNSString:attribute withIOSClass:type withIOSClass:definedIn]) {
    id<ComThoughtworksXstreamConvertersSingleValueConverter> converter = ComThoughtworksXstreamMapperAttributeMapper_getLocalConverterFromItemTypeWithIOSClass_(self, type);
    if (converter != nil) {
      return converter;
    }
  }
  return [super getConverterFromAttributeWithIOSClass:definedIn withNSString:attribute withIOSClass:type];
}


#line 163
- (void)addAttributeForWithJavaLangReflectField:(JavaLangReflectField *)field {
  [((id<JavaUtilSet>) nil_chk(fieldToUseAsAttribute_)) addWithId:field];
}


#line 175
- (void)addAttributeForWithIOSClass:(IOSClass *)definedIn
                       withNSString:(NSString *)fieldName {
  [((id<JavaUtilSet>) nil_chk(fieldToUseAsAttribute_)) addWithId:[((id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>) nil_chk(reflectionProvider_)) getFieldWithIOSClass:definedIn withNSString:fieldName]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamMapperMapper:", "AttributeMapper", NULL, 0x1, NULL, NULL },
    { "initWithComThoughtworksXstreamMapperMapper:withComThoughtworksXstreamConvertersConverterLookup:withComThoughtworksXstreamConvertersReflectionReflectionProvider:", "AttributeMapper", NULL, 0x1, NULL, NULL },
    { "setConverterLookupWithComThoughtworksXstreamConvertersConverterLookup:", "setConverterLookup", "V", 0x1, NULL, NULL },
    { "addAttributeForWithNSString:withIOSClass:", "addAttributeFor", "V", 0x1, NULL, NULL },
    { "addAttributeForWithIOSClass:", "addAttributeFor", "V", 0x1, NULL, NULL },
    { "getLocalConverterFromItemTypeWithIOSClass:", "getLocalConverterFromItemType", "Lcom.thoughtworks.xstream.converters.SingleValueConverter;", 0x2, NULL, NULL },
    { "getConverterFromItemTypeWithNSString:withIOSClass:", "getConverterFromItemType", "Lcom.thoughtworks.xstream.converters.SingleValueConverter;", 0x1, NULL, NULL },
    { "getConverterFromItemTypeWithNSString:withIOSClass:withIOSClass:", "getConverterFromItemType", "Lcom.thoughtworks.xstream.converters.SingleValueConverter;", 0x1, NULL, NULL },
    { "shouldLookForSingleValueConverterWithNSString:withIOSClass:withIOSClass:", "shouldLookForSingleValueConverter", "Z", 0x1, NULL, NULL },
    { "getConverterFromItemTypeWithIOSClass:", "getConverterFromItemType", "Lcom.thoughtworks.xstream.converters.SingleValueConverter;", 0x1, NULL, NULL },
    { "getConverterFromAttributeWithNSString:", "getConverterFromAttribute", "Lcom.thoughtworks.xstream.converters.SingleValueConverter;", 0x1, NULL, NULL },
    { "getConverterFromAttributeWithIOSClass:withNSString:", "getConverterFromAttribute", "Lcom.thoughtworks.xstream.converters.SingleValueConverter;", 0x1, NULL, NULL },
    { "getConverterFromAttributeWithIOSClass:withNSString:withIOSClass:", "getConverterFromAttribute", "Lcom.thoughtworks.xstream.converters.SingleValueConverter;", 0x1, NULL, NULL },
    { "addAttributeForWithJavaLangReflectField:", "addAttributeFor", "V", 0x1, NULL, NULL },
    { "addAttributeForWithIOSClass:withNSString:", "addAttributeFor", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fieldNameToTypeMap_", NULL, 0x12, "Ljava.util.Map;", NULL, NULL,  },
    { "typeSet_", NULL, 0x12, "Ljava.util.Set;", NULL, NULL,  },
    { "converterLookup_", NULL, 0x2, "Lcom.thoughtworks.xstream.converters.ConverterLookup;", NULL, NULL,  },
    { "reflectionProvider_", NULL, 0x2, "Lcom.thoughtworks.xstream.converters.reflection.ReflectionProvider;", NULL, NULL,  },
    { "fieldToUseAsAttribute_", NULL, 0x12, "Ljava.util.Set;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamMapperAttributeMapper = { 2, "AttributeMapper", "com.thoughtworks.xstream.mapper", NULL, 0x1, 15, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamMapperAttributeMapper;
}

@end


#line 48
void ComThoughtworksXstreamMapperAttributeMapper_initWithComThoughtworksXstreamMapperMapper_(ComThoughtworksXstreamMapperAttributeMapper *self, id<ComThoughtworksXstreamMapperMapper> wrapped) {
  (void) ComThoughtworksXstreamMapperAttributeMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamConvertersReflectionReflectionProvider_(self, wrapped, nil, nil);
}


#line 48
ComThoughtworksXstreamMapperAttributeMapper *new_ComThoughtworksXstreamMapperAttributeMapper_initWithComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamMapperMapper> wrapped) {
  ComThoughtworksXstreamMapperAttributeMapper *self = [ComThoughtworksXstreamMapperAttributeMapper alloc];
  ComThoughtworksXstreamMapperAttributeMapper_initWithComThoughtworksXstreamMapperMapper_(self, wrapped);
  return self;
}


#line 52
void ComThoughtworksXstreamMapperAttributeMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamConvertersReflectionReflectionProvider_(ComThoughtworksXstreamMapperAttributeMapper *self, id<ComThoughtworksXstreamMapperMapper> wrapped, id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup, id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> refProvider) {
  (void) ComThoughtworksXstreamMapperMapperWrapper_initWithComThoughtworksXstreamMapperMapper_(self, wrapped);
  self->fieldNameToTypeMap_ = new_JavaUtilHashMap_init();
  self->typeSet_ = new_JavaUtilHashSet_init();
  self->fieldToUseAsAttribute_ = new_JavaUtilHashSet_init();
  
#line 54
  self->converterLookup_ = converterLookup;
  self->reflectionProvider_ = refProvider;
}


#line 52
ComThoughtworksXstreamMapperAttributeMapper *new_ComThoughtworksXstreamMapperAttributeMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamConvertersReflectionReflectionProvider_(id<ComThoughtworksXstreamMapperMapper> wrapped, id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup, id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> refProvider) {
  ComThoughtworksXstreamMapperAttributeMapper *self = [ComThoughtworksXstreamMapperAttributeMapper alloc];
  ComThoughtworksXstreamMapperAttributeMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamConvertersReflectionReflectionProvider_(self, wrapped, converterLookup, refProvider);
  return self;
}


#line 73
id<ComThoughtworksXstreamConvertersSingleValueConverter> ComThoughtworksXstreamMapperAttributeMapper_getLocalConverterFromItemTypeWithIOSClass_(ComThoughtworksXstreamMapperAttributeMapper *self, IOSClass *type) {
  id<ComThoughtworksXstreamConvertersConverter> converter = [((id<ComThoughtworksXstreamConvertersConverterLookup>) nil_chk(self->converterLookup_)) lookupConverterForTypeWithIOSClass:type];
  if (converter != nil && [ComThoughtworksXstreamConvertersSingleValueConverter_class_() isInstance:converter]) {
    return (id<ComThoughtworksXstreamConvertersSingleValueConverter>) check_protocol_cast(converter, @protocol(ComThoughtworksXstreamConvertersSingleValueConverter));
  }
  else {
    
#line 78
    return nil;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamMapperAttributeMapper)
