//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/mapper/AnnotationMapper.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/mapper/AnnotationMapper.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/InitializationException.h"
#include "com/thoughtworks/xstream/annotations/XStreamAlias.h"
#include "com/thoughtworks/xstream/annotations/XStreamAliasType.h"
#include "com/thoughtworks/xstream/annotations/XStreamAsAttribute.h"
#include "com/thoughtworks/xstream/annotations/XStreamConverter.h"
#include "com/thoughtworks/xstream/annotations/XStreamConverters.h"
#include "com/thoughtworks/xstream/annotations/XStreamImplicit.h"
#include "com/thoughtworks/xstream/annotations/XStreamImplicitCollection.h"
#include "com/thoughtworks/xstream/annotations/XStreamInclude.h"
#include "com/thoughtworks/xstream/annotations/XStreamOmitField.h"
#include "com/thoughtworks/xstream/converters/Converter.h"
#include "com/thoughtworks/xstream/converters/ConverterLookup.h"
#include "com/thoughtworks/xstream/converters/ConverterRegistry.h"
#include "com/thoughtworks/xstream/converters/SingleValueConverter.h"
#include "com/thoughtworks/xstream/converters/SingleValueConverterWrapper.h"
#include "com/thoughtworks/xstream/converters/reflection/ReflectionProvider.h"
#include "com/thoughtworks/xstream/core/ClassLoaderReference.h"
#include "com/thoughtworks/xstream/core/JVM.h"
#include "com/thoughtworks/xstream/core/util/DependencyInjectionFactory.h"
#include "com/thoughtworks/xstream/core/util/TypedNull.h"
#include "com/thoughtworks/xstream/mapper/AnnotationMapper.h"
#include "com/thoughtworks/xstream/mapper/AttributeMapper.h"
#include "com/thoughtworks/xstream/mapper/ClassAliasingMapper.h"
#include "com/thoughtworks/xstream/mapper/DefaultImplementationsMapper.h"
#include "com/thoughtworks/xstream/mapper/FieldAliasingMapper.h"
#include "com/thoughtworks/xstream/mapper/ImplicitCollectionMapper.h"
#include "com/thoughtworks/xstream/mapper/LocalConversionMapper.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "com/thoughtworks/xstream/mapper/MapperWrapper.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/NoSuchFieldException.h"
#include "java/lang/System.h"
#include "java/lang/Void.h"
#include "java/lang/reflect/Array.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/GenericArrayType.h"
#include "java/lang/reflect/Modifier.h"
#include "java/lang/reflect/ParameterizedType.h"
#include "java/lang/reflect/Type.h"
#include "java/lang/reflect/TypeVariable.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface ComThoughtworksXstreamMapperAnnotationMapper () {
 @public
  jboolean locked_;
  IOSObjectArray *arguments_;
  id<ComThoughtworksXstreamConvertersConverterRegistry> converterRegistry_;
  ComThoughtworksXstreamMapperClassAliasingMapper *classAliasingMapper_;
  ComThoughtworksXstreamMapperDefaultImplementationsMapper *defaultImplementationsMapper_;
  ComThoughtworksXstreamMapperImplicitCollectionMapper *implicitCollectionMapper_;
  ComThoughtworksXstreamMapperFieldAliasingMapper *fieldAliasingMapper_;
  ComThoughtworksXstreamMapperAttributeMapper *attributeMapper_;
  ComThoughtworksXstreamMapperLocalConversionMapper *localConversionMapper_;
  id<JavaUtilMap> converterCache_;
  id<JavaUtilSet> annotatedTypes_;
}

- (void)processAnnotationsWithIOSClass:(IOSClass *)initialType;

- (void)processTypesWithJavaUtilSet:(id<JavaUtilSet>)types;

- (void)addParametrizedTypesWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                    withJavaUtilSet:(id<JavaUtilSet>)types;

- (void)processConverterAnnotationsWithIOSClass:(IOSClass *)type;

- (void)processAliasAnnotationWithIOSClass:(IOSClass *)type
                           withJavaUtilSet:(id<JavaUtilSet>)types;

- (void)processAliasTypeAnnotationWithIOSClass:(IOSClass *)type;

- (void)processImplicitCollectionAnnotationWithIOSClass:(IOSClass *)type;

- (void)processFieldAliasAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field;

- (void)processAsAttributeAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field;

- (void)processImplicitAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field;

- (void)processOmitFieldAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field;

- (void)processLocalConverterAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field;

- (id<ComThoughtworksXstreamConvertersConverter>)cacheConverterWithComThoughtworksXstreamAnnotationsXStreamConverter:(id<ComThoughtworksXstreamAnnotationsXStreamConverter>)annotation
                                                                                                        withIOSClass:(IOSClass *)targetType;

- (IOSClass *)getClassWithJavaLangReflectType:(id<JavaLangReflectType>)typeArgument;

- (void)setupMappers;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAnnotationMapper, arguments_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAnnotationMapper, converterRegistry_, id<ComThoughtworksXstreamConvertersConverterRegistry>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAnnotationMapper, classAliasingMapper_, ComThoughtworksXstreamMapperClassAliasingMapper *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAnnotationMapper, defaultImplementationsMapper_, ComThoughtworksXstreamMapperDefaultImplementationsMapper *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAnnotationMapper, implicitCollectionMapper_, ComThoughtworksXstreamMapperImplicitCollectionMapper *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAnnotationMapper, fieldAliasingMapper_, ComThoughtworksXstreamMapperFieldAliasingMapper *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAnnotationMapper, attributeMapper_, ComThoughtworksXstreamMapperAttributeMapper *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAnnotationMapper, localConversionMapper_, ComThoughtworksXstreamMapperLocalConversionMapper *)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAnnotationMapper, converterCache_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAnnotationMapper, annotatedTypes_, id<JavaUtilSet>)

__attribute__((unused)) static void ComThoughtworksXstreamMapperAnnotationMapper_processAnnotationsWithIOSClass_(ComThoughtworksXstreamMapperAnnotationMapper *self, IOSClass *initialType);

__attribute__((unused)) static void ComThoughtworksXstreamMapperAnnotationMapper_processTypesWithJavaUtilSet_(ComThoughtworksXstreamMapperAnnotationMapper *self, id<JavaUtilSet> types);

__attribute__((unused)) static void ComThoughtworksXstreamMapperAnnotationMapper_addParametrizedTypesWithJavaLangReflectType_withJavaUtilSet_(ComThoughtworksXstreamMapperAnnotationMapper *self, id<JavaLangReflectType> type, id<JavaUtilSet> types);

__attribute__((unused)) static void ComThoughtworksXstreamMapperAnnotationMapper_processConverterAnnotationsWithIOSClass_(ComThoughtworksXstreamMapperAnnotationMapper *self, IOSClass *type);

__attribute__((unused)) static void ComThoughtworksXstreamMapperAnnotationMapper_processAliasAnnotationWithIOSClass_withJavaUtilSet_(ComThoughtworksXstreamMapperAnnotationMapper *self, IOSClass *type, id<JavaUtilSet> types);

__attribute__((unused)) static void ComThoughtworksXstreamMapperAnnotationMapper_processAliasTypeAnnotationWithIOSClass_(ComThoughtworksXstreamMapperAnnotationMapper *self, IOSClass *type);

__attribute__((unused)) static void ComThoughtworksXstreamMapperAnnotationMapper_processImplicitCollectionAnnotationWithIOSClass_(ComThoughtworksXstreamMapperAnnotationMapper *self, IOSClass *type);

__attribute__((unused)) static void ComThoughtworksXstreamMapperAnnotationMapper_processFieldAliasAnnotationWithJavaLangReflectField_(ComThoughtworksXstreamMapperAnnotationMapper *self, JavaLangReflectField *field);

__attribute__((unused)) static void ComThoughtworksXstreamMapperAnnotationMapper_processAsAttributeAnnotationWithJavaLangReflectField_(ComThoughtworksXstreamMapperAnnotationMapper *self, JavaLangReflectField *field);

__attribute__((unused)) static void ComThoughtworksXstreamMapperAnnotationMapper_processImplicitAnnotationWithJavaLangReflectField_(ComThoughtworksXstreamMapperAnnotationMapper *self, JavaLangReflectField *field);

__attribute__((unused)) static void ComThoughtworksXstreamMapperAnnotationMapper_processOmitFieldAnnotationWithJavaLangReflectField_(ComThoughtworksXstreamMapperAnnotationMapper *self, JavaLangReflectField *field);

__attribute__((unused)) static void ComThoughtworksXstreamMapperAnnotationMapper_processLocalConverterAnnotationWithJavaLangReflectField_(ComThoughtworksXstreamMapperAnnotationMapper *self, JavaLangReflectField *field);

__attribute__((unused)) static id<ComThoughtworksXstreamConvertersConverter> ComThoughtworksXstreamMapperAnnotationMapper_cacheConverterWithComThoughtworksXstreamAnnotationsXStreamConverter_withIOSClass_(ComThoughtworksXstreamMapperAnnotationMapper *self, id<ComThoughtworksXstreamAnnotationsXStreamConverter> annotation, IOSClass *targetType);

__attribute__((unused)) static IOSClass *ComThoughtworksXstreamMapperAnnotationMapper_getClassWithJavaLangReflectType_(ComThoughtworksXstreamMapperAnnotationMapper *self, id<JavaLangReflectType> typeArgument);

__attribute__((unused)) static void ComThoughtworksXstreamMapperAnnotationMapper_setupMappers(ComThoughtworksXstreamMapperAnnotationMapper *self);

@interface ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet : JavaUtilLinkedHashSet {
 @public
  ComThoughtworksXstreamMapperAnnotationMapper *this$0_;
}

- (jboolean)addWithId:(IOSClass *)type;

- (instancetype)initWithComThoughtworksXstreamMapperAnnotationMapper:(ComThoughtworksXstreamMapperAnnotationMapper *)outer$;


@end

J2OBJC_EMPTY_STATIC_INIT(ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet)

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet, this$0_, ComThoughtworksXstreamMapperAnnotationMapper *)

__attribute__((unused)) static void ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet_initWithComThoughtworksXstreamMapperAnnotationMapper_(ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet *self, ComThoughtworksXstreamMapperAnnotationMapper *outer$);

__attribute__((unused)) static ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet *new_ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet_initWithComThoughtworksXstreamMapperAnnotationMapper_(ComThoughtworksXstreamMapperAnnotationMapper *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet)

@interface ComThoughtworksXstreamMapperAnnotationMapper_$1 : JavaUtilLinkedHashSet {
 @public
  id<JavaUtilSet> val$types_;
  id<JavaUtilSet> val$processedTypes_;
}

- (jboolean)addWithId:(id<JavaLangReflectType>)o;

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)capture$0
                    withJavaUtilSet:(id<JavaUtilSet>)capture$1;


@end

J2OBJC_EMPTY_STATIC_INIT(ComThoughtworksXstreamMapperAnnotationMapper_$1)

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAnnotationMapper_$1, val$types_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperAnnotationMapper_$1, val$processedTypes_, id<JavaUtilSet>)

__attribute__((unused)) static void ComThoughtworksXstreamMapperAnnotationMapper_$1_initWithJavaUtilSet_withJavaUtilSet_(ComThoughtworksXstreamMapperAnnotationMapper_$1 *self, id<JavaUtilSet> capture$0, id<JavaUtilSet> capture$1);

__attribute__((unused)) static ComThoughtworksXstreamMapperAnnotationMapper_$1 *new_ComThoughtworksXstreamMapperAnnotationMapper_$1_initWithJavaUtilSet_withJavaUtilSet_(id<JavaUtilSet> capture$0, id<JavaUtilSet> capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComThoughtworksXstreamMapperAnnotationMapper_$1)


#line 63
@implementation ComThoughtworksXstreamMapperAnnotationMapper


#line 85
- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped
     withComThoughtworksXstreamConvertersConverterRegistry:(id<ComThoughtworksXstreamConvertersConverterRegistry>)converterRegistry
       withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)converterLookup
        withComThoughtworksXstreamCoreClassLoaderReference:(ComThoughtworksXstreamCoreClassLoaderReference *)classLoaderReference
withComThoughtworksXstreamConvertersReflectionReflectionProvider:(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)reflectionProvider {
  ComThoughtworksXstreamMapperAnnotationMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterRegistry_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamCoreClassLoaderReference_withComThoughtworksXstreamConvertersReflectionReflectionProvider_(self, wrapped, converterRegistry, converterLookup, classLoaderReference, reflectionProvider);
  return self;
}


#line 107
- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped
     withComThoughtworksXstreamConvertersConverterRegistry:(id<ComThoughtworksXstreamConvertersConverterRegistry>)converterRegistry
       withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)converterLookup
                                   withJavaLangClassLoader:(JavaLangClassLoader *)classLoader
withComThoughtworksXstreamConvertersReflectionReflectionProvider:(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)reflectionProvider
                         withComThoughtworksXstreamCoreJVM:(ComThoughtworksXstreamCoreJVM *)jvm {
  ComThoughtworksXstreamMapperAnnotationMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterRegistry_withComThoughtworksXstreamConvertersConverterLookup_withJavaLangClassLoader_withComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamCoreJVM_(self, wrapped, converterRegistry, converterLookup, classLoader, reflectionProvider, jvm);
  return self;
}


#line 115
- (NSString *)realMemberWithIOSClass:(IOSClass *)type
                        withNSString:(NSString *)serialized {
  if (!locked_) {
    ComThoughtworksXstreamMapperAnnotationMapper_processAnnotationsWithIOSClass_(self, type);
  }
  return [super realMemberWithIOSClass:type withNSString:serialized];
}

- (NSString *)serializedClassWithIOSClass:(IOSClass *)type {
  if (!locked_) {
    ComThoughtworksXstreamMapperAnnotationMapper_processAnnotationsWithIOSClass_(self, type);
  }
  return [super serializedClassWithIOSClass:type];
}


#line 131
- (IOSClass *)defaultImplementationOfWithIOSClass:(IOSClass *)type {
  if (!locked_) {
    ComThoughtworksXstreamMapperAnnotationMapper_processAnnotationsWithIOSClass_(self, type);
  }
  IOSClass *defaultImplementation = [super defaultImplementationOfWithIOSClass:type];
  if (!locked_) {
    ComThoughtworksXstreamMapperAnnotationMapper_processAnnotationsWithIOSClass_(self, defaultImplementation);
  }
  return defaultImplementation;
}


#line 143
- (id<ComThoughtworksXstreamConvertersConverter>)getLocalConverterWithIOSClass:(IOSClass *)definedIn
                                                                  withNSString:(NSString *)fieldName {
  if (!locked_) {
    ComThoughtworksXstreamMapperAnnotationMapper_processAnnotationsWithIOSClass_(self, definedIn);
  }
  return [super getLocalConverterWithIOSClass:definedIn withNSString:fieldName];
}


#line 150
- (void)autodetectAnnotationsWithBoolean:(jboolean)mode {
  locked_ = !mode;
}

- (void)processAnnotationsWithIOSClassArray:(IOSObjectArray *)initialTypes {
  if (initialTypes == nil || initialTypes->size_ == 0) {
    return;
  }
  locked_ = YES;
  
#line 160
  id<JavaUtilSet> types = new_ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet_initWithComThoughtworksXstreamMapperAnnotationMapper_(self);
  {
    IOSObjectArray *a__ =
#line 161
    initialTypes;
    IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSClass * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSClass *initialType = *b__++;
      
#line 162
      [types addWithId:initialType];
    }
  }
  
#line 164
  ComThoughtworksXstreamMapperAnnotationMapper_processTypesWithJavaUtilSet_(self, types);
}


#line 167
- (void)processAnnotationsWithIOSClass:(IOSClass *)initialType {
  ComThoughtworksXstreamMapperAnnotationMapper_processAnnotationsWithIOSClass_(self, initialType);
}


#line 177
- (void)processTypesWithJavaUtilSet:(id<JavaUtilSet>)types {
  ComThoughtworksXstreamMapperAnnotationMapper_processTypesWithJavaUtilSet_(self, types);
}


#line 231
- (void)addParametrizedTypesWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                    withJavaUtilSet:(id<JavaUtilSet>)types {
  ComThoughtworksXstreamMapperAnnotationMapper_addParametrizedTypesWithJavaLangReflectType_withJavaUtilSet_(self, type, types);
}


#line 287
- (void)processConverterAnnotationsWithIOSClass:(IOSClass *)type {
  ComThoughtworksXstreamMapperAnnotationMapper_processConverterAnnotationsWithIOSClass_(self, type);
}


#line 316
- (void)processAliasAnnotationWithIOSClass:(IOSClass *)type
                           withJavaUtilSet:(id<JavaUtilSet>)types {
  ComThoughtworksXstreamMapperAnnotationMapper_processAliasAnnotationWithIOSClass_withJavaUtilSet_(self, type, types);
}


#line 336
- (void)processAliasTypeAnnotationWithIOSClass:(IOSClass *)type {
  ComThoughtworksXstreamMapperAnnotationMapper_processAliasTypeAnnotationWithIOSClass_(self, type);
}


#line 349
- (void)processImplicitCollectionAnnotationWithIOSClass:(IOSClass *)type {
  ComThoughtworksXstreamMapperAnnotationMapper_processImplicitCollectionAnnotationWithIOSClass_(self, type);
}


#line 389
- (void)processFieldAliasAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field {
  ComThoughtworksXstreamMapperAnnotationMapper_processFieldAliasAnnotationWithJavaLangReflectField_(self, field);
}


#line 402
- (void)processAsAttributeAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field {
  ComThoughtworksXstreamMapperAnnotationMapper_processAsAttributeAnnotationWithJavaLangReflectField_(self, field);
}


#line 415
- (void)processImplicitAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field {
  ComThoughtworksXstreamMapperAnnotationMapper_processImplicitAnnotationWithJavaLangReflectField_(self, field);
}


#line 456
- (void)processOmitFieldAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field {
  ComThoughtworksXstreamMapperAnnotationMapper_processOmitFieldAnnotationWithJavaLangReflectField_(self, field);
}


#line 469
- (void)processLocalConverterAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field {
  ComThoughtworksXstreamMapperAnnotationMapper_processLocalConverterAnnotationWithJavaLangReflectField_(self, field);
}


#line 485
- (id<ComThoughtworksXstreamConvertersConverter>)cacheConverterWithComThoughtworksXstreamAnnotationsXStreamConverter:(id<ComThoughtworksXstreamAnnotationsXStreamConverter>)annotation
                                                                                                        withIOSClass:(IOSClass *)targetType {
  return ComThoughtworksXstreamMapperAnnotationMapper_cacheConverterWithComThoughtworksXstreamAnnotationsXStreamConverter_withIOSClass_(self, annotation, targetType);
}


#line 556
- (IOSClass *)getClassWithJavaLangReflectType:(id<JavaLangReflectType>)typeArgument {
  return ComThoughtworksXstreamMapperAnnotationMapper_getClassWithJavaLangReflectType_(self, typeArgument);
}


#line 566
- (void)setupMappers {
  ComThoughtworksXstreamMapperAnnotationMapper_setupMappers(self);
}


#line 575
- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) defaultWriteObject];
  jint max = ((IOSObjectArray *) nil_chk(arguments_))->size_ - 2;
  [outArg writeIntWithInt:max];
  for (jint i = 0; i < max; i++) {
    [outArg writeObjectWithId:IOSObjectArray_Get(arguments_, i)];
  }
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  ComThoughtworksXstreamMapperAnnotationMapper_setupMappers(self);
  jint max = [inArg readInt];
  arguments_ = [IOSObjectArray newArrayWithLength:max + 2 type:NSObject_class_()];
  for (jint i = 0; i < max; i++) {
    (void) IOSObjectArray_Set(arguments_, i, [inArg readObject]);
    if ([IOSObjectArray_Get(arguments_, i) isKindOfClass:[ComThoughtworksXstreamCoreClassLoaderReference class]]) {
      (void) IOSObjectArray_Set(arguments_, max + 1, [((ComThoughtworksXstreamCoreClassLoaderReference *) nil_chk(((ComThoughtworksXstreamCoreClassLoaderReference *) check_class_cast(IOSObjectArray_Get(arguments_, i), [ComThoughtworksXstreamCoreClassLoaderReference class])))) getReference]);
    }
  }
  (void) IOSObjectArray_Set(arguments_, max, new_ComThoughtworksXstreamCoreJVM_init());
}

+ (IOSObjectArray *)__annotations_processImplicitCollectionAnnotationWithIOSClass_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamMapperMapper:withComThoughtworksXstreamConvertersConverterRegistry:withComThoughtworksXstreamConvertersConverterLookup:withComThoughtworksXstreamCoreClassLoaderReference:withComThoughtworksXstreamConvertersReflectionReflectionProvider:", "AnnotationMapper", NULL, 0x1, NULL, NULL },
    { "initWithComThoughtworksXstreamMapperMapper:withComThoughtworksXstreamConvertersConverterRegistry:withComThoughtworksXstreamConvertersConverterLookup:withJavaLangClassLoader:withComThoughtworksXstreamConvertersReflectionReflectionProvider:withComThoughtworksXstreamCoreJVM:", "AnnotationMapper", NULL, 0x1, NULL, NULL },
    { "realMemberWithIOSClass:withNSString:", "realMember", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "serializedClassWithIOSClass:", "serializedClass", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "defaultImplementationOfWithIOSClass:", "defaultImplementationOf", "Ljava.lang.Class;", 0x1, NULL, NULL },
    { "getLocalConverterWithIOSClass:withNSString:", "getLocalConverter", "Lcom.thoughtworks.xstream.converters.Converter;", 0x1, NULL, NULL },
    { "autodetectAnnotationsWithBoolean:", "autodetectAnnotations", "V", 0x1, NULL, NULL },
    { "processAnnotationsWithIOSClassArray:", "processAnnotations", "V", 0x1, NULL, NULL },
    { "processAnnotationsWithIOSClass:", "processAnnotations", "V", 0x2, NULL, NULL },
    { "processTypesWithJavaUtilSet:", "processTypes", "V", 0x2, NULL, NULL },
    { "addParametrizedTypesWithJavaLangReflectType:withJavaUtilSet:", "addParametrizedTypes", "V", 0x2, NULL, NULL },
    { "processConverterAnnotationsWithIOSClass:", "processConverterAnnotations", "V", 0x2, NULL, NULL },
    { "processAliasAnnotationWithIOSClass:withJavaUtilSet:", "processAliasAnnotation", "V", 0x2, NULL, NULL },
    { "processAliasTypeAnnotationWithIOSClass:", "processAliasTypeAnnotation", "V", 0x2, NULL, NULL },
    { "processImplicitCollectionAnnotationWithIOSClass:", "processImplicitCollectionAnnotation", "V", 0x2, NULL, NULL },
    { "processFieldAliasAnnotationWithJavaLangReflectField:", "processFieldAliasAnnotation", "V", 0x2, NULL, NULL },
    { "processAsAttributeAnnotationWithJavaLangReflectField:", "processAsAttributeAnnotation", "V", 0x2, NULL, NULL },
    { "processImplicitAnnotationWithJavaLangReflectField:", "processImplicitAnnotation", "V", 0x2, NULL, NULL },
    { "processOmitFieldAnnotationWithJavaLangReflectField:", "processOmitFieldAnnotation", "V", 0x2, NULL, NULL },
    { "processLocalConverterAnnotationWithJavaLangReflectField:", "processLocalConverterAnnotation", "V", 0x2, NULL, NULL },
    { "cacheConverterWithComThoughtworksXstreamAnnotationsXStreamConverter:withIOSClass:", "cacheConverter", "Lcom.thoughtworks.xstream.converters.Converter;", 0x2, NULL, NULL },
    { "getClassWithJavaLangReflectType:", "getClass", "Ljava.lang.Class;", 0x2, NULL, NULL },
    { "setupMappers", NULL, "V", 0x2, NULL, NULL },
    { "writeObjectWithJavaIoObjectOutputStream:", "writeObject", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readObjectWithJavaIoObjectInputStream:", "readObject", "V", 0x2, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "locked_", NULL, 0x2, "Z", NULL, NULL,  },
    { "arguments_", NULL, 0x82, "[Ljava.lang.Object;", NULL, NULL,  },
    { "converterRegistry_", NULL, 0x12, "Lcom.thoughtworks.xstream.converters.ConverterRegistry;", NULL, NULL,  },
    { "classAliasingMapper_", NULL, 0x82, "Lcom.thoughtworks.xstream.mapper.ClassAliasingMapper;", NULL, NULL,  },
    { "defaultImplementationsMapper_", NULL, 0x82, "Lcom.thoughtworks.xstream.mapper.DefaultImplementationsMapper;", NULL, NULL,  },
    { "implicitCollectionMapper_", NULL, 0x82, "Lcom.thoughtworks.xstream.mapper.ImplicitCollectionMapper;", NULL, NULL,  },
    { "fieldAliasingMapper_", NULL, 0x82, "Lcom.thoughtworks.xstream.mapper.FieldAliasingMapper;", NULL, NULL,  },
    { "attributeMapper_", NULL, 0x82, "Lcom.thoughtworks.xstream.mapper.AttributeMapper;", NULL, NULL,  },
    { "localConversionMapper_", NULL, 0x82, "Lcom.thoughtworks.xstream.mapper.LocalConversionMapper;", NULL, NULL,  },
    { "converterCache_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/Class<*>;Ljava/util/Map<Ljava/util/List<Ljava/lang/Object;>;Lcom/thoughtworks/xstream/converters/Converter;>;>;",  },
    { "annotatedTypes_", NULL, 0x12, "Ljava.util.Set;", NULL, "Ljava/util/Set<Ljava/lang/Class<*>;>;",  },
  };
  static const char *inner_classes[] = {"Lcom.thoughtworks.xstream.mapper.AnnotationMapper$UnprocessedTypesSet;"};
  static const J2ObjcClassInfo _ComThoughtworksXstreamMapperAnnotationMapper = { 2, "AnnotationMapper", "com.thoughtworks.xstream.mapper", NULL, 0x1, 25, methods, 11, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_ComThoughtworksXstreamMapperAnnotationMapper;
}

@end


#line 85
void ComThoughtworksXstreamMapperAnnotationMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterRegistry_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamCoreClassLoaderReference_withComThoughtworksXstreamConvertersReflectionReflectionProvider_(ComThoughtworksXstreamMapperAnnotationMapper *self, id<ComThoughtworksXstreamMapperMapper> wrapped, id<ComThoughtworksXstreamConvertersConverterRegistry> converterRegistry, id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup, ComThoughtworksXstreamCoreClassLoaderReference *classLoaderReference, id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider) {
  (void) ComThoughtworksXstreamMapperMapperWrapper_initWithComThoughtworksXstreamMapperMapper_(self,
#line 88
  wrapped);
  self->converterCache_ = new_JavaUtilHashMap_init();
  self->annotatedTypes_ = JavaUtilCollections_synchronizedSetWithJavaUtilSet_(new_JavaUtilHashSet_init());
  
#line 89
  self->converterRegistry_ = converterRegistry;
  [((id<JavaUtilSet>) nil_chk(self->annotatedTypes_)) addWithId:NSObject_class_()];
  ComThoughtworksXstreamMapperAnnotationMapper_setupMappers(self);
  self->locked_ = YES;
  
#line 94
  JavaLangClassLoader *classLoader = [((ComThoughtworksXstreamCoreClassLoaderReference *) nil_chk(classLoaderReference)) getReference];
  self->arguments_ = [IOSObjectArray newArrayWithObjects:(id[]){ self,
#line 96
  classLoaderReference, reflectionProvider, converterLookup, new_ComThoughtworksXstreamCoreJVM_init(),
#line 97
  classLoader != nil ? classLoader : new_ComThoughtworksXstreamCoreUtilTypedNull_initWithIOSClass_(JavaLangClassLoader_class_()) } count:6 type:NSObject_class_()];
}


#line 85
ComThoughtworksXstreamMapperAnnotationMapper *new_ComThoughtworksXstreamMapperAnnotationMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterRegistry_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamCoreClassLoaderReference_withComThoughtworksXstreamConvertersReflectionReflectionProvider_(id<ComThoughtworksXstreamMapperMapper> wrapped, id<ComThoughtworksXstreamConvertersConverterRegistry> converterRegistry, id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup, ComThoughtworksXstreamCoreClassLoaderReference *classLoaderReference, id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider) {
  ComThoughtworksXstreamMapperAnnotationMapper *self = [ComThoughtworksXstreamMapperAnnotationMapper alloc];
  ComThoughtworksXstreamMapperAnnotationMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterRegistry_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamCoreClassLoaderReference_withComThoughtworksXstreamConvertersReflectionReflectionProvider_(self, wrapped, converterRegistry, converterLookup, classLoaderReference, reflectionProvider);
  return self;
}


#line 107
void ComThoughtworksXstreamMapperAnnotationMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterRegistry_withComThoughtworksXstreamConvertersConverterLookup_withJavaLangClassLoader_withComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamCoreJVM_(ComThoughtworksXstreamMapperAnnotationMapper *self, id<ComThoughtworksXstreamMapperMapper> wrapped, id<ComThoughtworksXstreamConvertersConverterRegistry> converterRegistry, id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup, JavaLangClassLoader *classLoader, id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, ComThoughtworksXstreamCoreJVM *jvm) {
  (void) ComThoughtworksXstreamMapperAnnotationMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterRegistry_withComThoughtworksXstreamConvertersConverterLookup_withComThoughtworksXstreamCoreClassLoaderReference_withComThoughtworksXstreamConvertersReflectionReflectionProvider_(self,
#line 111
  wrapped, converterRegistry, converterLookup, new_ComThoughtworksXstreamCoreClassLoaderReference_initWithJavaLangClassLoader_(classLoader), reflectionProvider);
}


#line 107
ComThoughtworksXstreamMapperAnnotationMapper *new_ComThoughtworksXstreamMapperAnnotationMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterRegistry_withComThoughtworksXstreamConvertersConverterLookup_withJavaLangClassLoader_withComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamCoreJVM_(id<ComThoughtworksXstreamMapperMapper> wrapped, id<ComThoughtworksXstreamConvertersConverterRegistry> converterRegistry, id<ComThoughtworksXstreamConvertersConverterLookup> converterLookup, JavaLangClassLoader *classLoader, id<ComThoughtworksXstreamConvertersReflectionReflectionProvider> reflectionProvider, ComThoughtworksXstreamCoreJVM *jvm) {
  ComThoughtworksXstreamMapperAnnotationMapper *self = [ComThoughtworksXstreamMapperAnnotationMapper alloc];
  ComThoughtworksXstreamMapperAnnotationMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterRegistry_withComThoughtworksXstreamConvertersConverterLookup_withJavaLangClassLoader_withComThoughtworksXstreamConvertersReflectionReflectionProvider_withComThoughtworksXstreamCoreJVM_(self, wrapped, converterRegistry, converterLookup, classLoader, reflectionProvider, jvm);
  return self;
}


#line 167
void ComThoughtworksXstreamMapperAnnotationMapper_processAnnotationsWithIOSClass_(ComThoughtworksXstreamMapperAnnotationMapper *self, IOSClass *initialType) {
  if (initialType == nil) {
    return;
  }
  
#line 172
  id<JavaUtilSet> types = new_ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet_initWithComThoughtworksXstreamMapperAnnotationMapper_(self);
  [types addWithId:initialType];
  ComThoughtworksXstreamMapperAnnotationMapper_processTypesWithJavaUtilSet_(self, types);
}


#line 177
void ComThoughtworksXstreamMapperAnnotationMapper_processTypesWithJavaUtilSet_(ComThoughtworksXstreamMapperAnnotationMapper *self, id<JavaUtilSet> types) {
  while (![((id<JavaUtilSet>) nil_chk(types)) isEmpty]) {
    id<JavaUtilIterator> iter = [types iterator];
    IOSClass *type = [((id<JavaUtilIterator>) nil_chk(iter)) next];
    [iter remove];
    
#line 183
    @synchronized(type) {
      if ([((id<JavaUtilSet>) nil_chk(self->annotatedTypes_)) containsWithId:type]) {
        continue;
      }
      @try {
        if ([((IOSClass *) nil_chk(type)) isPrimitive]) {
          continue;
        }
        
#line 192
        ComThoughtworksXstreamMapperAnnotationMapper_addParametrizedTypesWithJavaLangReflectType_withJavaUtilSet_(self, type, types);
        
#line 194
        ComThoughtworksXstreamMapperAnnotationMapper_processConverterAnnotationsWithIOSClass_(self, type);
        ComThoughtworksXstreamMapperAnnotationMapper_processAliasAnnotationWithIOSClass_withJavaUtilSet_(self, type, types);
        ComThoughtworksXstreamMapperAnnotationMapper_processAliasTypeAnnotationWithIOSClass_(self, type);
        
#line 198
        if ([type isInterface]) {
          continue;
        }
        
#line 202
        ComThoughtworksXstreamMapperAnnotationMapper_processImplicitCollectionAnnotationWithIOSClass_(self, type);
        
#line 204
        IOSObjectArray *fields = [type getDeclaredFields];
        for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fields))->size_; i++) {
          JavaLangReflectField *field = IOSObjectArray_Get(fields, i);
          if ([((JavaLangReflectField *) nil_chk(field)) isEnumConstant] ||
#line 208
          ([field getModifiers] & (JavaLangReflectModifier_STATIC | JavaLangReflectModifier_TRANSIENT)) > 0) {
            continue;
          }
          
#line 212
          ComThoughtworksXstreamMapperAnnotationMapper_addParametrizedTypesWithJavaLangReflectType_withJavaUtilSet_(self, [field getGenericType], types);
          
#line 214
          if ([field isSynthetic]) {
            continue;
          }
          
#line 218
          ComThoughtworksXstreamMapperAnnotationMapper_processFieldAliasAnnotationWithJavaLangReflectField_(self, field);
          ComThoughtworksXstreamMapperAnnotationMapper_processAsAttributeAnnotationWithJavaLangReflectField_(self, field);
          ComThoughtworksXstreamMapperAnnotationMapper_processImplicitAnnotationWithJavaLangReflectField_(self, field);
          ComThoughtworksXstreamMapperAnnotationMapper_processOmitFieldAnnotationWithJavaLangReflectField_(self, field);
          ComThoughtworksXstreamMapperAnnotationMapper_processLocalConverterAnnotationWithJavaLangReflectField_(self, field);
        }
      }
      @finally {
        
#line 225
        [self->annotatedTypes_ addWithId:type];
      }
    }
  }
}


#line 231
void ComThoughtworksXstreamMapperAnnotationMapper_addParametrizedTypesWithJavaLangReflectType_withJavaUtilSet_(ComThoughtworksXstreamMapperAnnotationMapper *self, id<JavaLangReflectType> type, id<JavaUtilSet> types) {
  id<JavaUtilSet> processedTypes = new_JavaUtilHashSet_init();
  id<JavaUtilSet> localTypes = new_ComThoughtworksXstreamMapperAnnotationMapper_$1_initWithJavaUtilSet_withJavaUtilSet_(types, processedTypes);
  
#line 244
  while (type != nil) {
    [processedTypes addWithId:type];
    if ([type isKindOfClass:[IOSClass class]]) {
      IOSClass *clazz = (IOSClass *) check_class_cast(type, [IOSClass class]);
      [((id<JavaUtilSet>) nil_chk(types)) addWithId:clazz];
      if (![((IOSClass *) nil_chk(clazz)) isPrimitive]) {
        IOSObjectArray *typeParameters = [clazz getTypeParameters];
        {
          IOSObjectArray *a__ =
#line 251
          typeParameters;
          id<JavaLangReflectTypeVariable> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          id<JavaLangReflectTypeVariable> const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            id<JavaLangReflectTypeVariable> typeVariable = *b__++;
            
#line 252
            [localTypes addWithId:typeVariable];
          }
        }
        
#line 254
        [localTypes addWithId:[clazz getGenericSuperclass]];
        {
          IOSObjectArray *a__ =
#line 255
          [clazz getGenericInterfaces];
          id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          id<JavaLangReflectType> const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            id<JavaLangReflectType> iface = *b__++;
            
#line 256
            [localTypes addWithId:iface];
          }
        }
      }
    }
    else
#line 259
    if ([JavaLangReflectTypeVariable_class_() isInstance:type]) {
      id<JavaLangReflectTypeVariable> typeVariable = (id<JavaLangReflectTypeVariable>) check_protocol_cast(type, @protocol(JavaLangReflectTypeVariable));
      IOSObjectArray *bounds = [((id<JavaLangReflectTypeVariable>) nil_chk(typeVariable)) getBounds];
      {
        IOSObjectArray *a__ =
#line 262
        bounds;
        id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        id<JavaLangReflectType> const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          id<JavaLangReflectType> bound = *b__++;
          
#line 263
          [localTypes addWithId:bound];
        }
      }
    }
    else
#line 265
    if ([JavaLangReflectParameterizedType_class_() isInstance:type]) {
      id<JavaLangReflectParameterizedType> parametrizedType = (id<JavaLangReflectParameterizedType>) check_protocol_cast(type, @protocol(JavaLangReflectParameterizedType));
      [localTypes addWithId:[((id<JavaLangReflectParameterizedType>) nil_chk(parametrizedType)) getRawType]];
      IOSObjectArray *actualArguments = [parametrizedType getActualTypeArguments];
      {
        IOSObjectArray *a__ =
#line 269
        actualArguments;
        id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        id<JavaLangReflectType> const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          id<JavaLangReflectType> actualArgument = *b__++;
          
#line 270
          [localTypes addWithId:actualArgument];
        }
      }
    }
    else
#line 272
    if ([JavaLangReflectGenericArrayType_class_() isInstance:type]) {
      id<JavaLangReflectGenericArrayType> arrayType = (id<JavaLangReflectGenericArrayType>) check_protocol_cast(type, @protocol(JavaLangReflectGenericArrayType));
      [localTypes addWithId:[((id<JavaLangReflectGenericArrayType>) nil_chk(arrayType)) getGenericComponentType]];
    }
    
#line 277
    if (![localTypes isEmpty]) {
      id<JavaUtilIterator> iter = [localTypes iterator];
      type = [((id<JavaUtilIterator>) nil_chk(iter)) next];
      [iter remove];
    }
    else {
      
#line 282
      type = nil;
    }
  }
}


#line 287
void ComThoughtworksXstreamMapperAnnotationMapper_processConverterAnnotationsWithIOSClass_(ComThoughtworksXstreamMapperAnnotationMapper *self, IOSClass *type) {
  if (self->converterRegistry_ != nil) {
    id<ComThoughtworksXstreamAnnotationsXStreamConverters> convertersAnnotation = [((IOSClass *) nil_chk(type)) getAnnotationWithIOSClass:
#line 290
    ComThoughtworksXstreamAnnotationsXStreamConverters_class_()];
    id<ComThoughtworksXstreamAnnotationsXStreamConverter> converterAnnotation = [type getAnnotationWithIOSClass:
#line 292
    ComThoughtworksXstreamAnnotationsXStreamConverter_class_()];
    id<JavaUtilList> annotations = convertersAnnotation != nil ? new_JavaUtilArrayList_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(
#line 294
    [convertersAnnotation value])) : new_JavaUtilArrayList_init();
    
#line 296
    if (converterAnnotation != nil) {
      [annotations addWithId:converterAnnotation];
    }
    for (id<ComThoughtworksXstreamAnnotationsXStreamConverter> __strong annotation in annotations) {
      id<ComThoughtworksXstreamConvertersConverter> converter = ComThoughtworksXstreamMapperAnnotationMapper_cacheConverterWithComThoughtworksXstreamAnnotationsXStreamConverter_withIOSClass_(self,
#line 301
      annotation, converterAnnotation != nil ? type : nil);
      if (converter != nil) {
        if (converterAnnotation != nil || [converter canConvertWithIOSClass:type]) {
          [self->converterRegistry_ registerConverterWithComThoughtworksXstreamConvertersConverter:converter withInt:[((id<ComThoughtworksXstreamAnnotationsXStreamConverter>) nil_chk(annotation)) priority]];
        }
        else {
          
#line 306
          @throw new_ComThoughtworksXstreamInitializationException_initWithNSString_(JreStrcat("$$$$", @"Converter ",
#line 307
          [((IOSClass *) nil_chk([((id<ComThoughtworksXstreamAnnotationsXStreamConverter>) nil_chk(annotation)) value])) getName], @" cannot handle annotated class ",
#line 309
          [type getName]));
        }
      }
    }
  }
}


#line 316
void ComThoughtworksXstreamMapperAnnotationMapper_processAliasAnnotationWithIOSClass_withJavaUtilSet_(ComThoughtworksXstreamMapperAnnotationMapper *self, IOSClass *type, id<JavaUtilSet> types) {
  id<ComThoughtworksXstreamAnnotationsXStreamAlias> aliasAnnotation = [((IOSClass *) nil_chk(type)) getAnnotationWithIOSClass:ComThoughtworksXstreamAnnotationsXStreamAlias_class_()];
  if (aliasAnnotation != nil) {
    if (self->classAliasingMapper_ == nil) {
      @throw new_ComThoughtworksXstreamInitializationException_initWithNSString_(JreStrcat("$$$", @"No ",
#line 321
      [ComThoughtworksXstreamMapperClassAliasingMapper_class_() getName], @" available"));
    }
    
#line 324
    [((ComThoughtworksXstreamMapperClassAliasingMapper *) nil_chk(self->classAliasingMapper_)) addClassAliasWithNSString:[aliasAnnotation value] withIOSClass:type];
    if ([aliasAnnotation impl] != JavaLangVoid_class_()) {
      
#line 327
      [((ComThoughtworksXstreamMapperDefaultImplementationsMapper *) nil_chk(self->defaultImplementationsMapper_)) addDefaultImplementationWithIOSClass:
#line 328
      [aliasAnnotation impl] withIOSClass:type];
      if ([type isInterface]) {
        [((id<JavaUtilSet>) nil_chk(types)) addWithId:[aliasAnnotation impl]];
      }
    }
  }
}


#line 336
void ComThoughtworksXstreamMapperAnnotationMapper_processAliasTypeAnnotationWithIOSClass_(ComThoughtworksXstreamMapperAnnotationMapper *self, IOSClass *type) {
  id<ComThoughtworksXstreamAnnotationsXStreamAliasType> aliasAnnotation = [((IOSClass *) nil_chk(type)) getAnnotationWithIOSClass:ComThoughtworksXstreamAnnotationsXStreamAliasType_class_()];
  if (aliasAnnotation != nil) {
    if (self->classAliasingMapper_ == nil) {
      @throw new_ComThoughtworksXstreamInitializationException_initWithNSString_(JreStrcat("$$$", @"No ",
#line 341
      [ComThoughtworksXstreamMapperClassAliasingMapper_class_() getName], @" available"));
    }
    
#line 344
    [((ComThoughtworksXstreamMapperClassAliasingMapper *) nil_chk(self->classAliasingMapper_)) addTypeAliasWithNSString:[aliasAnnotation value] withIOSClass:type];
  }
}


#line 349
void ComThoughtworksXstreamMapperAnnotationMapper_processImplicitCollectionAnnotationWithIOSClass_(ComThoughtworksXstreamMapperAnnotationMapper *self, IOSClass *type) {
  id<ComThoughtworksXstreamAnnotationsXStreamImplicitCollection> implicitColAnnotation = [((IOSClass *) nil_chk(type)) getAnnotationWithIOSClass:
#line 351
  ComThoughtworksXstreamAnnotationsXStreamImplicitCollection_class_()];
  if (implicitColAnnotation != nil) {
    if (self->implicitCollectionMapper_ == nil) {
      @throw new_ComThoughtworksXstreamInitializationException_initWithNSString_(JreStrcat("$$$", @"No ",
#line 355
      [ComThoughtworksXstreamMapperImplicitCollectionMapper_class_() getName], @" available"));
    }
    
#line 358
    NSString *fieldName = [implicitColAnnotation value];
    NSString *itemFieldName = [implicitColAnnotation item];
    JavaLangReflectField *field;
    @try {
      field = [type getDeclaredField:fieldName];
    }
    @catch (
#line 363
    JavaLangNoSuchFieldException *e) {
      @throw new_ComThoughtworksXstreamInitializationException_initWithNSString_(JreStrcat("$$$$$", [type getName], @" does not have a field named '",
#line 366
      fieldName, @"' as required by ",
#line 368
      [ComThoughtworksXstreamAnnotationsXStreamImplicitCollection_class_() getName]));
    }
    IOSClass *itemType = nil;
    id<JavaLangReflectType> genericType = [((JavaLangReflectField *) nil_chk(field)) getGenericType];
    if ([JavaLangReflectParameterizedType_class_() isInstance:genericType]) {
      id<JavaLangReflectType> typeArgument = IOSObjectArray_Get(nil_chk([((id<JavaLangReflectParameterizedType>) nil_chk(((id<JavaLangReflectParameterizedType>) check_protocol_cast(genericType, @protocol(JavaLangReflectParameterizedType))))) getActualTypeArguments]),
#line 374
      0);
      itemType = ComThoughtworksXstreamMapperAnnotationMapper_getClassWithJavaLangReflectType_(self, typeArgument);
    }
    if (itemType == nil) {
      [((ComThoughtworksXstreamMapperImplicitCollectionMapper *) nil_chk(self->implicitCollectionMapper_)) addWithIOSClass:type withNSString:fieldName withNSString:nil withIOSClass:NSObject_class_()];
    }
    else {
      
#line 380
      if ([((NSString *) nil_chk(itemFieldName)) isEqual:@""]) {
        [((ComThoughtworksXstreamMapperImplicitCollectionMapper *) nil_chk(self->implicitCollectionMapper_)) addWithIOSClass:type withNSString:fieldName withNSString:nil withIOSClass:itemType];
      }
      else {
        
#line 383
        [((ComThoughtworksXstreamMapperImplicitCollectionMapper *) nil_chk(self->implicitCollectionMapper_)) addWithIOSClass:type withNSString:fieldName withNSString:itemFieldName withIOSClass:itemType];
      }
    }
  }
}


#line 389
void ComThoughtworksXstreamMapperAnnotationMapper_processFieldAliasAnnotationWithJavaLangReflectField_(ComThoughtworksXstreamMapperAnnotationMapper *self, JavaLangReflectField *field) {
  id<ComThoughtworksXstreamAnnotationsXStreamAlias> aliasAnnotation = [((JavaLangReflectField *) nil_chk(field)) getAnnotationWithIOSClass:ComThoughtworksXstreamAnnotationsXStreamAlias_class_()];
  if (aliasAnnotation != nil) {
    if (self->fieldAliasingMapper_ == nil) {
      @throw new_ComThoughtworksXstreamInitializationException_initWithNSString_(JreStrcat("$$$", @"No ",
#line 394
      [ComThoughtworksXstreamMapperFieldAliasingMapper_class_() getName], @" available"));
    }
    
#line 397
    [((ComThoughtworksXstreamMapperFieldAliasingMapper *) nil_chk(self->fieldAliasingMapper_)) addFieldAliasWithNSString:
#line 398
    [aliasAnnotation value] withIOSClass:[field getDeclaringClass] withNSString:[field getName]];
  }
}


#line 402
void ComThoughtworksXstreamMapperAnnotationMapper_processAsAttributeAnnotationWithJavaLangReflectField_(ComThoughtworksXstreamMapperAnnotationMapper *self, JavaLangReflectField *field) {
  id<ComThoughtworksXstreamAnnotationsXStreamAsAttribute> asAttributeAnnotation = [((JavaLangReflectField *) nil_chk(field)) getAnnotationWithIOSClass:
#line 404
  ComThoughtworksXstreamAnnotationsXStreamAsAttribute_class_()];
  if (asAttributeAnnotation != nil) {
    if (self->attributeMapper_ == nil) {
      @throw new_ComThoughtworksXstreamInitializationException_initWithNSString_(JreStrcat("$$$", @"No ",
#line 408
      [ComThoughtworksXstreamMapperAttributeMapper_class_() getName], @" available"));
    }
    
#line 411
    [((ComThoughtworksXstreamMapperAttributeMapper *) nil_chk(self->attributeMapper_)) addAttributeForWithJavaLangReflectField:field];
  }
}


#line 415
void ComThoughtworksXstreamMapperAnnotationMapper_processImplicitAnnotationWithJavaLangReflectField_(ComThoughtworksXstreamMapperAnnotationMapper *self, JavaLangReflectField *field) {
  id<ComThoughtworksXstreamAnnotationsXStreamImplicit> implicitAnnotation = [((JavaLangReflectField *) nil_chk(field)) getAnnotationWithIOSClass:ComThoughtworksXstreamAnnotationsXStreamImplicit_class_()];
  if (implicitAnnotation != nil) {
    if (self->implicitCollectionMapper_ == nil) {
      @throw new_ComThoughtworksXstreamInitializationException_initWithNSString_(JreStrcat("$$$", @"No ",
#line 420
      [ComThoughtworksXstreamMapperImplicitCollectionMapper_class_() getName], @" available"));
    }
    
#line 423
    NSString *fieldName = [field getName];
    NSString *itemFieldName = [implicitAnnotation itemFieldName];
    NSString *keyFieldName = [implicitAnnotation keyFieldName];
    jboolean isMap = [JavaUtilMap_class_() isAssignableFrom:[field getType]];
    IOSClass *itemType = nil;
    if (![((IOSClass *) nil_chk([field getType])) isArray]) {
      id<JavaLangReflectType> genericType = [field getGenericType];
      if ([JavaLangReflectParameterizedType_class_() isInstance:genericType]) {
        IOSObjectArray *actualTypeArguments = [((id<JavaLangReflectParameterizedType>) nil_chk(((id<JavaLangReflectParameterizedType>) check_protocol_cast(genericType, @protocol(JavaLangReflectParameterizedType))))) getActualTypeArguments];
        
#line 433
        id<JavaLangReflectType> typeArgument = IOSObjectArray_Get(nil_chk(actualTypeArguments), isMap ? 1 : 0);
        itemType = ComThoughtworksXstreamMapperAnnotationMapper_getClassWithJavaLangReflectType_(self, typeArgument);
      }
    }
    if (isMap) {
      [((ComThoughtworksXstreamMapperImplicitCollectionMapper *) nil_chk(self->implicitCollectionMapper_)) addWithIOSClass:
#line 439
      [field getDeclaringClass] withNSString:fieldName withNSString:
#line 440
      itemFieldName != nil && ![@"" isEqual:itemFieldName] ? itemFieldName : nil withIOSClass:
#line 441
      itemType withNSString:keyFieldName != nil && ![@"" isEqual:keyFieldName] ?
#line 442
      keyFieldName :
#line 443
      nil];
    }
    else {
      
#line 445
      if (itemFieldName != nil && ![@"" isEqual:itemFieldName]) {
        [((ComThoughtworksXstreamMapperImplicitCollectionMapper *) nil_chk(self->implicitCollectionMapper_)) addWithIOSClass:
#line 447
        [field getDeclaringClass] withNSString:fieldName withNSString:itemFieldName withIOSClass:itemType];
      }
      else {
        
#line 449
        [((ComThoughtworksXstreamMapperImplicitCollectionMapper *) nil_chk(self->implicitCollectionMapper_)) addWithIOSClass:
#line 450
        [field getDeclaringClass] withNSString:fieldName withIOSClass:itemType];
      }
    }
  }
}


#line 456
void ComThoughtworksXstreamMapperAnnotationMapper_processOmitFieldAnnotationWithJavaLangReflectField_(ComThoughtworksXstreamMapperAnnotationMapper *self, JavaLangReflectField *field) {
  id<ComThoughtworksXstreamAnnotationsXStreamOmitField> omitFieldAnnotation = [((JavaLangReflectField *) nil_chk(field)) getAnnotationWithIOSClass:
#line 458
  ComThoughtworksXstreamAnnotationsXStreamOmitField_class_()];
  if (omitFieldAnnotation != nil) {
    if (self->fieldAliasingMapper_ == nil) {
      @throw new_ComThoughtworksXstreamInitializationException_initWithNSString_(JreStrcat("$$$", @"No ",
#line 462
      [ComThoughtworksXstreamMapperFieldAliasingMapper_class_() getName], @" available"));
    }
    
#line 465
    [((ComThoughtworksXstreamMapperFieldAliasingMapper *) nil_chk(self->fieldAliasingMapper_)) omitFieldWithIOSClass:[field getDeclaringClass] withNSString:[field getName]];
  }
}


#line 469
void ComThoughtworksXstreamMapperAnnotationMapper_processLocalConverterAnnotationWithJavaLangReflectField_(ComThoughtworksXstreamMapperAnnotationMapper *self, JavaLangReflectField *field) {
  id<ComThoughtworksXstreamAnnotationsXStreamConverter> annotation = [((JavaLangReflectField *) nil_chk(field)) getAnnotationWithIOSClass:ComThoughtworksXstreamAnnotationsXStreamConverter_class_()];
  if (annotation != nil) {
    id<ComThoughtworksXstreamConvertersConverter> converter = ComThoughtworksXstreamMapperAnnotationMapper_cacheConverterWithComThoughtworksXstreamAnnotationsXStreamConverter_withIOSClass_(self, annotation, [field getType]);
    if (converter != nil) {
      if (self->localConversionMapper_ == nil) {
        @throw new_ComThoughtworksXstreamInitializationException_initWithNSString_(JreStrcat("$$$", @"No ",
#line 476
        [ComThoughtworksXstreamMapperLocalConversionMapper_class_() getName], @" available"));
      }
      
#line 479
      [((ComThoughtworksXstreamMapperLocalConversionMapper *) nil_chk(self->localConversionMapper_)) registerLocalConverterWithIOSClass:
#line 480
      [field getDeclaringClass] withNSString:[field getName] withComThoughtworksXstreamConvertersConverter:converter];
    }
  }
}


#line 485
id<ComThoughtworksXstreamConvertersConverter> ComThoughtworksXstreamMapperAnnotationMapper_cacheConverterWithComThoughtworksXstreamAnnotationsXStreamConverter_withIOSClass_(ComThoughtworksXstreamMapperAnnotationMapper *self, id<ComThoughtworksXstreamAnnotationsXStreamConverter> annotation, IOSClass *targetType) {
  
#line 487
  id<ComThoughtworksXstreamConvertersConverter> result = nil;
  IOSObjectArray *args;
  id<JavaUtilList> parameter = new_JavaUtilArrayList_init();
  if (targetType != nil && [((id<ComThoughtworksXstreamAnnotationsXStreamConverter>) nil_chk(annotation)) useImplicitType]) {
    [parameter addWithId:targetType];
  }
  id<JavaUtilList> arrays = new_JavaUtilArrayList_init();
  [arrays addWithId:[((id<ComThoughtworksXstreamAnnotationsXStreamConverter>) nil_chk(annotation)) booleans]];
  [arrays addWithId:[annotation bytes]];
  [arrays addWithId:[annotation chars]];
  [arrays addWithId:[annotation doubles]];
  [arrays addWithId:[annotation floats]];
  [arrays addWithId:[annotation ints]];
  [arrays addWithId:[annotation longs]];
  [arrays addWithId:[annotation shorts]];
  [arrays addWithId:[annotation strings]];
  [arrays addWithId:[annotation types]];
  for (id __strong array in arrays) {
    if (array != nil) {
      jint length = JavaLangReflectArray_getLengthWithId_(array);
      for (jint i = 0; i < length; i++) {
        id object = JavaLangReflectArray_getWithId_withInt_(array, i);
        if (![parameter containsWithId:object]) {
          [parameter addWithId:object];
        }
      }
    }
  }
  IOSClass *converterType = [annotation value];
  id<JavaUtilMap> converterMapping = [((id<JavaUtilMap>) nil_chk(self->converterCache_)) getWithId:converterType];
  if (converterMapping != nil) {
    result = [converterMapping getWithId:parameter];
  }
  if (result == nil) {
    jint size = [parameter size];
    if (size > 0) {
      args = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(self->arguments_))->size_ + size type:NSObject_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->arguments_, 0, args, size, self->arguments_->size_);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([parameter toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:size type:NSObject_class_()]], 0, args, 0, size);
    }
    else {
      
#line 527
      args = self->arguments_;
    }
    
#line 530
    id<ComThoughtworksXstreamConvertersConverter> converter;
    @try {
      if ([ComThoughtworksXstreamConvertersSingleValueConverter_class_() isAssignableFrom:converterType] &&
#line 533
      ![ComThoughtworksXstreamConvertersConverter_class_() isAssignableFrom:converterType]) {
        id<ComThoughtworksXstreamConvertersSingleValueConverter> svc = (id<ComThoughtworksXstreamConvertersSingleValueConverter>) check_protocol_cast(ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_newInstanceWithIOSClass_withNSObjectArray_(
#line 535
        converterType, args), @protocol(ComThoughtworksXstreamConvertersSingleValueConverter));
        converter = new_ComThoughtworksXstreamConvertersSingleValueConverterWrapper_initWithComThoughtworksXstreamConvertersSingleValueConverter_(svc);
      }
      else {
        
#line 538
        converter = (id<ComThoughtworksXstreamConvertersConverter>) check_protocol_cast(ComThoughtworksXstreamCoreUtilDependencyInjectionFactory_newInstanceWithIOSClass_withNSObjectArray_(
#line 539
        converterType, args), @protocol(ComThoughtworksXstreamConvertersConverter));
      }
    }
    @catch (
#line 541
    JavaLangException *e) {
      @throw new_ComThoughtworksXstreamInitializationException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$", @"Cannot instantiate converter ",
#line 543
      [((IOSClass *) nil_chk(converterType)) getName],
#line 544
      (targetType != nil ? JreStrcat("$$", @" for type ", [targetType getName]) : @"")), e);
    }
    if (converterMapping == nil) {
      converterMapping = new_JavaUtilHashMap_init();
      (void) [self->converterCache_ putWithId:converterType withId:converterMapping];
    }
    (void) [((id<JavaUtilMap>) nil_chk(converterMapping)) putWithId:parameter withId:converter];
    result = converter;
  }
  return result;
}


#line 556
IOSClass *ComThoughtworksXstreamMapperAnnotationMapper_getClassWithJavaLangReflectType_(ComThoughtworksXstreamMapperAnnotationMapper *self, id<JavaLangReflectType> typeArgument) {
  IOSClass *type = nil;
  if ([JavaLangReflectParameterizedType_class_() isInstance:typeArgument]) {
    type = (IOSClass *) check_class_cast([((id<JavaLangReflectParameterizedType>) nil_chk(((id<JavaLangReflectParameterizedType>) check_protocol_cast(typeArgument, @protocol(JavaLangReflectParameterizedType))))) getRawType], [IOSClass class]);
  }
  else
#line 560
  if ([typeArgument isKindOfClass:[IOSClass class]]) {
    type = (IOSClass *) check_class_cast(typeArgument, [IOSClass class]);
  }
  return type;
}


#line 566
void ComThoughtworksXstreamMapperAnnotationMapper_setupMappers(ComThoughtworksXstreamMapperAnnotationMapper *self) {
  self->classAliasingMapper_ = (ComThoughtworksXstreamMapperClassAliasingMapper *) check_class_cast([self lookupMapperOfTypeWithIOSClass:ComThoughtworksXstreamMapperClassAliasingMapper_class_()], [ComThoughtworksXstreamMapperClassAliasingMapper class]);
  self->defaultImplementationsMapper_ = (ComThoughtworksXstreamMapperDefaultImplementationsMapper *) check_class_cast([self lookupMapperOfTypeWithIOSClass:ComThoughtworksXstreamMapperDefaultImplementationsMapper_class_()], [ComThoughtworksXstreamMapperDefaultImplementationsMapper class]);
  self->implicitCollectionMapper_ = (ComThoughtworksXstreamMapperImplicitCollectionMapper *) check_class_cast([self lookupMapperOfTypeWithIOSClass:ComThoughtworksXstreamMapperImplicitCollectionMapper_class_()], [ComThoughtworksXstreamMapperImplicitCollectionMapper class]);
  self->fieldAliasingMapper_ = (ComThoughtworksXstreamMapperFieldAliasingMapper *) check_class_cast([self lookupMapperOfTypeWithIOSClass:ComThoughtworksXstreamMapperFieldAliasingMapper_class_()], [ComThoughtworksXstreamMapperFieldAliasingMapper class]);
  self->attributeMapper_ = (ComThoughtworksXstreamMapperAttributeMapper *) check_class_cast([self lookupMapperOfTypeWithIOSClass:ComThoughtworksXstreamMapperAttributeMapper_class_()], [ComThoughtworksXstreamMapperAttributeMapper class]);
  self->localConversionMapper_ = (ComThoughtworksXstreamMapperLocalConversionMapper *) check_class_cast([self lookupMapperOfTypeWithIOSClass:ComThoughtworksXstreamMapperLocalConversionMapper_class_()], [ComThoughtworksXstreamMapperLocalConversionMapper class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamMapperAnnotationMapper)


#line 598
@implementation ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet

- (jboolean)addWithId:(IOSClass *)type {
  if (type == nil) {
    return NO;
  }
  while ([((IOSClass *) nil_chk(type)) isArray]) {
    type = [type getComponentType];
  }
  NSString *name = [((IOSClass *) nil_chk(type)) getName];
  if ([((NSString *) nil_chk(name)) hasPrefix:@"java."] || [name hasPrefix:@"javax."]) {
    return NO;
  }
  jboolean ret = [((id<JavaUtilSet>) nil_chk(this$0_->annotatedTypes_)) containsWithId:type] ? NO : [super addWithId:type];
  if (ret) {
    id<ComThoughtworksXstreamAnnotationsXStreamInclude> inc = [type getAnnotationWithIOSClass:ComThoughtworksXstreamAnnotationsXStreamInclude_class_()];
    if (inc != nil) {
      IOSObjectArray *incTypes = [inc value];
      if (incTypes != nil) {
        {
          IOSObjectArray *a__ =
#line 617
          incTypes;
          IOSClass * const *b__ = a__->buffer_;
          IOSClass * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            IOSClass *incType = *b__++;
            
#line 618
            [self addWithId:incType];
          }
        }
      }
    }
  }
  
#line 623
  return ret;
}

- (instancetype)initWithComThoughtworksXstreamMapperAnnotationMapper:(ComThoughtworksXstreamMapperAnnotationMapper *)outer$ {
  ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet_initWithComThoughtworksXstreamMapperAnnotationMapper_(self, outer$);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "addWithId:", "add", "Z", 0x1, NULL, NULL },
    { "initWithComThoughtworksXstreamMapperAnnotationMapper:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.thoughtworks.xstream.mapper.AnnotationMapper;", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"Ljava.lang.Class;"};
  static const J2ObjcClassInfo _ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet = { 2, "UnprocessedTypesSet", "com.thoughtworks.xstream.mapper", "AnnotationMapper", 0x12, 2, methods, 1, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/util/LinkedHashSet<Ljava/lang/Class<*>;>;" };
  return &_ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet;
}

@end

void ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet_initWithComThoughtworksXstreamMapperAnnotationMapper_(ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet *self, ComThoughtworksXstreamMapperAnnotationMapper *outer$) {
  self->this$0_ = outer$;
  (void) JavaUtilLinkedHashSet_init(self);
}

ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet *new_ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet_initWithComThoughtworksXstreamMapperAnnotationMapper_(ComThoughtworksXstreamMapperAnnotationMapper *outer$) {
  ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet *self = [ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet alloc];
  ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet_initWithComThoughtworksXstreamMapperAnnotationMapper_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet)

@implementation ComThoughtworksXstreamMapperAnnotationMapper_$1


#line 236
- (jboolean)addWithId:(id<JavaLangReflectType>)o {
  if ([o isKindOfClass:[IOSClass class]]) {
    return [((id<JavaUtilSet>) nil_chk(val$types_)) addWithId:(IOSClass *) check_class_cast(o, [IOSClass class])];
  }
  return o == nil || [((id<JavaUtilSet>) nil_chk(val$processedTypes_)) containsWithId:o] ? NO : [super addWithId:o];
}

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)capture$0
                    withJavaUtilSet:(id<JavaUtilSet>)capture$1 {
  ComThoughtworksXstreamMapperAnnotationMapper_$1_initWithJavaUtilSet_withJavaUtilSet_(self, capture$0, capture$1);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "addWithId:", "add", "Z", 0x1, NULL, NULL },
    { "initWithJavaUtilSet:withJavaUtilSet:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$types_", NULL, 0x1012, "Ljava.util.Set;", NULL, "Ljava/util/Set<Ljava/lang/Class<*>;>;",  },
    { "val$processedTypes_", NULL, 0x1012, "Ljava.util.Set;", NULL, "Ljava/util/Set<Ljava/lang/reflect/Type;>;",  },
  };
  static const char *superclass_type_args[] = {"Ljava.lang.reflect.Type;"};
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ComThoughtworksXstreamMapperAnnotationMapper", "addParametrizedTypesWithJavaLangReflectType:withJavaUtilSet:" };
  static const J2ObjcClassInfo _ComThoughtworksXstreamMapperAnnotationMapper_$1 = { 2, "", "com.thoughtworks.xstream.mapper", "AnnotationMapper", 0x8008, 2, methods, 2, fields, 1, superclass_type_args, 0, NULL, &enclosing_method, "Ljava/util/LinkedHashSet<Ljava/lang/reflect/Type;>;" };
  return &_ComThoughtworksXstreamMapperAnnotationMapper_$1;
}

@end

void ComThoughtworksXstreamMapperAnnotationMapper_$1_initWithJavaUtilSet_withJavaUtilSet_(ComThoughtworksXstreamMapperAnnotationMapper_$1 *self, id<JavaUtilSet> capture$0, id<JavaUtilSet> capture$1) {
  self->val$types_ = capture$0;
  self->val$processedTypes_ = capture$1;
  (void) JavaUtilLinkedHashSet_init(self);
}

ComThoughtworksXstreamMapperAnnotationMapper_$1 *new_ComThoughtworksXstreamMapperAnnotationMapper_$1_initWithJavaUtilSet_withJavaUtilSet_(id<JavaUtilSet> capture$0, id<JavaUtilSet> capture$1) {
  ComThoughtworksXstreamMapperAnnotationMapper_$1 *self = [ComThoughtworksXstreamMapperAnnotationMapper_$1 alloc];
  ComThoughtworksXstreamMapperAnnotationMapper_$1_initWithJavaUtilSet_withJavaUtilSet_(self, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamMapperAnnotationMapper_$1)
