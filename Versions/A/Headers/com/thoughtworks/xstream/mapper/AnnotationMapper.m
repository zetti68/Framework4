//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/mapper/AnnotationMapper.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/mapper/AnnotationMapper.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/thoughtworks/xstream/InitializationException.h"
#include "com/thoughtworks/xstream/annotations/XStreamAlias.h"
#include "com/thoughtworks/xstream/annotations/XStreamAliasType.h"
#include "com/thoughtworks/xstream/annotations/XStreamAsAttribute.h"
#include "com/thoughtworks/xstream/annotations/XStreamConverter.h"
#include "com/thoughtworks/xstream/annotations/XStreamConverters.h"
#include "com/thoughtworks/xstream/annotations/XStreamImplicit.h"
#include "com/thoughtworks/xstream/annotations/XStreamImplicitCollection.h"
#include "com/thoughtworks/xstream/annotations/XStreamInclude.h"
#include "com/thoughtworks/xstream/annotations/XStreamOmitField.h"
#include "com/thoughtworks/xstream/converters/Converter.h"
#include "com/thoughtworks/xstream/converters/ConverterLookup.h"
#include "com/thoughtworks/xstream/converters/ConverterRegistry.h"
#include "com/thoughtworks/xstream/converters/SingleValueConverter.h"
#include "com/thoughtworks/xstream/converters/SingleValueConverterWrapper.h"
#include "com/thoughtworks/xstream/converters/reflection/ReflectionProvider.h"
#include "com/thoughtworks/xstream/core/ClassLoaderReference.h"
#include "com/thoughtworks/xstream/core/JVM.h"
#include "com/thoughtworks/xstream/core/util/DependencyInjectionFactory.h"
#include "com/thoughtworks/xstream/core/util/TypedNull.h"
#include "com/thoughtworks/xstream/mapper/AnnotationMapper.h"
#include "com/thoughtworks/xstream/mapper/AttributeMapper.h"
#include "com/thoughtworks/xstream/mapper/ClassAliasingMapper.h"
#include "com/thoughtworks/xstream/mapper/DefaultImplementationsMapper.h"
#include "com/thoughtworks/xstream/mapper/FieldAliasingMapper.h"
#include "com/thoughtworks/xstream/mapper/ImplicitCollectionMapper.h"
#include "com/thoughtworks/xstream/mapper/LocalConversionMapper.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "com/thoughtworks/xstream/mapper/MapperWrapper.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/NoSuchFieldException.h"
#include "java/lang/System.h"
#include "java/lang/Void.h"
#include "java/lang/reflect/Array.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/GenericArrayType.h"
#include "java/lang/reflect/Modifier.h"
#include "java/lang/reflect/ParameterizedType.h"
#include "java/lang/reflect/Type.h"
#include "java/lang/reflect/TypeVariable.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation ComThoughtworksXstreamMapperAnnotationMapper


#line 85
- (instancetype)initComThoughtworksXstreamMapperAnnotationMapperWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped
                                                 withComThoughtworksXstreamConvertersConverterRegistry:(id<ComThoughtworksXstreamConvertersConverterRegistry>)converterRegistry
                                                   withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)converterLookup
                                                    withComThoughtworksXstreamCoreClassLoaderReference:(ComThoughtworksXstreamCoreClassLoaderReference *)classLoaderReference
                                      withComThoughtworksXstreamConvertersReflectionReflectionProvider:(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)reflectionProvider {
  if (self =
#line 88
  [super initWithComThoughtworksXstreamMapperMapper:wrapped]) {
    converterCache_ =
#line 75
    [[JavaUtilHashMap alloc] init];
    annotatedTypes_ =
#line 77
    [JavaUtilCollections synchronizedSetWithJavaUtilSet:[[JavaUtilHashSet alloc] init]];
    
#line 89
    self->converterRegistry_ = converterRegistry;
    
#line 90
    [((id<JavaUtilSet>) nil_chk(annotatedTypes_)) addWithId:[IOSClass classWithClass:[NSObject class]]];
    
#line 91
    [self setupMappers];
    
#line 92
    locked_ = YES;
    
#line 94
    JavaLangClassLoader *classLoader = [((ComThoughtworksXstreamCoreClassLoaderReference *) nil_chk(classLoaderReference)) getReference];
    
#line 95
    arguments_ = [IOSObjectArray arrayWithObjects:(id[]){
#line 96
      self, classLoaderReference, reflectionProvider, converterLookup, [[ComThoughtworksXstreamCoreJVM alloc] init],
#line 97
      classLoader != nil ? classLoader : [[ComThoughtworksXstreamCoreUtilTypedNull alloc] initWithIOSClass:[IOSClass classWithClass:[JavaLangClassLoader class]]] } count:6 type:[IOSClass classWithClass:[NSObject class]]];
    }
    return self;
  }

- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped
     withComThoughtworksXstreamConvertersConverterRegistry:(id<ComThoughtworksXstreamConvertersConverterRegistry>)converterRegistry
       withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)converterLookup
        withComThoughtworksXstreamCoreClassLoaderReference:(ComThoughtworksXstreamCoreClassLoaderReference *)classLoaderReference
withComThoughtworksXstreamConvertersReflectionReflectionProvider:(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)reflectionProvider {
  return [self initComThoughtworksXstreamMapperAnnotationMapperWithComThoughtworksXstreamMapperMapper:
#line 86
wrapped withComThoughtworksXstreamConvertersConverterRegistry:converterRegistry withComThoughtworksXstreamConvertersConverterLookup:converterLookup withComThoughtworksXstreamCoreClassLoaderReference:
#line 87
classLoaderReference withComThoughtworksXstreamConvertersReflectionReflectionProvider:reflectionProvider];
}


#line 107
- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped
     withComThoughtworksXstreamConvertersConverterRegistry:(id<ComThoughtworksXstreamConvertersConverterRegistry>)converterRegistry
       withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)converterLookup
                                   withJavaLangClassLoader:(JavaLangClassLoader *)classLoader
withComThoughtworksXstreamConvertersReflectionReflectionProvider:(id<ComThoughtworksXstreamConvertersReflectionReflectionProvider>)reflectionProvider
                         withComThoughtworksXstreamCoreJVM:(ComThoughtworksXstreamCoreJVM *)jvm {
  return
#line 111
  [self initComThoughtworksXstreamMapperAnnotationMapperWithComThoughtworksXstreamMapperMapper:wrapped withComThoughtworksXstreamConvertersConverterRegistry:converterRegistry withComThoughtworksXstreamConvertersConverterLookup:converterLookup withComThoughtworksXstreamCoreClassLoaderReference:[[ComThoughtworksXstreamCoreClassLoaderReference alloc] initWithJavaLangClassLoader:classLoader] withComThoughtworksXstreamConvertersReflectionReflectionProvider:reflectionProvider];
}


#line 115
- (NSString *)realMemberWithIOSClass:(IOSClass *)type
                        withNSString:(NSString *)serialized {
  
#line 116
  if (!locked_) {
    [self processAnnotationsWithIOSClass:type];
  }
  return [super realMemberWithIOSClass:type withNSString:serialized];
}


#line 123
- (NSString *)serializedClassWithIOSClass:(IOSClass *)type {
  
#line 124
  if (!locked_) {
    [self processAnnotationsWithIOSClass:type];
  }
  return [super serializedClassWithIOSClass:type];
}


#line 131
- (IOSClass *)defaultImplementationOfWithIOSClass:(IOSClass *)type {
  if (!locked_) {
    [self processAnnotationsWithIOSClass:type];
  }
  IOSClass *defaultImplementation = [super defaultImplementationOfWithIOSClass:type];
  if (!locked_) {
    [self processAnnotationsWithIOSClass:defaultImplementation];
  }
  return defaultImplementation;
}


#line 143
- (id<ComThoughtworksXstreamConvertersConverter>)getLocalConverterWithIOSClass:(IOSClass *)definedIn
                                                                  withNSString:(NSString *)fieldName {
  
#line 144
  if (!locked_) {
    [self processAnnotationsWithIOSClass:definedIn];
  }
  return [super getLocalConverterWithIOSClass:definedIn withNSString:fieldName];
}


#line 150
- (void)autodetectAnnotationsWithBoolean:(jboolean)mode {
  
#line 151
  locked_ = !mode;
}


#line 154
- (void)processAnnotationsWithIOSClassArray:(IOSObjectArray *)initialTypes {
  
#line 155
  if (initialTypes == nil || initialTypes->size_ == 0) {
    return;
  }
  locked_ = YES;
  
#line 160
  id<JavaUtilSet> types = [[ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet alloc] initWithComThoughtworksXstreamMapperAnnotationMapper:self];
  {
    IOSObjectArray *a__ =
#line 161
    initialTypes;
    IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSClass * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSClass *initialType = *b__++;
      
#line 162
      [types addWithId:initialType];
    }
  }
  
#line 164
  [self processTypesWithJavaUtilSet:types];
}


#line 167
- (void)processAnnotationsWithIOSClass:(IOSClass *)initialType {
  
#line 168
  if (initialType == nil) {
    return;
  }
  
#line 172
  id<JavaUtilSet> types = [[ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet alloc] initWithComThoughtworksXstreamMapperAnnotationMapper:self];
  [types addWithId:initialType];
  [self processTypesWithJavaUtilSet:types];
}


#line 177
- (void)processTypesWithJavaUtilSet:(id<JavaUtilSet>)types {
  
#line 178
  while (![((id<JavaUtilSet>) nil_chk(types)) isEmpty]) {
    id<JavaUtilIterator> iter = [types iterator];
    IOSClass *type = [((id<JavaUtilIterator>) nil_chk(iter)) next];
    [iter remove];
    
#line 183
    @synchronized(type) {
      if ([((id<JavaUtilSet>) nil_chk(annotatedTypes_)) containsWithId:type]) {
        continue;
      }
      @try {
        if ([((IOSClass *) nil_chk(type)) isPrimitive]) {
          continue;
        }
        
#line 192
        [self addParametrizedTypesWithJavaLangReflectType:type withJavaUtilSet:types];
        
#line 194
        [self processConverterAnnotationsWithIOSClass:type];
        [self processAliasAnnotationWithIOSClass:type withJavaUtilSet:types];
        [self processAliasTypeAnnotationWithIOSClass:type];
        
#line 198
        if ([type isInterface]) {
          continue;
        }
        
#line 202
        [self processImplicitCollectionAnnotationWithIOSClass:type];
        
#line 204
        IOSObjectArray *fields = [type getDeclaredFields];
        for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fields))->size_; i++) {
          JavaLangReflectField *field = IOSObjectArray_Get(fields, i);
          if ([((JavaLangReflectField *) nil_chk(field)) isEnumConstant] ||
#line 208
          ([field getModifiers] & (JavaLangReflectModifier_STATIC | JavaLangReflectModifier_TRANSIENT)) > 0) {
            continue;
          }
          
#line 212
          [self addParametrizedTypesWithJavaLangReflectType:[field getGenericType] withJavaUtilSet:types];
          
#line 214
          if ([field isSynthetic]) {
            continue;
          }
          
#line 218
          [self processFieldAliasAnnotationWithJavaLangReflectField:field];
          [self processAsAttributeAnnotationWithJavaLangReflectField:field];
          [self processImplicitAnnotationWithJavaLangReflectField:field];
          [self processOmitFieldAnnotationWithJavaLangReflectField:field];
          [self processLocalConverterAnnotationWithJavaLangReflectField:field];
        }
      }
      @finally {
        
#line 225
        [annotatedTypes_ addWithId:type];
      }
    }
  }
}


#line 231
- (void)addParametrizedTypesWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                    withJavaUtilSet:(id<JavaUtilSet>)types {
  
#line 232
  id<JavaUtilSet> processedTypes = [[JavaUtilHashSet alloc] init];
  id<JavaUtilSet> localTypes = [[ComThoughtworksXstreamMapperAnnotationMapper_$1 alloc] initWithJavaUtilSet:types withJavaUtilSet:processedTypes];
  
#line 244
  while (type != nil) {
    [processedTypes addWithId:type];
    if ([(id) type isKindOfClass:[IOSClass class]]) {
      IOSClass *clazz = (IOSClass *) check_class_cast(type, [IOSClass class]);
      [((id<JavaUtilSet>) nil_chk(types)) addWithId:clazz];
      if (![((IOSClass *) nil_chk(clazz)) isPrimitive]) {
        IOSObjectArray *typeParameters = [clazz getTypeParameters];
        {
          IOSObjectArray *a__ =
#line 251
          typeParameters;
          id<JavaLangReflectTypeVariable> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          id<JavaLangReflectTypeVariable> const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            id<JavaLangReflectTypeVariable> typeVariable = *b__++;
            
#line 252
            [localTypes addWithId:typeVariable];
          }
        }
        
#line 254
        [localTypes addWithId:[clazz getGenericSuperclass]];
        {
          IOSObjectArray *a__ =
#line 255
          [clazz getGenericInterfaces];
          id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          id<JavaLangReflectType> const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            id<JavaLangReflectType> iface = *b__++;
            
#line 256
            [localTypes addWithId:iface];
          }
        }
      }
    }
    else
#line 259
    if ([(id) type conformsToProtocol: @protocol(JavaLangReflectTypeVariable)]) {
      id<JavaLangReflectTypeVariable> typeVariable = (id<JavaLangReflectTypeVariable>) check_protocol_cast(type, @protocol(JavaLangReflectTypeVariable));
      IOSObjectArray *bounds = [((id<JavaLangReflectTypeVariable>) nil_chk(typeVariable)) getBounds];
      {
        IOSObjectArray *a__ =
#line 262
        bounds;
        id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        id<JavaLangReflectType> const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          id<JavaLangReflectType> bound = *b__++;
          
#line 263
          [localTypes addWithId:bound];
        }
      }
    }
    else
#line 265
    if ([(id) type conformsToProtocol: @protocol(JavaLangReflectParameterizedType)]) {
      id<JavaLangReflectParameterizedType> parametrizedType = (id<JavaLangReflectParameterizedType>) check_protocol_cast(type, @protocol(JavaLangReflectParameterizedType));
      [localTypes addWithId:[((id<JavaLangReflectParameterizedType>) nil_chk(parametrizedType)) getRawType]];
      IOSObjectArray *actualArguments = [parametrizedType getActualTypeArguments];
      {
        IOSObjectArray *a__ =
#line 269
        actualArguments;
        id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        id<JavaLangReflectType> const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          id<JavaLangReflectType> actualArgument = *b__++;
          
#line 270
          [localTypes addWithId:actualArgument];
        }
      }
    }
    else
#line 272
    if ([(id) type conformsToProtocol: @protocol(JavaLangReflectGenericArrayType)]) {
      id<JavaLangReflectGenericArrayType> arrayType = (id<JavaLangReflectGenericArrayType>) check_protocol_cast(type, @protocol(JavaLangReflectGenericArrayType));
      [localTypes addWithId:[((id<JavaLangReflectGenericArrayType>) nil_chk(arrayType)) getGenericComponentType]];
    }
    
#line 277
    if (![localTypes isEmpty]) {
      id<JavaUtilIterator> iter = [localTypes iterator];
      type = [((id<JavaUtilIterator>) nil_chk(iter)) next];
      [iter remove];
    }
    else {
      
#line 282
      type = nil;
    }
  }
}


#line 287
- (void)processConverterAnnotationsWithIOSClass:(IOSClass *)type {
  
#line 288
  if (converterRegistry_ != nil) {
    id<ComThoughtworksXstreamAnnotationsXStreamConverters> convertersAnnotation = [((IOSClass *) nil_chk(type)) getAnnotationWithIOSClass:
#line 290
    [IOSClass classWithProtocol:@protocol(ComThoughtworksXstreamAnnotationsXStreamConverters)]];
    id<ComThoughtworksXstreamAnnotationsXStreamConverter> converterAnnotation = [type getAnnotationWithIOSClass:
#line 292
    [IOSClass classWithProtocol:@protocol(ComThoughtworksXstreamAnnotationsXStreamConverter)]];
    id<JavaUtilList> annotations = convertersAnnotation != nil ?
#line 294
    [[JavaUtilArrayList alloc] initWithJavaUtilCollection:[JavaUtilArrays asListWithNSObjectArray:[convertersAnnotation value]]] :
#line 295
    [[JavaUtilArrayList alloc] init];
    if (converterAnnotation != nil) {
      [annotations addWithId:converterAnnotation];
    }
    for (id<ComThoughtworksXstreamAnnotationsXStreamConverter> __strong annotation in annotations) {
      id<ComThoughtworksXstreamConvertersConverter> converter = [self cacheConverterWithComThoughtworksXstreamAnnotationsXStreamConverter:
#line 301
      annotation withIOSClass:converterAnnotation != nil ? type : nil];
      if (converter != nil) {
        if (converterAnnotation != nil || [converter canConvertWithIOSClass:type]) {
          [converterRegistry_ registerConverterWithComThoughtworksXstreamConvertersConverter:converter withInt:[((id<ComThoughtworksXstreamAnnotationsXStreamConverter>) nil_chk(annotation)) priority]];
        }
        else {
          
#line 306
          @throw [[ComThoughtworksXstreamInitializationException alloc] initWithNSString:JreStrcat("$$$$", @"Converter ",
#line 307
          [((IOSClass *) nil_chk([((id<ComThoughtworksXstreamAnnotationsXStreamConverter>) nil_chk(annotation)) value])) getName], @" cannot handle annotated class ",
#line 309
          [type getName])];
        }
      }
    }
  }
}


#line 316
- (void)processAliasAnnotationWithIOSClass:(IOSClass *)type
                           withJavaUtilSet:(id<JavaUtilSet>)types {
  
#line 317
  id<ComThoughtworksXstreamAnnotationsXStreamAlias> aliasAnnotation = [((IOSClass *) nil_chk(type)) getAnnotationWithIOSClass:[IOSClass classWithProtocol:@protocol(ComThoughtworksXstreamAnnotationsXStreamAlias)]];
  if (aliasAnnotation != nil) {
    if (classAliasingMapper_ == nil) {
      @throw [[ComThoughtworksXstreamInitializationException alloc] initWithNSString:JreStrcat("$$$", @"No ",
#line 321
      [[IOSClass classWithClass:[ComThoughtworksXstreamMapperClassAliasingMapper class]] getName], @" available")];
    }
    
#line 324
    [((ComThoughtworksXstreamMapperClassAliasingMapper *) nil_chk(classAliasingMapper_)) addClassAliasWithNSString:[aliasAnnotation value] withIOSClass:type];
    if ([aliasAnnotation impl] != [IOSClass classWithClass:[JavaLangVoid class]]) {
      
#line 327
      [((ComThoughtworksXstreamMapperDefaultImplementationsMapper *) nil_chk(defaultImplementationsMapper_)) addDefaultImplementationWithIOSClass:
#line 328
      [aliasAnnotation impl] withIOSClass:type];
      if ([type isInterface]) {
        [((id<JavaUtilSet>) nil_chk(types)) addWithId:[aliasAnnotation impl]];
      }
    }
  }
}


#line 336
- (void)processAliasTypeAnnotationWithIOSClass:(IOSClass *)type {
  
#line 337
  id<ComThoughtworksXstreamAnnotationsXStreamAliasType> aliasAnnotation = [((IOSClass *) nil_chk(type)) getAnnotationWithIOSClass:[IOSClass classWithProtocol:@protocol(ComThoughtworksXstreamAnnotationsXStreamAliasType)]];
  if (aliasAnnotation != nil) {
    if (classAliasingMapper_ == nil) {
      @throw [[ComThoughtworksXstreamInitializationException alloc] initWithNSString:JreStrcat("$$$", @"No ",
#line 341
      [[IOSClass classWithClass:[ComThoughtworksXstreamMapperClassAliasingMapper class]] getName], @" available")];
    }
    
#line 344
    [((ComThoughtworksXstreamMapperClassAliasingMapper *) nil_chk(classAliasingMapper_)) addTypeAliasWithNSString:[aliasAnnotation value] withIOSClass:type];
  }
}


#line 349
- (void)processImplicitCollectionAnnotationWithIOSClass:(IOSClass *)type {
  
#line 350
  id<ComThoughtworksXstreamAnnotationsXStreamImplicitCollection> implicitColAnnotation = [((IOSClass *) nil_chk(type)) getAnnotationWithIOSClass:
#line 351
  [IOSClass classWithProtocol:@protocol(ComThoughtworksXstreamAnnotationsXStreamImplicitCollection)]];
  if (implicitColAnnotation != nil) {
    if (implicitCollectionMapper_ == nil) {
      @throw [[ComThoughtworksXstreamInitializationException alloc] initWithNSString:JreStrcat("$$$", @"No ",
#line 355
      [[IOSClass classWithClass:[ComThoughtworksXstreamMapperImplicitCollectionMapper class]] getName], @" available")];
    }
    
#line 358
    NSString *fieldName = [implicitColAnnotation value];
    NSString *itemFieldName = [implicitColAnnotation item];
    JavaLangReflectField *field;
    @try {
      field = [type getDeclaredField:fieldName];
    }
    @catch (
#line 363
    JavaLangNoSuchFieldException *e) {
      @throw [[ComThoughtworksXstreamInitializationException alloc] initWithNSString:JreStrcat("$$$$$", [type getName], @" does not have a field named '",
#line 366
      fieldName, @"' as required by ",
#line 368
      [[IOSClass classWithProtocol:@protocol(ComThoughtworksXstreamAnnotationsXStreamImplicitCollection)] getName])];
    }
    IOSClass *itemType = nil;
    id<JavaLangReflectType> genericType = [((JavaLangReflectField *) nil_chk(field)) getGenericType];
    if ([(id) genericType conformsToProtocol: @protocol(JavaLangReflectParameterizedType)]) {
      id<JavaLangReflectType> typeArgument = IOSObjectArray_Get(nil_chk([((id<JavaLangReflectParameterizedType>) nil_chk(((id<JavaLangReflectParameterizedType>) check_protocol_cast(genericType, @protocol(JavaLangReflectParameterizedType))))) getActualTypeArguments]),
#line 374
      0);
      itemType = [self getClassWithJavaLangReflectType:typeArgument];
    }
    if (itemType == nil) {
      [((ComThoughtworksXstreamMapperImplicitCollectionMapper *) nil_chk(implicitCollectionMapper_)) addWithIOSClass:type withNSString:fieldName withNSString:nil withIOSClass:[IOSClass classWithClass:[NSObject class]]];
    }
    else {
      
#line 380
      if ([((NSString *) nil_chk(itemFieldName)) isEqual:@""]) {
        [((ComThoughtworksXstreamMapperImplicitCollectionMapper *) nil_chk(implicitCollectionMapper_)) addWithIOSClass:type withNSString:fieldName withNSString:nil withIOSClass:itemType];
      }
      else {
        
#line 383
        [((ComThoughtworksXstreamMapperImplicitCollectionMapper *) nil_chk(implicitCollectionMapper_)) addWithIOSClass:type withNSString:fieldName withNSString:itemFieldName withIOSClass:itemType];
      }
    }
  }
}


#line 389
- (void)processFieldAliasAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field {
  
#line 390
  id<ComThoughtworksXstreamAnnotationsXStreamAlias> aliasAnnotation = [((JavaLangReflectField *) nil_chk(field)) getAnnotationWithIOSClass:[IOSClass classWithProtocol:@protocol(ComThoughtworksXstreamAnnotationsXStreamAlias)]];
  if (aliasAnnotation != nil) {
    if (fieldAliasingMapper_ == nil) {
      @throw [[ComThoughtworksXstreamInitializationException alloc] initWithNSString:JreStrcat("$$$", @"No ",
#line 394
      [[IOSClass classWithClass:[ComThoughtworksXstreamMapperFieldAliasingMapper class]] getName], @" available")];
    }
    
#line 397
    [((ComThoughtworksXstreamMapperFieldAliasingMapper *) nil_chk(fieldAliasingMapper_)) addFieldAliasWithNSString:
#line 398
    [aliasAnnotation value] withIOSClass:[field getDeclaringClass] withNSString:[field getName]];
  }
}


#line 402
- (void)processAsAttributeAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field {
  
#line 403
  id<ComThoughtworksXstreamAnnotationsXStreamAsAttribute> asAttributeAnnotation = [((JavaLangReflectField *) nil_chk(field)) getAnnotationWithIOSClass:
#line 404
  [IOSClass classWithProtocol:@protocol(ComThoughtworksXstreamAnnotationsXStreamAsAttribute)]];
  if (asAttributeAnnotation != nil) {
    if (attributeMapper_ == nil) {
      @throw [[ComThoughtworksXstreamInitializationException alloc] initWithNSString:JreStrcat("$$$", @"No ",
#line 408
      [[IOSClass classWithClass:[ComThoughtworksXstreamMapperAttributeMapper class]] getName], @" available")];
    }
    
#line 411
    [((ComThoughtworksXstreamMapperAttributeMapper *) nil_chk(attributeMapper_)) addAttributeForWithJavaLangReflectField:field];
  }
}


#line 415
- (void)processImplicitAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field {
  
#line 416
  id<ComThoughtworksXstreamAnnotationsXStreamImplicit> implicitAnnotation = [((JavaLangReflectField *) nil_chk(field)) getAnnotationWithIOSClass:[IOSClass classWithProtocol:@protocol(ComThoughtworksXstreamAnnotationsXStreamImplicit)]];
  if (implicitAnnotation != nil) {
    if (implicitCollectionMapper_ == nil) {
      @throw [[ComThoughtworksXstreamInitializationException alloc] initWithNSString:JreStrcat("$$$", @"No ",
#line 420
      [[IOSClass classWithClass:[ComThoughtworksXstreamMapperImplicitCollectionMapper class]] getName], @" available")];
    }
    
#line 423
    NSString *fieldName = [field getName];
    NSString *itemFieldName = [implicitAnnotation itemFieldName];
    NSString *keyFieldName = [implicitAnnotation keyFieldName];
    jboolean isMap = [[IOSClass classWithProtocol:@protocol(JavaUtilMap)] isAssignableFrom:[field getType]];
    IOSClass *itemType = nil;
    if (![((IOSClass *) nil_chk([field getType])) isArray]) {
      id<JavaLangReflectType> genericType = [field getGenericType];
      if ([(id) genericType conformsToProtocol: @protocol(JavaLangReflectParameterizedType)]) {
        IOSObjectArray *actualTypeArguments = [((id<JavaLangReflectParameterizedType>) nil_chk(((id<JavaLangReflectParameterizedType>) check_protocol_cast(genericType, @protocol(JavaLangReflectParameterizedType))))) getActualTypeArguments];
        
#line 433
        id<JavaLangReflectType> typeArgument = IOSObjectArray_Get(nil_chk(actualTypeArguments), isMap ? 1 : 0);
        itemType = [self getClassWithJavaLangReflectType:typeArgument];
      }
    }
    if (isMap) {
      [((ComThoughtworksXstreamMapperImplicitCollectionMapper *) nil_chk(implicitCollectionMapper_)) addWithIOSClass:
#line 439
      [field getDeclaringClass] withNSString:fieldName withNSString:
#line 440
      itemFieldName != nil && ![@"" isEqual:itemFieldName] ? itemFieldName : nil withIOSClass:
#line 441
      itemType withNSString:keyFieldName != nil && ![@"" isEqual:keyFieldName] ?
#line 442
      keyFieldName :
#line 443
      nil];
    }
    else {
      
#line 445
      if (itemFieldName != nil && ![@"" isEqual:itemFieldName]) {
        [((ComThoughtworksXstreamMapperImplicitCollectionMapper *) nil_chk(implicitCollectionMapper_)) addWithIOSClass:
#line 447
        [field getDeclaringClass] withNSString:fieldName withNSString:itemFieldName withIOSClass:itemType];
      }
      else {
        
#line 449
        [((ComThoughtworksXstreamMapperImplicitCollectionMapper *) nil_chk(implicitCollectionMapper_)) addWithIOSClass:
#line 450
        [field getDeclaringClass] withNSString:fieldName withIOSClass:itemType];
      }
    }
  }
}


#line 456
- (void)processOmitFieldAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field {
  
#line 457
  id<ComThoughtworksXstreamAnnotationsXStreamOmitField> omitFieldAnnotation = [((JavaLangReflectField *) nil_chk(field)) getAnnotationWithIOSClass:
#line 458
  [IOSClass classWithProtocol:@protocol(ComThoughtworksXstreamAnnotationsXStreamOmitField)]];
  if (omitFieldAnnotation != nil) {
    if (fieldAliasingMapper_ == nil) {
      @throw [[ComThoughtworksXstreamInitializationException alloc] initWithNSString:JreStrcat("$$$", @"No ",
#line 462
      [[IOSClass classWithClass:[ComThoughtworksXstreamMapperFieldAliasingMapper class]] getName], @" available")];
    }
    
#line 465
    [((ComThoughtworksXstreamMapperFieldAliasingMapper *) nil_chk(fieldAliasingMapper_)) omitFieldWithIOSClass:[field getDeclaringClass] withNSString:[field getName]];
  }
}


#line 469
- (void)processLocalConverterAnnotationWithJavaLangReflectField:(JavaLangReflectField *)field {
  
#line 470
  id<ComThoughtworksXstreamAnnotationsXStreamConverter> annotation = [((JavaLangReflectField *) nil_chk(field)) getAnnotationWithIOSClass:[IOSClass classWithProtocol:@protocol(ComThoughtworksXstreamAnnotationsXStreamConverter)]];
  if (annotation != nil) {
    id<ComThoughtworksXstreamConvertersConverter> converter = [self cacheConverterWithComThoughtworksXstreamAnnotationsXStreamConverter:annotation withIOSClass:[field getType]];
    if (converter != nil) {
      if (localConversionMapper_ == nil) {
        @throw [[ComThoughtworksXstreamInitializationException alloc] initWithNSString:JreStrcat("$$$", @"No ",
#line 476
        [[IOSClass classWithClass:[ComThoughtworksXstreamMapperLocalConversionMapper class]] getName], @" available")];
      }
      
#line 479
      [((ComThoughtworksXstreamMapperLocalConversionMapper *) nil_chk(localConversionMapper_)) registerLocalConverterWithIOSClass:
#line 480
      [field getDeclaringClass] withNSString:[field getName] withComThoughtworksXstreamConvertersConverter:converter];
    }
  }
}


#line 485
- (id<ComThoughtworksXstreamConvertersConverter>)cacheConverterWithComThoughtworksXstreamAnnotationsXStreamConverter:(id<ComThoughtworksXstreamAnnotationsXStreamConverter>)annotation
                                                                                                        withIOSClass:(IOSClass *)targetType {
  
#line 487
  id<ComThoughtworksXstreamConvertersConverter> result = nil;
  IOSObjectArray *args;
  id<JavaUtilList> parameter = [[JavaUtilArrayList alloc] init];
  if (targetType != nil && [((id<ComThoughtworksXstreamAnnotationsXStreamConverter>) nil_chk(annotation)) useImplicitType]) {
    [parameter addWithId:targetType];
  }
  id<JavaUtilList> arrays = [[JavaUtilArrayList alloc] init];
  [arrays addWithId:[((id<ComThoughtworksXstreamAnnotationsXStreamConverter>) nil_chk(annotation)) booleans]];
  [arrays addWithId:[annotation bytes]];
  [arrays addWithId:[annotation chars]];
  [arrays addWithId:[annotation doubles]];
  [arrays addWithId:[annotation floats]];
  [arrays addWithId:[annotation ints]];
  [arrays addWithId:[annotation longs]];
  [arrays addWithId:[annotation shorts]];
  [arrays addWithId:[annotation strings]];
  [arrays addWithId:[annotation types]];
  for (id __strong array in arrays) {
    if (array != nil) {
      jint length = [JavaLangReflectArray getLengthWithId:array];
      for (jint i = 0; i < length; i++) {
        id object = [JavaLangReflectArray getWithId:array withInt:i];
        if (![parameter containsWithId:object]) {
          [parameter addWithId:object];
        }
      }
    }
  }
  IOSClass *converterType = [annotation value];
  id<JavaUtilMap> converterMapping = [((id<JavaUtilMap>) nil_chk(converterCache_)) getWithId:converterType];
  if (converterMapping != nil) {
    result = [converterMapping getWithId:parameter];
  }
  if (result == nil) {
    jint size = [parameter size];
    if (size > 0) {
      args = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(arguments_))->size_ + size type:[IOSClass classWithClass:[NSObject class]]];
      [JavaLangSystem arraycopyWithId:arguments_ withInt:0 withId:args withInt:size withInt:arguments_->size_];
      [JavaLangSystem arraycopyWithId:[parameter toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:size type:[IOSClass classWithClass:[NSObject class]]]] withInt:0 withId:args withInt:0 withInt:size];
    }
    else {
      
#line 527
      args = arguments_;
    }
    
#line 530
    id<ComThoughtworksXstreamConvertersConverter> converter;
    @try {
      if ([[IOSClass classWithProtocol:@protocol(ComThoughtworksXstreamConvertersSingleValueConverter)] isAssignableFrom:converterType] &&
#line 533
      ![[IOSClass classWithProtocol:@protocol(ComThoughtworksXstreamConvertersConverter)] isAssignableFrom:converterType]) {
        id<ComThoughtworksXstreamConvertersSingleValueConverter> svc = (id<ComThoughtworksXstreamConvertersSingleValueConverter>) check_protocol_cast([ComThoughtworksXstreamCoreUtilDependencyInjectionFactory newInstanceWithIOSClass:
#line 535
        converterType withNSObjectArray:args], @protocol(ComThoughtworksXstreamConvertersSingleValueConverter));
        converter = [[ComThoughtworksXstreamConvertersSingleValueConverterWrapper alloc] initWithComThoughtworksXstreamConvertersSingleValueConverter:svc];
      }
      else {
        
#line 538
        converter = (id<ComThoughtworksXstreamConvertersConverter>) check_protocol_cast([ComThoughtworksXstreamCoreUtilDependencyInjectionFactory newInstanceWithIOSClass:
#line 539
        converterType withNSObjectArray:args], @protocol(ComThoughtworksXstreamConvertersConverter));
      }
    }
    @catch (
#line 541
    JavaLangException *e) {
      @throw [[ComThoughtworksXstreamInitializationException alloc] initWithNSString:JreStrcat("$$$", @"Cannot instantiate converter ",
#line 543
      [((IOSClass *) nil_chk(converterType)) getName],
#line 544
      (targetType != nil ? JreStrcat("$$", @" for type ", [targetType getName]) : @"")) withJavaLangThrowable:e];
    }
    if (converterMapping == nil) {
      converterMapping = [[JavaUtilHashMap alloc] init];
      (void) [converterCache_ putWithId:converterType withId:converterMapping];
    }
    (void) [((id<JavaUtilMap>) nil_chk(converterMapping)) putWithId:parameter withId:converter];
    result = converter;
  }
  return result;
}


#line 556
- (IOSClass *)getClassWithJavaLangReflectType:(id<JavaLangReflectType>)typeArgument {
  
#line 557
  IOSClass *type = nil;
  if ([(id) typeArgument conformsToProtocol: @protocol(JavaLangReflectParameterizedType)]) {
    type = (IOSClass *) check_class_cast([((id<JavaLangReflectParameterizedType>) nil_chk(((id<JavaLangReflectParameterizedType>) check_protocol_cast(typeArgument, @protocol(JavaLangReflectParameterizedType))))) getRawType], [IOSClass class]);
  }
  else
#line 560
  if ([(id) typeArgument isKindOfClass:[IOSClass class]]) {
    type = (IOSClass *) check_class_cast(typeArgument, [IOSClass class]);
  }
  return type;
}


#line 566
- (void)setupMappers {
  
#line 567
  classAliasingMapper_ = (ComThoughtworksXstreamMapperClassAliasingMapper *) check_class_cast([self lookupMapperOfTypeWithIOSClass:[IOSClass classWithClass:[ComThoughtworksXstreamMapperClassAliasingMapper class]]], [ComThoughtworksXstreamMapperClassAliasingMapper class]);
  defaultImplementationsMapper_ = (ComThoughtworksXstreamMapperDefaultImplementationsMapper *) check_class_cast([self lookupMapperOfTypeWithIOSClass:[IOSClass classWithClass:[ComThoughtworksXstreamMapperDefaultImplementationsMapper class]]], [ComThoughtworksXstreamMapperDefaultImplementationsMapper class]);
  implicitCollectionMapper_ = (ComThoughtworksXstreamMapperImplicitCollectionMapper *) check_class_cast([self lookupMapperOfTypeWithIOSClass:[IOSClass classWithClass:[ComThoughtworksXstreamMapperImplicitCollectionMapper class]]], [ComThoughtworksXstreamMapperImplicitCollectionMapper class]);
  fieldAliasingMapper_ = (ComThoughtworksXstreamMapperFieldAliasingMapper *) check_class_cast([self lookupMapperOfTypeWithIOSClass:[IOSClass classWithClass:[ComThoughtworksXstreamMapperFieldAliasingMapper class]]], [ComThoughtworksXstreamMapperFieldAliasingMapper class]);
  attributeMapper_ = (ComThoughtworksXstreamMapperAttributeMapper *) check_class_cast([self lookupMapperOfTypeWithIOSClass:[IOSClass classWithClass:[ComThoughtworksXstreamMapperAttributeMapper class]]], [ComThoughtworksXstreamMapperAttributeMapper class]);
  localConversionMapper_ = (ComThoughtworksXstreamMapperLocalConversionMapper *) check_class_cast([self lookupMapperOfTypeWithIOSClass:[IOSClass classWithClass:[ComThoughtworksXstreamMapperLocalConversionMapper class]]], [ComThoughtworksXstreamMapperLocalConversionMapper class]);
}


#line 575
- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  
#line 576
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) defaultWriteObject];
  jint max = ((IOSObjectArray *) nil_chk(arguments_))->size_ - 2;
  [outArg writeIntWithInt:max];
  for (jint i = 0; i < max; i++) {
    [outArg writeObjectWithId:IOSObjectArray_Get(arguments_, i)];
  }
}


#line 584
- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  
#line 585
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  [self setupMappers];
  jint max = [inArg readInt];
  arguments_ = [IOSObjectArray arrayWithLength:max + 2 type:[IOSClass classWithClass:[NSObject class]]];
  for (jint i = 0; i < max; i++) {
    IOSObjectArray_Set(arguments_, i, [inArg readObject]);
    if ([IOSObjectArray_Get(arguments_, i) isKindOfClass:[ComThoughtworksXstreamCoreClassLoaderReference class]]) {
      IOSObjectArray_Set(arguments_, max + 1, [((ComThoughtworksXstreamCoreClassLoaderReference *) nil_chk(((ComThoughtworksXstreamCoreClassLoaderReference *) check_class_cast(IOSObjectArray_Get(arguments_, i), [ComThoughtworksXstreamCoreClassLoaderReference class])))) getReference]);
    }
  }
  IOSObjectArray_SetAndConsume(arguments_, max, [[ComThoughtworksXstreamCoreJVM alloc] init]);
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamMapperAnnotationMapper *)other {
  [super copyAllFieldsTo:other];
  other->annotatedTypes_ = annotatedTypes_;
  other->arguments_ = arguments_;
  other->attributeMapper_ = attributeMapper_;
  other->classAliasingMapper_ = classAliasingMapper_;
  other->converterCache_ = converterCache_;
  other->converterRegistry_ = converterRegistry_;
  other->defaultImplementationsMapper_ = defaultImplementationsMapper_;
  other->fieldAliasingMapper_ = fieldAliasingMapper_;
  other->implicitCollectionMapper_ = implicitCollectionMapper_;
  other->localConversionMapper_ = localConversionMapper_;
  other->locked_ = locked_;
}

+ (IOSObjectArray *)__annotations_processImplicitCollectionAnnotationWithIOSClass_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamMapperMapper:withComThoughtworksXstreamConvertersConverterRegistry:withComThoughtworksXstreamConvertersConverterLookup:withComThoughtworksXstreamCoreClassLoaderReference:withComThoughtworksXstreamConvertersReflectionReflectionProvider:", "AnnotationMapper", NULL, 0x1, NULL },
    { "initWithComThoughtworksXstreamMapperMapper:withComThoughtworksXstreamConvertersConverterRegistry:withComThoughtworksXstreamConvertersConverterLookup:withJavaLangClassLoader:withComThoughtworksXstreamConvertersReflectionReflectionProvider:withComThoughtworksXstreamCoreJVM:", "AnnotationMapper", NULL, 0x1, NULL },
    { "realMemberWithIOSClass:withNSString:", "realMember", "Ljava.lang.String;", 0x1, NULL },
    { "serializedClassWithIOSClass:", "serializedClass", "Ljava.lang.String;", 0x1, NULL },
    { "defaultImplementationOfWithIOSClass:", "defaultImplementationOf", "Ljava.lang.Class;", 0x1, NULL },
    { "getLocalConverterWithIOSClass:withNSString:", "getLocalConverter", "Lcom.thoughtworks.xstream.converters.Converter;", 0x1, NULL },
    { "autodetectAnnotationsWithBoolean:", "autodetectAnnotations", "V", 0x1, NULL },
    { "processAnnotationsWithIOSClassArray:", "processAnnotations", "V", 0x1, NULL },
    { "processAnnotationsWithIOSClass:", "processAnnotations", "V", 0x2, NULL },
    { "processTypesWithJavaUtilSet:", "processTypes", "V", 0x2, NULL },
    { "addParametrizedTypesWithJavaLangReflectType:withJavaUtilSet:", "addParametrizedTypes", "V", 0x2, NULL },
    { "processConverterAnnotationsWithIOSClass:", "processConverterAnnotations", "V", 0x2, NULL },
    { "processAliasAnnotationWithIOSClass:withJavaUtilSet:", "processAliasAnnotation", "V", 0x2, NULL },
    { "processAliasTypeAnnotationWithIOSClass:", "processAliasTypeAnnotation", "V", 0x2, NULL },
    { "processImplicitCollectionAnnotationWithIOSClass:", "processImplicitCollectionAnnotation", "V", 0x2, NULL },
    { "processFieldAliasAnnotationWithJavaLangReflectField:", "processFieldAliasAnnotation", "V", 0x2, NULL },
    { "processAsAttributeAnnotationWithJavaLangReflectField:", "processAsAttributeAnnotation", "V", 0x2, NULL },
    { "processImplicitAnnotationWithJavaLangReflectField:", "processImplicitAnnotation", "V", 0x2, NULL },
    { "processOmitFieldAnnotationWithJavaLangReflectField:", "processOmitFieldAnnotation", "V", 0x2, NULL },
    { "processLocalConverterAnnotationWithJavaLangReflectField:", "processLocalConverterAnnotation", "V", 0x2, NULL },
    { "cacheConverterWithComThoughtworksXstreamAnnotationsXStreamConverter:withIOSClass:", "cacheConverter", "Lcom.thoughtworks.xstream.converters.Converter;", 0x2, NULL },
    { "getClassWithJavaLangReflectType:", "getClass", "Ljava.lang.Class;", 0x2, NULL },
    { "setupMappers", NULL, "V", 0x2, NULL },
    { "writeObjectWithJavaIoObjectOutputStream:", "writeObject", "V", 0x2, "Ljava.io.IOException;" },
    { "readObjectWithJavaIoObjectInputStream:", "readObject", "V", 0x2, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "locked_", NULL, 0x2, "Z", NULL,  },
    { "arguments_", NULL, 0x82, "[Ljava.lang.Object;", NULL,  },
    { "converterRegistry_", NULL, 0x12, "Lcom.thoughtworks.xstream.converters.ConverterRegistry;", NULL,  },
    { "classAliasingMapper_", NULL, 0x82, "Lcom.thoughtworks.xstream.mapper.ClassAliasingMapper;", NULL,  },
    { "defaultImplementationsMapper_", NULL, 0x82, "Lcom.thoughtworks.xstream.mapper.DefaultImplementationsMapper;", NULL,  },
    { "implicitCollectionMapper_", NULL, 0x82, "Lcom.thoughtworks.xstream.mapper.ImplicitCollectionMapper;", NULL,  },
    { "fieldAliasingMapper_", NULL, 0x82, "Lcom.thoughtworks.xstream.mapper.FieldAliasingMapper;", NULL,  },
    { "attributeMapper_", NULL, 0x82, "Lcom.thoughtworks.xstream.mapper.AttributeMapper;", NULL,  },
    { "localConversionMapper_", NULL, 0x82, "Lcom.thoughtworks.xstream.mapper.LocalConversionMapper;", NULL,  },
    { "converterCache_", NULL, 0x12, "Ljava.util.Map;", NULL,  },
    { "annotatedTypes_", NULL, 0x12, "Ljava.util.Set;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamMapperAnnotationMapper = { "AnnotationMapper", "com.thoughtworks.xstream.mapper", NULL, 0x1, 25, methods, 11, fields, 0, NULL};
  return &_ComThoughtworksXstreamMapperAnnotationMapper;
}

@end


#line 598
@implementation ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet

- (jboolean)addWithId:(IOSClass *)type {
  
#line 601
  if (type == nil) {
    return NO;
  }
  while ([((IOSClass *) nil_chk(type)) isArray]) {
    type = [type getComponentType];
  }
  NSString *name = [((IOSClass *) nil_chk(type)) getName];
  if ([((NSString *) nil_chk(name)) hasPrefix:@"java."] || [name hasPrefix:@"javax."]) {
    return NO;
  }
  jboolean ret = [((id<JavaUtilSet>) nil_chk(this$0_->annotatedTypes_)) containsWithId:type] ? NO : [super addWithId:type];
  if (ret) {
    id<ComThoughtworksXstreamAnnotationsXStreamInclude> inc = [type getAnnotationWithIOSClass:[IOSClass classWithProtocol:@protocol(ComThoughtworksXstreamAnnotationsXStreamInclude)]];
    if (inc != nil) {
      IOSObjectArray *incTypes = [inc value];
      if (incTypes != nil) {
        {
          IOSObjectArray *a__ =
#line 617
          incTypes;
          IOSClass * const *b__ = a__->buffer_;
          IOSClass * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            IOSClass *incType = *b__++;
            
#line 618
            [self addWithId:incType];
          }
        }
      }
    }
  }
  
#line 623
  return ret;
}

- (instancetype)initWithComThoughtworksXstreamMapperAnnotationMapper:(ComThoughtworksXstreamMapperAnnotationMapper *)outer$ {
  this$0_ = outer$;
  return [super init];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "addWithIOSClass:", "add", "Z", 0x1, NULL },
    { "initWithComThoughtworksXstreamMapperAnnotationMapper:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.thoughtworks.xstream.mapper.AnnotationMapper;", NULL,  },
  };
  static const char *superclass_type_args[] = {"Ljava.lang.Class;"};
  static const J2ObjcClassInfo _ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet = { "UnprocessedTypesSet", "com.thoughtworks.xstream.mapper", "AnnotationMapper", 0x12, 2, methods, 1, fields, 1, superclass_type_args};
  return &_ComThoughtworksXstreamMapperAnnotationMapper_UnprocessedTypesSet;
}

@end

@implementation ComThoughtworksXstreamMapperAnnotationMapper_$1


#line 236
- (jboolean)addWithId:(id<JavaLangReflectType>)o {
  
#line 237
  if ([(id) o isKindOfClass:[IOSClass class]]) {
    return [((id<JavaUtilSet>) nil_chk(val$types_)) addWithId:(IOSClass *) check_class_cast(o, [IOSClass class])];
  }
  return o == nil || [((id<JavaUtilSet>) nil_chk(val$processedTypes_)) containsWithId:o] ? NO : [super addWithId:o];
}

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)capture$0
                    withJavaUtilSet:(id<JavaUtilSet>)capture$1 {
  val$types_ = capture$0;
  val$processedTypes_ = capture$1;
  return [super init];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "addWithJavaLangReflectType:", "add", "Z", 0x1, NULL },
    { "initWithJavaUtilSet:withJavaUtilSet:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$types_", NULL, 0x1012, "Ljava.util.Set;", NULL,  },
    { "val$processedTypes_", NULL, 0x1012, "Ljava.util.Set;", NULL,  },
  };
  static const char *superclass_type_args[] = {"Ljava.lang.reflect.Type;"};
  static const J2ObjcClassInfo _ComThoughtworksXstreamMapperAnnotationMapper_$1 = { "$1", "com.thoughtworks.xstream.mapper", "AnnotationMapper", 0x8000, 2, methods, 2, fields, 1, superclass_type_args};
  return &_ComThoughtworksXstreamMapperAnnotationMapper_$1;
}

@end
