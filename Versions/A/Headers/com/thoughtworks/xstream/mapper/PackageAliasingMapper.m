//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/mapper/PackageAliasingMapper.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/mapper/PackageAliasingMapper.java"

#include "IOSClass.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "com/thoughtworks/xstream/mapper/PackageAliasingMapper.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"

BOOL ComThoughtworksXstreamMapperPackageAliasingMapper_initialized = NO;


#line 29
@implementation ComThoughtworksXstreamMapperPackageAliasingMapper

id<JavaUtilComparator> ComThoughtworksXstreamMapperPackageAliasingMapper_REVERSE_;


#line 41
- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped {
  if (self =
#line 42
  [super initWithComThoughtworksXstreamMapperMapper:wrapped]) {
    packageToName_ =
#line 38
    [[JavaUtilTreeMap alloc] initWithJavaUtilComparator:ComThoughtworksXstreamMapperPackageAliasingMapper_REVERSE_];
    nameToPackage_ =
#line 39
    [[JavaUtilHashMap alloc] init];
  }
  return self;
}


#line 45
- (void)addPackageAliasWithNSString:(NSString *)name
                       withNSString:(NSString *)pkg {
  
#line 46
  if (((jint) [((NSString *) nil_chk(name)) length]) > 0 && [name charAtWithInt:((jint) [name length]) - 1] != '.') {
    name = JreStrcat("$C", name, '.');
  }
  if (((jint) [((NSString *) nil_chk(pkg)) length]) > 0 && [pkg charAtWithInt:((jint) [pkg length]) - 1] != '.') {
    pkg = JreStrcat("$C", pkg, '.');
  }
  (void) [((id<JavaUtilMap>) nil_chk(nameToPackage_)) putWithId:name withId:pkg];
  (void) [((id<JavaUtilMap>) nil_chk(packageToName_)) putWithId:pkg withId:name];
}


#line 56
- (NSString *)serializedClassWithIOSClass:(IOSClass *)type {
  
#line 57
  NSString *className_ = [((IOSClass *) nil_chk(type)) getName];
  jint length = ((jint) [((NSString *) nil_chk(className_)) length]);
  jint dot = -1;
  do {
    dot = [className_ lastIndexOf:'.' fromIndex:length];
    NSString *pkg = dot < 0 ? @"" : [className_ substring:0 endIndex:dot + 1];
    NSString *alias = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(packageToName_)) getWithId:pkg], [NSString class]);
    if (alias != nil) {
      return JreStrcat("$$", alias, (dot < 0 ? className_ : [className_ substring:dot + 1]));
    }
    length = dot - 1;
  }
  while (
#line 68
  dot >= 0);
  return [super serializedClassWithIOSClass:type];
}


#line 72
- (IOSClass *)realClassWithNSString:(NSString *)elementName {
  
#line 73
  jint length = ((jint) [((NSString *) nil_chk(elementName)) length]);
  jint dot = -1;
  do {
    dot = [elementName lastIndexOf:'.' fromIndex:length];
    NSString *name = dot < 0 ? @"" : JreStrcat("$C", [elementName substring:0 endIndex:dot], '.');
    NSString *packageName = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(nameToPackage_)) getWithId:name], [NSString class]);
    
#line 80
    if (packageName != nil) {
      elementName = JreStrcat("$$", packageName,
#line 82
      (dot < 0 ? elementName : [elementName substring:dot + 1]));
      break;
    }
    length = dot - 1;
  }
  while (
#line 86
  dot >= 0);
  
#line 88
  return [super realClassWithNSString:elementName];
}


#line 91
- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  
#line 92
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) writeObjectWithId:[[JavaUtilHashMap alloc] initWithJavaUtilMap:packageToName_]];
}


#line 95
- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  packageToName_ = [[JavaUtilTreeMap alloc] initWithJavaUtilComparator:ComThoughtworksXstreamMapperPackageAliasingMapper_REVERSE_];
  [packageToName_ putAllWithJavaUtilMap:(id<JavaUtilMap>) check_protocol_cast([((JavaIoObjectInputStream *) nil_chk(inArg)) readObject], @protocol(JavaUtilMap))];
  nameToPackage_ = [[JavaUtilHashMap alloc] init];
  for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([packageToName_ keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    id type = [iter next];
    (void) [nameToPackage_ putWithId:[packageToName_ getWithId:type] withId:type];
  }
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamMapperPackageAliasingMapper *)other {
  [super copyAllFieldsTo:other];
  other->nameToPackage_ = nameToPackage_;
  other->packageToName_ = packageToName_;
}

+ (void)initialize {
  if (self == [ComThoughtworksXstreamMapperPackageAliasingMapper class]) {
    ComThoughtworksXstreamMapperPackageAliasingMapper_REVERSE_ =
#line 31
    [[ComThoughtworksXstreamMapperPackageAliasingMapper_$1 alloc] init];
    ComThoughtworksXstreamMapperPackageAliasingMapper_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamMapperMapper:", "PackageAliasingMapper", NULL, 0x1, NULL },
    { "addPackageAliasWithNSString:withNSString:", "addPackageAlias", "V", 0x1, NULL },
    { "serializedClassWithIOSClass:", "serializedClass", "Ljava.lang.String;", 0x1, NULL },
    { "realClassWithNSString:", "realClass", "Ljava.lang.Class;", 0x1, NULL },
    { "writeObjectWithJavaIoObjectOutputStream:", "writeObject", "V", 0x2, "Ljava.io.IOException;" },
    { "readObjectWithJavaIoObjectInputStream:", "readObject", "V", 0x2, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "REVERSE_", NULL, 0x1a, "Ljava.util.Comparator;", &ComThoughtworksXstreamMapperPackageAliasingMapper_REVERSE_,  },
    { "packageToName_", NULL, 0x2, "Ljava.util.Map;", NULL,  },
    { "nameToPackage_", NULL, 0x84, "Ljava.util.Map;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamMapperPackageAliasingMapper = { "PackageAliasingMapper", "com.thoughtworks.xstream.mapper", NULL, 0x1, 6, methods, 3, fields, 0, NULL};
  return &_ComThoughtworksXstreamMapperPackageAliasingMapper;
}

@end

@implementation ComThoughtworksXstreamMapperPackageAliasingMapper_$1


#line 33
- (jint)compareWithId:(id)o1
               withId:(id)o2 {
  
#line 34
  return [((NSString *) nil_chk(((NSString *) check_class_cast(o2, [NSString class])))) compareToWithId:(NSString *) check_class_cast(o1, [NSString class])];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamMapperPackageAliasingMapper_$1 = { "$1", "com.thoughtworks.xstream.mapper", "PackageAliasingMapper", 0x8000, 2, methods, 0, NULL, 0, NULL};
  return &_ComThoughtworksXstreamMapperPackageAliasingMapper_$1;
}

@end
