//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/mapper/ClassAliasingMapper.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/mapper/ClassAliasingMapper.java"

#include "IOSClass.h"
#include "com/thoughtworks/xstream/core/util/Primitives.h"
#include "com/thoughtworks/xstream/mapper/ClassAliasingMapper.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"


#line 26
@implementation ComThoughtworksXstreamMapperClassAliasingMapper


#line 32
- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped {
  if (self =
#line 33
  [super initWithComThoughtworksXstreamMapperMapper:wrapped]) {
    typeToName_ =
#line 28
    [[JavaUtilHashMap alloc] init];
    classToName_ =
#line 29
    [[JavaUtilHashMap alloc] init];
    nameToType_ =
#line 30
    [[JavaUtilHashMap alloc] init];
  }
  return self;
}


#line 36
- (void)addClassAliasWithNSString:(NSString *)name
                     withIOSClass:(IOSClass *)type {
  
#line 37
  (void) [((id<JavaUtilMap>) nil_chk(nameToType_)) putWithId:name withId:[((IOSClass *) nil_chk(type)) getName]];
  (void) [((id<JavaUtilMap>) nil_chk(classToName_)) putWithId:[type getName] withId:name];
}

- (void)addClassAttributeAliasWithNSString:(NSString *)name
                              withIOSClass:(IOSClass *)type {
  
#line 45
  [self addClassAliasWithNSString:name withIOSClass:type];
}


#line 48
- (void)addTypeAliasWithNSString:(NSString *)name
                    withIOSClass:(IOSClass *)type {
  
#line 49
  (void) [((id<JavaUtilMap>) nil_chk(nameToType_)) putWithId:name withId:[((IOSClass *) nil_chk(type)) getName]];
  (void) [((id<JavaUtilMap>) nil_chk(typeToName_)) putWithId:type withId:name];
}


#line 53
- (NSString *)serializedClassWithIOSClass:(IOSClass *)type {
  
#line 54
  NSString *alias = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(classToName_)) getWithId:[((IOSClass *) nil_chk(type)) getName]], [NSString class]);
  if (alias != nil) {
    return alias;
  }
  else {
    
#line 58
    for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(typeToName_)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      IOSClass *compatibleType = (IOSClass *) check_class_cast([iter next], [IOSClass class]);
      if ([((IOSClass *) nil_chk(compatibleType)) isAssignableFrom:type]) {
        return (NSString *) check_class_cast([typeToName_ getWithId:compatibleType], [NSString class]);
      }
    }
    return [super serializedClassWithIOSClass:type];
  }
}


#line 68
- (IOSClass *)realClassWithNSString:(NSString *)elementName {
  
#line 69
  NSString *mappedName = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(nameToType_)) getWithId:elementName], [NSString class]);
  
#line 71
  if (mappedName != nil) {
    IOSClass *type = [ComThoughtworksXstreamCoreUtilPrimitives primitiveTypeWithNSString:mappedName];
    if (type != nil) {
      return type;
    }
    elementName = mappedName;
  }
  
#line 79
  return [super realClassWithNSString:elementName];
}


#line 82
- (jboolean)itemTypeAsAttributeWithIOSClass:(IOSClass *)clazz {
  
#line 83
  return [((id<JavaUtilMap>) nil_chk(classToName_)) containsKeyWithId:clazz];
}


#line 86
- (jboolean)aliasIsAttributeWithNSString:(NSString *)name {
  
#line 87
  return [((id<JavaUtilMap>) nil_chk(nameToType_)) containsKeyWithId:name];
}


#line 90
- (id)readResolve {
  
#line 91
  nameToType_ = [[JavaUtilHashMap alloc] init];
  for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(classToName_)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    id type = [iter next];
    (void) [nameToType_ putWithId:[classToName_ getWithId:type] withId:type];
  }
  for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(typeToName_)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    IOSClass *type = (IOSClass *) check_class_cast([iter next], [IOSClass class]);
    (void) [nameToType_ putWithId:[typeToName_ getWithId:type] withId:[((IOSClass *) nil_chk(type)) getName]];
  }
  return self;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamMapperClassAliasingMapper *)other {
  [super copyAllFieldsTo:other];
  other->classToName_ = classToName_;
  other->nameToType_ = nameToType_;
  other->typeToName_ = typeToName_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamMapperMapper:", "ClassAliasingMapper", NULL, 0x1, NULL },
    { "addClassAliasWithNSString:withIOSClass:", "addClassAlias", "V", 0x1, NULL },
    { "addClassAttributeAliasWithNSString:withIOSClass:", "addClassAttributeAlias", "V", 0x1, NULL },
    { "addTypeAliasWithNSString:withIOSClass:", "addTypeAlias", "V", 0x1, NULL },
    { "serializedClassWithIOSClass:", "serializedClass", "Ljava.lang.String;", 0x1, NULL },
    { "realClassWithNSString:", "realClass", "Ljava.lang.Class;", 0x1, NULL },
    { "itemTypeAsAttributeWithIOSClass:", "itemTypeAsAttribute", "Z", 0x1, NULL },
    { "aliasIsAttributeWithNSString:", "aliasIsAttribute", "Z", 0x1, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "typeToName_", NULL, 0x12, "Ljava.util.Map;", NULL,  },
    { "classToName_", NULL, 0x12, "Ljava.util.Map;", NULL,  },
    { "nameToType_", NULL, 0x82, "Ljava.util.Map;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamMapperClassAliasingMapper = { "ClassAliasingMapper", "com.thoughtworks.xstream.mapper", NULL, 0x1, 9, methods, 3, fields, 0, NULL};
  return &_ComThoughtworksXstreamMapperClassAliasingMapper;
}

@end
