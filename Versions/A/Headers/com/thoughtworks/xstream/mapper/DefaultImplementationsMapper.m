//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/mapper/DefaultImplementationsMapper.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/mapper/DefaultImplementationsMapper.java"

#include "IOSClass.h"
#include "com/thoughtworks/xstream/InitializationException.h"
#include "com/thoughtworks/xstream/mapper/DefaultImplementationsMapper.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"


#line 28
@implementation ComThoughtworksXstreamMapperDefaultImplementationsMapper


#line 33
- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped {
  if (self =
#line 34
  [super initWithComThoughtworksXstreamMapperMapper:wrapped]) {
    typeToImpl_ =
#line 30
    [[JavaUtilHashMap alloc] init];
    implToType_ =
#line 31
    [[JavaUtilHashMap alloc] init];
    
#line 35
    [self addDefaults];
  }
  return self;
}


#line 38
- (void)addDefaults {
  
#line 40
  [self addDefaultImplementationWithIOSClass:nil withIOSClass:[IOSClass classWithClass:[ComThoughtworksXstreamMapperMapper_Null class]]];
  
#line 42
  [self addDefaultImplementationWithIOSClass:[IOSClass classWithClass:[JavaLangBoolean class]] withIOSClass:[IOSClass booleanClass]];
  [self addDefaultImplementationWithIOSClass:[IOSClass classWithClass:[JavaLangCharacter class]] withIOSClass:[IOSClass charClass]];
  [self addDefaultImplementationWithIOSClass:[IOSClass classWithClass:[JavaLangInteger class]] withIOSClass:[IOSClass intClass]];
  [self addDefaultImplementationWithIOSClass:[IOSClass classWithClass:[JavaLangFloat class]] withIOSClass:[IOSClass floatClass]];
  [self addDefaultImplementationWithIOSClass:[IOSClass classWithClass:[JavaLangDouble class]] withIOSClass:[IOSClass doubleClass]];
  [self addDefaultImplementationWithIOSClass:[IOSClass classWithClass:[JavaLangShort class]] withIOSClass:[IOSClass shortClass]];
  [self addDefaultImplementationWithIOSClass:[IOSClass classWithClass:[JavaLangByte class]] withIOSClass:[IOSClass byteClass]];
  [self addDefaultImplementationWithIOSClass:[IOSClass classWithClass:[JavaLangLong class]] withIOSClass:[IOSClass longClass]];
}


#line 52
- (void)addDefaultImplementationWithIOSClass:(IOSClass *)defaultImplementation
                                withIOSClass:(IOSClass *)ofType {
  
#line 53
  if (defaultImplementation != nil && [defaultImplementation isInterface]) {
    @throw [[ComThoughtworksXstreamInitializationException alloc] initWithNSString:JreStrcat("$$", @"Default implementation is not a concrete class: ",
#line 56
    [defaultImplementation getName])];
  }
  (void) [((id<JavaUtilMap>) nil_chk(typeToImpl_)) putWithId:ofType withId:defaultImplementation];
  (void) [((id<JavaUtilMap>) nil_chk(implToType_)) putWithId:defaultImplementation withId:ofType];
}


#line 62
- (NSString *)serializedClassWithIOSClass:(IOSClass *)type {
  
#line 63
  IOSClass *baseType = (IOSClass *) check_class_cast([((id<JavaUtilMap>) nil_chk(implToType_)) getWithId:type], [IOSClass class]);
  return baseType == nil ? [super serializedClassWithIOSClass:type] : [super serializedClassWithIOSClass:baseType];
}


#line 67
- (IOSClass *)defaultImplementationOfWithIOSClass:(IOSClass *)type {
  
#line 68
  if ([((id<JavaUtilMap>) nil_chk(typeToImpl_)) containsKeyWithId:type]) {
    return (IOSClass *) check_class_cast([typeToImpl_ getWithId:type], [IOSClass class]);
  }
  else {
    
#line 71
    return [super defaultImplementationOfWithIOSClass:type];
  }
}


#line 75
- (id)readResolve {
  
#line 76
  implToType_ = [[JavaUtilHashMap alloc] init];
  for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(typeToImpl_)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    id type = [iter next];
    (void) [implToType_ putWithId:[typeToImpl_ getWithId:type] withId:type];
  }
  return self;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamMapperDefaultImplementationsMapper *)other {
  [super copyAllFieldsTo:other];
  other->implToType_ = implToType_;
  other->typeToImpl_ = typeToImpl_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamMapperMapper:", "DefaultImplementationsMapper", NULL, 0x1, NULL },
    { "addDefaults", NULL, "V", 0x4, NULL },
    { "addDefaultImplementationWithIOSClass:withIOSClass:", "addDefaultImplementation", "V", 0x1, NULL },
    { "serializedClassWithIOSClass:", "serializedClass", "Ljava.lang.String;", 0x1, NULL },
    { "defaultImplementationOfWithIOSClass:", "defaultImplementationOf", "Ljava.lang.Class;", 0x1, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "typeToImpl_", NULL, 0x12, "Ljava.util.Map;", NULL,  },
    { "implToType_", NULL, 0x82, "Ljava.util.Map;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamMapperDefaultImplementationsMapper = { "DefaultImplementationsMapper", "com.thoughtworks.xstream.mapper", NULL, 0x1, 6, methods, 2, fields, 0, NULL};
  return &_ComThoughtworksXstreamMapperDefaultImplementationsMapper;
}

@end
