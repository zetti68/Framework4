//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/mapper/EnumMapper.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/mapper/EnumMapper.java"

#include "IOSClass.h"
#include "com/thoughtworks/xstream/converters/ConverterLookup.h"
#include "com/thoughtworks/xstream/converters/SingleValueConverter.h"
#include "com/thoughtworks/xstream/converters/enums/EnumSingleValueConverter.h"
#include "com/thoughtworks/xstream/mapper/AttributeMapper.h"
#include "com/thoughtworks/xstream/mapper/EnumMapper.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "com/thoughtworks/xstream/mapper/MapperWrapper.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Enum.h"
#include "java/util/EnumSet.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"


#line 33
@implementation ComThoughtworksXstreamMapperEnumMapper


#line 42
- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped
       withComThoughtworksXstreamConvertersConverterLookup:(id<ComThoughtworksXstreamConvertersConverterLookup>)lookup {
  if (self =
#line 43
  [super initWithComThoughtworksXstreamMapperMapper:wrapped]) {
    
#line 44
    (void) [self readResolve];
  }
  return self;
}


#line 47
- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped {
  if (self =
#line 48
  [super initWithComThoughtworksXstreamMapperMapper:wrapped]) {
    
#line 49
    (void) [self readResolve];
  }
  return self;
}


#line 53
- (NSString *)serializedClassWithIOSClass:(IOSClass *)type {
  
#line 54
  if (type == nil) {
    return [super serializedClassWithIOSClass:type];
  }
  if ([[IOSClass classWithClass:[JavaLangEnum class]] isAssignableFrom:type] && [((IOSClass *) nil_chk(type)) getSuperclass] != [IOSClass classWithClass:[JavaLangEnum class]]) {
    return [super serializedClassWithIOSClass:[type getSuperclass]];
  }
  else
#line 59
  if ([[IOSClass classWithClass:[JavaUtilEnumSet class]] isAssignableFrom:type]) {
    return [super serializedClassWithIOSClass:[IOSClass classWithClass:[JavaUtilEnumSet class]]];
  }
  else {
    
#line 62
    return [super serializedClassWithIOSClass:type];
  }
}


#line 67
- (jboolean)isImmutableValueTypeWithIOSClass:(IOSClass *)type {
  
#line 68
  return ([[IOSClass classWithClass:[JavaLangEnum class]] isAssignableFrom:type]) || [super isImmutableValueTypeWithIOSClass:type];
}


#line 72
- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getConverterFromItemTypeWithNSString:(NSString *)fieldName
                                                                                    withIOSClass:(IOSClass *)type
                                                                                    withIOSClass:(IOSClass *)definedIn {
  
#line 74
  id<ComThoughtworksXstreamConvertersSingleValueConverter> converter = [self getLocalConverterWithNSString:fieldName withIOSClass:type withIOSClass:definedIn];
  return converter == nil ?
#line 76
  [super getConverterFromItemTypeWithNSString:fieldName withIOSClass:type withIOSClass:definedIn] :
#line 77
  converter;
}


#line 81
- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getConverterFromAttributeWithIOSClass:(IOSClass *)definedIn
                                                                                     withNSString:(NSString *)attribute
                                                                                     withIOSClass:(IOSClass *)type {
  
#line 83
  id<ComThoughtworksXstreamConvertersSingleValueConverter> converter = [self getLocalConverterWithNSString:attribute withIOSClass:type withIOSClass:definedIn];
  return converter == nil ?
#line 85
  [super getConverterFromAttributeWithIOSClass:definedIn withNSString:attribute withIOSClass:type] :
#line 86
  converter;
}


#line 89
- (id<ComThoughtworksXstreamConvertersSingleValueConverter>)getLocalConverterWithNSString:(NSString *)fieldName
                                                                             withIOSClass:(IOSClass *)type
                                                                             withIOSClass:(IOSClass *)definedIn {
  
#line 90
  if (attributeMapper_ != nil &&
#line 91
  [[IOSClass classWithClass:[JavaLangEnum class]] isAssignableFrom:type] &&
#line 92
  [attributeMapper_ shouldLookForSingleValueConverterWithNSString:fieldName withIOSClass:type withIOSClass:definedIn]) {
    @synchronized(enumConverterMap_) {
      id<ComThoughtworksXstreamConvertersSingleValueConverter> singleValueConverter = [((id<JavaUtilMap>) nil_chk(enumConverterMap_)) getWithId:type];
      if (singleValueConverter == nil) {
        singleValueConverter = [super getConverterFromItemTypeWithNSString:fieldName withIOSClass:type withIOSClass:definedIn];
        if (singleValueConverter == nil) {
          IOSClass *
#line 99
          enumType = type;
          singleValueConverter = [[ComThoughtworksXstreamConvertersEnumsEnumSingleValueConverter alloc] initWithIOSClass:enumType];
        }
        (void) [enumConverterMap_ putWithId:type withId:singleValueConverter];
      }
      return singleValueConverter;
    }
  }
  return nil;
}


#line 110
- (void)flushCache {
  
#line 111
  if ([((id<JavaUtilMap>) nil_chk(enumConverterMap_)) size] > 0) {
    @synchronized(enumConverterMap_) {
      [enumConverterMap_ clear];
    }
  }
}


#line 118
- (id)readResolve {
  
#line 119
  self->enumConverterMap_ = [[JavaUtilHashMap alloc] init];
  self->attributeMapper_ = (ComThoughtworksXstreamMapperAttributeMapper *) check_class_cast([self lookupMapperOfTypeWithIOSClass:[IOSClass classWithClass:[ComThoughtworksXstreamMapperAttributeMapper class]]], [ComThoughtworksXstreamMapperAttributeMapper class]);
  return self;
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamMapperEnumMapper *)other {
  [super copyAllFieldsTo:other];
  other->attributeMapper_ = attributeMapper_;
  other->enumConverterMap_ = enumConverterMap_;
}

+ (IOSObjectArray *)__annotations_ComThoughtworksXstreamMapperEnumMapperWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamConvertersConverterLookup_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamMapperMapper:withComThoughtworksXstreamConvertersConverterLookup:", "EnumMapper", NULL, 0x1, NULL },
    { "initWithComThoughtworksXstreamMapperMapper:", "EnumMapper", NULL, 0x1, NULL },
    { "serializedClassWithIOSClass:", "serializedClass", "Ljava.lang.String;", 0x1, NULL },
    { "isImmutableValueTypeWithIOSClass:", "isImmutableValueType", "Z", 0x1, NULL },
    { "getConverterFromItemTypeWithNSString:withIOSClass:withIOSClass:", "getConverterFromItemType", "Lcom.thoughtworks.xstream.converters.SingleValueConverter;", 0x1, NULL },
    { "getConverterFromAttributeWithIOSClass:withNSString:withIOSClass:", "getConverterFromAttribute", "Lcom.thoughtworks.xstream.converters.SingleValueConverter;", 0x1, NULL },
    { "getLocalConverterWithNSString:withIOSClass:withIOSClass:", "getLocalConverter", "Lcom.thoughtworks.xstream.converters.SingleValueConverter;", 0x2, NULL },
    { "flushCache", NULL, "V", 0x1, NULL },
    { "readResolve", NULL, "Ljava.lang.Object;", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "attributeMapper_", NULL, 0x82, "Lcom.thoughtworks.xstream.mapper.AttributeMapper;", NULL,  },
    { "enumConverterMap_", NULL, 0x82, "Ljava.util.Map;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamMapperEnumMapper = { "EnumMapper", "com.thoughtworks.xstream.mapper", NULL, 0x1, 9, methods, 2, fields, 0, NULL};
  return &_ComThoughtworksXstreamMapperEnumMapper;
}

@end
