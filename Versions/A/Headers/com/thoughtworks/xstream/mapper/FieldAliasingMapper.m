//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/mapper/FieldAliasingMapper.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/mapper/FieldAliasingMapper.java"

#include "IOSClass.h"
#include "com/thoughtworks/xstream/core/util/FastField.h"
#include "com/thoughtworks/xstream/mapper/FieldAliasingMapper.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"


#line 30
@implementation ComThoughtworksXstreamMapperFieldAliasingMapper


#line 37
- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped {
  if (self =
#line 38
  [super initWithComThoughtworksXstreamMapperMapper:wrapped]) {
    fieldToAliasMap_ =
#line 32
    [[JavaUtilHashMap alloc] init];
    aliasToFieldMap_ =
#line 33
    [[JavaUtilHashMap alloc] init];
    fieldsToOmit_ =
#line 34
    [[JavaUtilHashSet alloc] init];
    unknownFieldsToIgnore_ =
#line 35
    [[JavaUtilLinkedHashSet alloc] init];
  }
  return self;
}


#line 41
- (void)addFieldAliasWithNSString:(NSString *)alias
                     withIOSClass:(IOSClass *)type
                     withNSString:(NSString *)fieldName {
  
#line 42
  (void) [((id<JavaUtilMap>) nil_chk(fieldToAliasMap_)) putWithId:[self keyWithIOSClass:type withNSString:fieldName] withId:alias];
  (void) [((id<JavaUtilMap>) nil_chk(aliasToFieldMap_)) putWithId:[self keyWithIOSClass:type withNSString:alias] withId:fieldName];
}


#line 46
- (void)addFieldsToIgnoreWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern {
  
#line 47
  [((id<JavaUtilSet>) nil_chk(unknownFieldsToIgnore_)) addWithId:pattern];
}


#line 50
- (id)keyWithIOSClass:(IOSClass *)type
         withNSString:(NSString *)name {
  
#line 51
  return [[ComThoughtworksXstreamCoreUtilFastField alloc] initWithIOSClass:type withNSString:name];
}


#line 54
- (NSString *)serializedMemberWithIOSClass:(IOSClass *)type
                              withNSString:(NSString *)memberName {
  
#line 55
  NSString *alias = [self getMemberWithIOSClass:type withNSString:memberName withJavaUtilMap:fieldToAliasMap_];
  if (alias == nil) {
    return [super serializedMemberWithIOSClass:type withNSString:memberName];
  }
  else {
    
#line 59
    return alias;
  }
}


#line 63
- (NSString *)realMemberWithIOSClass:(IOSClass *)type
                        withNSString:(NSString *)serialized {
  
#line 64
  NSString *real = [self getMemberWithIOSClass:type withNSString:serialized withJavaUtilMap:aliasToFieldMap_];
  if (real == nil) {
    return [super realMemberWithIOSClass:type withNSString:serialized];
  }
  else {
    
#line 68
    return real;
  }
}


#line 72
- (NSString *)getMemberWithIOSClass:(IOSClass *)type
                       withNSString:(NSString *)name
                    withJavaUtilMap:(id<JavaUtilMap>)map {
  
#line 73
  NSString *member = nil;
  for (IOSClass *declaringType = type;
#line 75
  member == nil && declaringType != [IOSClass classWithClass:[NSObject class]] && declaringType != nil;
#line 76
  declaringType = [((IOSClass *) nil_chk(declaringType)) getSuperclass]) {
    member = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(map)) getWithId:[self keyWithIOSClass:declaringType withNSString:name]], [NSString class]);
  }
  return member;
}


#line 82
- (jboolean)shouldSerializeMemberWithIOSClass:(IOSClass *)definedIn
                                 withNSString:(NSString *)fieldName {
  
#line 83
  if ([((id<JavaUtilSet>) nil_chk(fieldsToOmit_)) containsWithId:[self keyWithIOSClass:definedIn withNSString:fieldName]]) {
    return NO;
  }
  else
#line 85
  if (definedIn == [IOSClass classWithClass:[NSObject class]] && ![((id<JavaUtilSet>) nil_chk(unknownFieldsToIgnore_)) isEmpty]) {
    for (id<JavaUtilIterator> iter = [unknownFieldsToIgnore_ iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      JavaUtilRegexPattern *pattern = (JavaUtilRegexPattern *) check_class_cast([iter next], [JavaUtilRegexPattern class]);
      if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(pattern)) matcherWithJavaLangCharSequence:fieldName])) matches]) {
        return NO;
      }
    }
  }
  return YES;
}


#line 96
- (void)omitFieldWithIOSClass:(IOSClass *)definedIn
                 withNSString:(NSString *)fieldName {
  
#line 97
  [((id<JavaUtilSet>) nil_chk(fieldsToOmit_)) addWithId:[self keyWithIOSClass:definedIn withNSString:fieldName]];
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamMapperFieldAliasingMapper *)other {
  [super copyAllFieldsTo:other];
  other->aliasToFieldMap_ = aliasToFieldMap_;
  other->fieldToAliasMap_ = fieldToAliasMap_;
  other->fieldsToOmit_ = fieldsToOmit_;
  other->unknownFieldsToIgnore_ = unknownFieldsToIgnore_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamMapperMapper:", "FieldAliasingMapper", NULL, 0x1, NULL },
    { "addFieldAliasWithNSString:withIOSClass:withNSString:", "addFieldAlias", "V", 0x1, NULL },
    { "addFieldsToIgnoreWithJavaUtilRegexPattern:", "addFieldsToIgnore", "V", 0x1, NULL },
    { "keyWithIOSClass:withNSString:", "key", "Ljava.lang.Object;", 0x2, NULL },
    { "serializedMemberWithIOSClass:withNSString:", "serializedMember", "Ljava.lang.String;", 0x1, NULL },
    { "realMemberWithIOSClass:withNSString:", "realMember", "Ljava.lang.String;", 0x1, NULL },
    { "getMemberWithIOSClass:withNSString:withJavaUtilMap:", "getMember", "Ljava.lang.String;", 0x2, NULL },
    { "shouldSerializeMemberWithIOSClass:withNSString:", "shouldSerializeMember", "Z", 0x1, NULL },
    { "omitFieldWithIOSClass:withNSString:", "omitField", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fieldToAliasMap_", NULL, 0x14, "Ljava.util.Map;", NULL,  },
    { "aliasToFieldMap_", NULL, 0x14, "Ljava.util.Map;", NULL,  },
    { "fieldsToOmit_", NULL, 0x14, "Ljava.util.Set;", NULL,  },
    { "unknownFieldsToIgnore_", NULL, 0x14, "Ljava.util.Set;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamMapperFieldAliasingMapper = { "FieldAliasingMapper", "com.thoughtworks.xstream.mapper", NULL, 0x1, 9, methods, 4, fields, 0, NULL};
  return &_ComThoughtworksXstreamMapperFieldAliasingMapper;
}

@end
