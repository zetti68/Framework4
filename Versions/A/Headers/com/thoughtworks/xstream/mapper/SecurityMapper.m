//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/mapper/SecurityMapper.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/mapper/SecurityMapper.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "com/thoughtworks/xstream/mapper/SecurityMapper.h"
#include "com/thoughtworks/xstream/security/AnyTypePermission.h"
#include "com/thoughtworks/xstream/security/ForbiddenClassException.h"
#include "com/thoughtworks/xstream/security/NoTypePermission.h"
#include "com/thoughtworks/xstream/security/TypePermission.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"


#line 26
@implementation ComThoughtworksXstreamMapperSecurityMapper


#line 36
- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped {
  return
#line 37
  [self initComThoughtworksXstreamMapperSecurityMapperWithComThoughtworksXstreamMapperMapper:wrapped withComThoughtworksXstreamSecurityTypePermissionArray:(IOSObjectArray *) check_class_cast(nil, [IOSObjectArray class])];
}


#line 47
- (instancetype)initComThoughtworksXstreamMapperSecurityMapperWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped
                                               withComThoughtworksXstreamSecurityTypePermissionArray:(IOSObjectArray *)permissions {
  if (self =
#line 48
  [super initWithComThoughtworksXstreamMapperMapper:wrapped]) {
    
#line 49
    self->permissions_ = permissions == nil ?
#line 50
    [[JavaUtilArrayList alloc] init] :
#line 51
    [[JavaUtilArrayList alloc] initWithJavaUtilCollection:[JavaUtilArrays asListWithNSObjectArray:permissions]];
  }
  return self;
}

- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped
     withComThoughtworksXstreamSecurityTypePermissionArray:(IOSObjectArray *)permissions {
  return [self initComThoughtworksXstreamMapperSecurityMapperWithComThoughtworksXstreamMapperMapper:
#line 47
wrapped withComThoughtworksXstreamSecurityTypePermissionArray:permissions];
}


#line 64
- (void)addPermissionWithComThoughtworksXstreamSecurityTypePermission:(id<ComThoughtworksXstreamSecurityTypePermission>)permission {
  
#line 65
  if ([((id<ComThoughtworksXstreamSecurityTypePermission>) nil_chk(permission)) isEqual:ComThoughtworksXstreamSecurityNoTypePermission_get_NONE_()] || [permission isEqual:ComThoughtworksXstreamSecurityAnyTypePermission_get_ANY_()])
#line 66
  [((id<JavaUtilList>) nil_chk(permissions_)) clear];
  [((id<JavaUtilList>) nil_chk(permissions_)) addWithInt:0 withId:permission];
}


#line 70
- (IOSClass *)realClassWithNSString:(NSString *)elementName {
  
#line 71
  IOSClass *type = [super realClassWithNSString:elementName];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(permissions_)) size]; ++i) {
    id<ComThoughtworksXstreamSecurityTypePermission> permission = (id<ComThoughtworksXstreamSecurityTypePermission>) check_protocol_cast([permissions_ getWithInt:i], @protocol(ComThoughtworksXstreamSecurityTypePermission));
    if ([((id<ComThoughtworksXstreamSecurityTypePermission>) nil_chk(permission)) allowsWithIOSClass:type])
#line 75
    return type;
  }
  @throw [[ComThoughtworksXstreamSecurityForbiddenClassException alloc] initWithIOSClass:type];
}

- (void)copyAllFieldsTo:(ComThoughtworksXstreamMapperSecurityMapper *)other {
  [super copyAllFieldsTo:other];
  other->permissions_ = permissions_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamMapperMapper:", "SecurityMapper", NULL, 0x1, NULL },
    { "initWithComThoughtworksXstreamMapperMapper:withComThoughtworksXstreamSecurityTypePermissionArray:", "SecurityMapper", NULL, 0x1, NULL },
    { "addPermissionWithComThoughtworksXstreamSecurityTypePermission:", "addPermission", "V", 0x1, NULL },
    { "realClassWithNSString:", "realClass", "Ljava.lang.Class;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "permissions_", NULL, 0x12, "Ljava.util.List;", NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamMapperSecurityMapper = { "SecurityMapper", "com.thoughtworks.xstream.mapper", NULL, 0x1, 4, methods, 1, fields, 0, NULL};
  return &_ComThoughtworksXstreamMapperSecurityMapper;
}

@end
