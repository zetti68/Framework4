//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/mapper/SecurityMapper.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/mapper/SecurityMapper.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "com/thoughtworks/xstream/mapper/MapperWrapper.h"
#include "com/thoughtworks/xstream/mapper/SecurityMapper.h"
#include "com/thoughtworks/xstream/security/AnyTypePermission.h"
#include "com/thoughtworks/xstream/security/ForbiddenClassException.h"
#include "com/thoughtworks/xstream/security/NoTypePermission.h"
#include "com/thoughtworks/xstream/security/TypePermission.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"

@interface ComThoughtworksXstreamMapperSecurityMapper () {
 @public
  id<JavaUtilList> permissions_;
}

@end

J2OBJC_FIELD_SETTER(ComThoughtworksXstreamMapperSecurityMapper, permissions_, id<JavaUtilList>)


#line 26
@implementation ComThoughtworksXstreamMapperSecurityMapper


#line 36
- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped {
  ComThoughtworksXstreamMapperSecurityMapper_initWithComThoughtworksXstreamMapperMapper_(self, wrapped);
  return self;
}


#line 47
- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped
     withComThoughtworksXstreamSecurityTypePermissionArray:(IOSObjectArray *)permissions {
  ComThoughtworksXstreamMapperSecurityMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamSecurityTypePermissionArray_(self, wrapped, permissions);
  return self;
}


#line 64
- (void)addPermissionWithComThoughtworksXstreamSecurityTypePermission:(id<ComThoughtworksXstreamSecurityTypePermission>)permission {
  if ([((id<ComThoughtworksXstreamSecurityTypePermission>) nil_chk(permission)) isEqual:ComThoughtworksXstreamSecurityNoTypePermission_get_NONE_()] || [permission isEqual:ComThoughtworksXstreamSecurityAnyTypePermission_get_ANY_()])
#line 66
  [((id<JavaUtilList>) nil_chk(permissions_)) clear];
  [((id<JavaUtilList>) nil_chk(permissions_)) addWithInt:0 withId:permission];
}


#line 70
- (IOSClass *)realClassWithNSString:(NSString *)elementName {
  IOSClass *type = [super realClassWithNSString:elementName];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(permissions_)) size]; ++i) {
    id<ComThoughtworksXstreamSecurityTypePermission> permission = (id<ComThoughtworksXstreamSecurityTypePermission>) check_protocol_cast([permissions_ getWithInt:i], @protocol(ComThoughtworksXstreamSecurityTypePermission));
    if ([((id<ComThoughtworksXstreamSecurityTypePermission>) nil_chk(permission)) allowsWithIOSClass:type])
#line 75
    return type;
  }
  @throw new_ComThoughtworksXstreamSecurityForbiddenClassException_initWithIOSClass_(type);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamMapperMapper:", "SecurityMapper", NULL, 0x1, NULL, NULL },
    { "initWithComThoughtworksXstreamMapperMapper:withComThoughtworksXstreamSecurityTypePermissionArray:", "SecurityMapper", NULL, 0x1, NULL, NULL },
    { "addPermissionWithComThoughtworksXstreamSecurityTypePermission:", "addPermission", "V", 0x1, NULL, NULL },
    { "realClassWithNSString:", "realClass", "Ljava.lang.Class;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "permissions_", NULL, 0x12, "Ljava.util.List;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamMapperSecurityMapper = { 2, "SecurityMapper", "com.thoughtworks.xstream.mapper", NULL, 0x1, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamMapperSecurityMapper;
}

@end


#line 36
void ComThoughtworksXstreamMapperSecurityMapper_initWithComThoughtworksXstreamMapperMapper_(ComThoughtworksXstreamMapperSecurityMapper *self, id<ComThoughtworksXstreamMapperMapper> wrapped) {
  (void) ComThoughtworksXstreamMapperSecurityMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamSecurityTypePermissionArray_(self, wrapped, nil);
}


#line 36
ComThoughtworksXstreamMapperSecurityMapper *new_ComThoughtworksXstreamMapperSecurityMapper_initWithComThoughtworksXstreamMapperMapper_(id<ComThoughtworksXstreamMapperMapper> wrapped) {
  ComThoughtworksXstreamMapperSecurityMapper *self = [ComThoughtworksXstreamMapperSecurityMapper alloc];
  ComThoughtworksXstreamMapperSecurityMapper_initWithComThoughtworksXstreamMapperMapper_(self, wrapped);
  return self;
}


#line 47
void ComThoughtworksXstreamMapperSecurityMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamSecurityTypePermissionArray_(ComThoughtworksXstreamMapperSecurityMapper *self, id<ComThoughtworksXstreamMapperMapper> wrapped, IOSObjectArray *permissions) {
  (void) ComThoughtworksXstreamMapperMapperWrapper_initWithComThoughtworksXstreamMapperMapper_(self, wrapped);
  self->permissions_ = permissions == nil ? new_JavaUtilArrayList_init() : new_JavaUtilArrayList_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(
#line 51
  permissions));
}


#line 47
ComThoughtworksXstreamMapperSecurityMapper *new_ComThoughtworksXstreamMapperSecurityMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamSecurityTypePermissionArray_(id<ComThoughtworksXstreamMapperMapper> wrapped, IOSObjectArray *permissions) {
  ComThoughtworksXstreamMapperSecurityMapper *self = [ComThoughtworksXstreamMapperSecurityMapper alloc];
  ComThoughtworksXstreamMapperSecurityMapper_initWithComThoughtworksXstreamMapperMapper_withComThoughtworksXstreamSecurityTypePermissionArray_(self, wrapped, permissions);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamMapperSecurityMapper)
