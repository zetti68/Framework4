//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/mapper/ArrayMapper.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/src/com/thoughtworks/xstream/mapper/ArrayMapper.java"

#include "IOSClass.h"
#include "com/thoughtworks/xstream/core/util/Primitives.h"
#include "com/thoughtworks/xstream/mapper/ArrayMapper.h"
#include "com/thoughtworks/xstream/mapper/Mapper.h"
#include "java/lang/StringBuffer.h"


#line 22
@implementation ComThoughtworksXstreamMapperArrayMapper

- (instancetype)initWithComThoughtworksXstreamMapperMapper:(id<ComThoughtworksXstreamMapperMapper>)wrapped {
  return
#line 25
  [super initWithComThoughtworksXstreamMapperMapper:wrapped];
}


#line 28
- (NSString *)serializedClassWithIOSClass:(IOSClass *)type {
  
#line 29
  JavaLangStringBuffer *arraySuffix = [[JavaLangStringBuffer alloc] init];
  NSString *name = nil;
  while ([((IOSClass *) nil_chk(type)) isArray]) {
    name = [super serializedClassWithIOSClass:type];
    if ([((NSString *) nil_chk([type getName])) isEqual:name]) {
      type = [type getComponentType];
      (void) [arraySuffix appendWithNSString:@"-array"];
      name = nil;
    }
    else {
      
#line 38
      break;
    }
  }
  if (name == nil) {
    name = [self boxedTypeNameWithIOSClass:type];
  }
  if (name == nil) {
    name = [super serializedClassWithIOSClass:type];
  }
  if ([arraySuffix sequenceLength] > 0) {
    return JreStrcat("$@", name, arraySuffix);
  }
  else {
    
#line 50
    return name;
  }
}


#line 54
- (IOSClass *)realClassWithNSString:(NSString *)elementName {
  
#line 55
  jint dimensions = 0;
  
#line 58
  while ([((NSString *) nil_chk(elementName)) hasSuffix:@"-array"]) {
    elementName = [elementName substring:0 endIndex:((jint) [elementName length]) - 6];
    ++dimensions;
  }
  
#line 63
  if (dimensions > 0) {
    IOSClass *componentType = [ComThoughtworksXstreamCoreUtilPrimitives primitiveTypeWithNSString:elementName];
    if (componentType == nil) {
      componentType = [super realClassWithNSString:elementName];
    }
    while ([((IOSClass *) nil_chk(componentType)) isArray]) {
      componentType = [componentType getComponentType];
      ++dimensions;
    }
    return [super realClassWithNSString:[self arrayTypeWithInt:dimensions withIOSClass:componentType]];
  }
  else {
    
#line 74
    return [super realClassWithNSString:elementName];
  }
}


#line 78
- (NSString *)arrayTypeWithInt:(jint)dimensions
                  withIOSClass:(IOSClass *)componentType {
  
#line 79
  JavaLangStringBuffer *className_ = [[JavaLangStringBuffer alloc] init];
  for (jint i = 0; i < dimensions; i++) {
    (void) [className_ appendWithChar:'['];
  }
  if ([((IOSClass *) nil_chk(componentType)) isPrimitive]) {
    (void) [className_ appendWithChar:[ComThoughtworksXstreamCoreUtilPrimitives representingCharWithIOSClass:componentType]];
    return [className_ description];
  }
  else {
    
#line 87
    (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([className_ appendWithChar:'L'])) appendWithNSString:[componentType getName]])) appendWithChar:';'];
    return [className_ description];
  }
}


#line 92
- (NSString *)boxedTypeNameWithIOSClass:(IOSClass *)type {
  
#line 93
  return [ComThoughtworksXstreamCoreUtilPrimitives isBoxedWithIOSClass:type] ? [((IOSClass *) nil_chk(type)) getName] : nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComThoughtworksXstreamMapperMapper:", "ArrayMapper", NULL, 0x1, NULL },
    { "serializedClassWithIOSClass:", "serializedClass", "Ljava.lang.String;", 0x1, NULL },
    { "realClassWithNSString:", "realClass", "Ljava.lang.Class;", 0x1, NULL },
    { "arrayTypeWithInt:withIOSClass:", "arrayType", "Ljava.lang.String;", 0x2, NULL },
    { "boxedTypeNameWithIOSClass:", "boxedTypeName", "Ljava.lang.String;", 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamMapperArrayMapper = { "ArrayMapper", "com.thoughtworks.xstream.mapper", NULL, 0x1, 5, methods, 0, NULL, 0, NULL};
  return &_ComThoughtworksXstreamMapperArrayMapper;
}

@end
