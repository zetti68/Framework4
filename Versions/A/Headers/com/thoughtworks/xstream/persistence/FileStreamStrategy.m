//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/persistence/FileStreamStrategy.java
//


#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.thoughtworks.xstream/bin/src/com/thoughtworks/xstream/persistence/FileStreamStrategy.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/thoughtworks/xstream/XStream.h"
#include "com/thoughtworks/xstream/persistence/AbstractFilePersistenceStrategy.h"
#include "com/thoughtworks/xstream/persistence/FileStreamStrategy.h"
#include "java/io/File.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"


#line 30
@implementation ComThoughtworksXstreamPersistenceFileStreamStrategy

- (instancetype)initWithJavaIoFile:(JavaIoFile *)baseDirectory {
  ComThoughtworksXstreamPersistenceFileStreamStrategy_initWithJavaIoFile_(self, baseDirectory);
  return self;
}


#line 36
- (instancetype)initWithJavaIoFile:(JavaIoFile *)baseDirectory
 withComThoughtworksXstreamXStream:(ComThoughtworksXstreamXStream *)xstream {
  ComThoughtworksXstreamPersistenceFileStreamStrategy_initWithJavaIoFile_withComThoughtworksXstreamXStream_(self, baseDirectory, xstream);
  return self;
}


#line 46
- (id)extractKeyWithNSString:(NSString *)name {
  NSString *key = [self unescapeWithNSString:[name substring:0 endIndex:((jint) [((NSString *) nil_chk(name)) length]) - 4]];
  return [((NSString *) nil_chk(key)) isEqual:@"\x00"] ? nil : key;
}

- (NSString *)unescapeWithNSString:(NSString *)name {
  JavaLangStringBuffer *buffer = new_JavaLangStringBuffer_init();
  jchar lastC = 0xffff;
  jint currentValue = -1;
  
#line 56
  IOSCharArray *array = [((NSString *) nil_chk(name)) toCharArray];
  for (jint i = 0; i < ((IOSCharArray *) nil_chk(array))->size_; i++) {
    jchar c = IOSCharArray_Get(array, i);
    if (c == '_' && currentValue != -1) {
      if (lastC == '_') {
        (void) [buffer appendWithChar:'_'];
      }
      else {
        
#line 63
        (void) [buffer appendWithChar:(jchar) currentValue];
      }
      currentValue = -1;
    }
    else
#line 66
    if (c == '_') {
      currentValue = 0;
    }
    else
#line 68
    if (currentValue != -1) {
      currentValue = currentValue * 16 + JavaLangInteger_parseIntWithNSString_withInt_(NSString_valueOfChar_(c), 16);
    }
    else {
      
#line 71
      (void) [buffer appendWithChar:c];
    }
    lastC = c;
  }
  return [buffer description];
}


#line 84
- (NSString *)getNameWithId:(id)key {
  return JreStrcat("$$", [self escapeWithNSString:key == nil ? @"\x00" : [key description]], @".xml");
}

- (NSString *)escapeWithNSString:(NSString *)key {
  
#line 90
  JavaLangStringBuffer *buffer = new_JavaLangStringBuffer_init();
  IOSCharArray *array = [((NSString *) nil_chk(key)) toCharArray];
  for (jint i = 0; i < ((IOSCharArray *) nil_chk(array))->size_; i++) {
    jchar c = IOSCharArray_Get(array, i);
    if (JavaLangCharacter_isDigitWithChar_(c) || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {
      (void) [buffer appendWithChar:c];
    }
    else
#line 96
    if (c == '_') {
      (void) [buffer appendWithNSString:@"__"];
    }
    else {
      
#line 99
      (void) [buffer appendWithNSString:JreStrcat("C$C", '_', (JavaLangInteger_toHexStringWithInt_(c)), '_')];
    }
  }
  return [buffer description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoFile:", "FileStreamStrategy", NULL, 0x1, NULL, NULL },
    { "initWithJavaIoFile:withComThoughtworksXstreamXStream:", "FileStreamStrategy", NULL, 0x1, NULL, NULL },
    { "extractKeyWithNSString:", "extractKey", "Ljava.lang.Object;", 0x4, NULL, NULL },
    { "unescapeWithNSString:", "unescape", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getNameWithId:", "getName", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "escapeWithNSString:", "escape", "Ljava.lang.String;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComThoughtworksXstreamPersistenceFileStreamStrategy = { 2, "FileStreamStrategy", "com.thoughtworks.xstream.persistence", NULL, 0x1, 6, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComThoughtworksXstreamPersistenceFileStreamStrategy;
}

@end


#line 32
void ComThoughtworksXstreamPersistenceFileStreamStrategy_initWithJavaIoFile_(ComThoughtworksXstreamPersistenceFileStreamStrategy *self, JavaIoFile *baseDirectory) {
  (void) ComThoughtworksXstreamPersistenceFileStreamStrategy_initWithJavaIoFile_withComThoughtworksXstreamXStream_(self, baseDirectory, new_ComThoughtworksXstreamXStream_init());
}


#line 32
ComThoughtworksXstreamPersistenceFileStreamStrategy *new_ComThoughtworksXstreamPersistenceFileStreamStrategy_initWithJavaIoFile_(JavaIoFile *baseDirectory) {
  ComThoughtworksXstreamPersistenceFileStreamStrategy *self = [ComThoughtworksXstreamPersistenceFileStreamStrategy alloc];
  ComThoughtworksXstreamPersistenceFileStreamStrategy_initWithJavaIoFile_(self, baseDirectory);
  return self;
}


#line 36
void ComThoughtworksXstreamPersistenceFileStreamStrategy_initWithJavaIoFile_withComThoughtworksXstreamXStream_(ComThoughtworksXstreamPersistenceFileStreamStrategy *self, JavaIoFile *baseDirectory, ComThoughtworksXstreamXStream *xstream) {
  (void) ComThoughtworksXstreamPersistenceAbstractFilePersistenceStrategy_initWithJavaIoFile_withComThoughtworksXstreamXStream_withNSString_(self, baseDirectory, xstream, nil);
}


#line 36
ComThoughtworksXstreamPersistenceFileStreamStrategy *new_ComThoughtworksXstreamPersistenceFileStreamStrategy_initWithJavaIoFile_withComThoughtworksXstreamXStream_(JavaIoFile *baseDirectory, ComThoughtworksXstreamXStream *xstream) {
  ComThoughtworksXstreamPersistenceFileStreamStrategy *self = [ComThoughtworksXstreamPersistenceFileStreamStrategy alloc];
  ComThoughtworksXstreamPersistenceFileStreamStrategy_initWithJavaIoFile_withComThoughtworksXstreamXStream_(self, baseDirectory, xstream);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComThoughtworksXstreamPersistenceFileStreamStrategy)
